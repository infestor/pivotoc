
pivotoc.a:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001608  0000169c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  008001f0  008001f0  0000178c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  000017a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000184a  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  000031c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d5  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007eb  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001128  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00005d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3f       	cpi	r26, 0xF0	; 240
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 ef       	ldi	r26, 0xF0	; 240
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 36       	cpi	r26, 0x63	; 99
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <main>
      9e:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_default>

000000a6 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
      a6:	86 b1       	in	r24, 0x06	; 6
}
      a8:	80 72       	andi	r24, 0x20	; 32
      aa:	08 95       	ret

000000ac <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
      ac:	45 9a       	sbi	0x08, 5	; 8
	OW_DIR_OUT();
      ae:	3d 9a       	sbi	0x07, 5	; 7
      b0:	08 95       	ret

000000b2 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      b8:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      ba:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
      bc:	45 98       	cbi	0x08, 5	; 8
#endif
		OW_DIR_OUT();    // drive bus low
      be:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	8a e0       	ldi	r24, 0x0A	; 10
      c2:	8a 95       	dec	r24
      c4:	f1 f7       	brne	.-4      	; 0xc2 <ow_bit_io_intern+0x10>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <ow_bit_io_intern+0x16>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
      c8:	cc 23       	and	r28, r28
      ca:	11 f0       	breq	.+4      	; 0xd0 <ow_bit_io_intern+0x1e>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
      cc:	3d 98       	cbi	0x07, 5	; 7
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
      ce:	45 9a       	sbi	0x08, 5	; 8
      d0:	85 e4       	ldi	r24, 0x45	; 69
      d2:	8a 95       	dec	r24
      d4:	f1 f7       	brne	.-4      	; 0xd2 <ow_bit_io_intern+0x20>
      d6:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
      d8:	35 9b       	sbis	0x06, 5	; 6
			b = 0;  // sample at end of read-timeslot
      da:	c0 e0       	ldi	r28, 0x00	; 0
      dc:	85 ee       	ldi	r24, 0xE5	; 229
      de:	8a 95       	dec	r24
      e0:	f1 f7       	brne	.-4      	; 0xde <ow_bit_io_intern+0x2c>
      e2:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
      e4:	45 9a       	sbi	0x08, 5	; 8
#endif
		OW_DIR_IN();
      e6:	3d 98       	cbi	0x07, 5	; 7
	
		if ( with_parasite_enable ) {
      e8:	61 11       	cpse	r22, r1
			ow_parasite_enable();
      ea:	0e 94 56 00 	call	0xac	; 0xac <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      ee:	df bf       	out	0x3f, r29	; 63
      f0:	85 e3       	ldi	r24, 0x35	; 53
      f2:	8a 95       	dec	r24
      f4:	f1 f7       	brne	.-4      	; 0xf2 <ow_bit_io_intern+0x40>
      f6:	00 00       	nop
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
      f8:	8c 2f       	mov	r24, r28
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
     100:	3d 98       	cbi	0x07, 5	; 7
     102:	08 95       	ret

00000104 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     104:	45 98       	cbi	0x08, 5	; 8
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     106:	3d 9a       	sbi	0x07, 5	; 7
     108:	8f e7       	ldi	r24, 0x7F	; 127
     10a:	97 e0       	ldi	r25, 0x07	; 7
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <ow_reset+0x8>
     110:	00 c0       	rjmp	.+0      	; 0x112 <ow_reset+0xe>
     112:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     114:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     116:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     118:	3d 98       	cbi	0x07, 5	; 7
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     11a:	45 9a       	sbi	0x08, 5	; 8
     11c:	ef ef       	ldi	r30, 0xFF	; 255
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	31 97       	sbiw	r30, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <ow_reset+0x1c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <ow_reset+0x22>
     126:	00 00       	nop
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     128:	86 b1       	in	r24, 0x06	; 6
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12a:	9f bf       	out	0x3f, r25	; 63
     12c:	ef e7       	ldi	r30, 0x7F	; 127
     12e:	f6 e0       	ldi	r31, 0x06	; 6
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <ow_reset+0x2c>
     134:	00 c0       	rjmp	.+0      	; 0x136 <ow_reset+0x32>
     136:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     138:	35 9b       	sbis	0x06, 5	; 6
     13a:	02 c0       	rjmp	.+4      	; 0x140 <ow_reset+0x3c>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     140:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
     142:	08 95       	ret

00000144 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	81 70       	andi	r24, 0x01	; 1
     148:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
}
     14c:	08 95       	ret

0000014e <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	c8 2f       	mov	r28, r24
     154:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     156:	8c 2f       	mov	r24, r28
     158:	81 70       	andi	r24, 0x01	; 1
     15a:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
		b >>= 1;
     15e:	c6 95       	lsr	r28
		if( j ) {
     160:	81 11       	cpse	r24, r1
			b |= 0x80;
     162:	c0 68       	ori	r28, 0x80	; 128
     164:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     166:	b9 f7       	brne	.-18     	; 0x156 <ow_byte_wr+0x8>
	
	return b;
}
     168:	8c 2f       	mov	r24, r28
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     176:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     178:	d1 30       	cpi	r29, 0x01	; 1
     17a:	31 f0       	breq	.+12     	; 0x188 <ow_byte_wr_with_parasite_enable+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8c 2f       	mov	r24, r28
     180:	81 70       	andi	r24, 0x01	; 1
     182:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
     186:	05 c0       	rjmp	.+10     	; 0x192 <ow_byte_wr_with_parasite_enable+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	8c 2f       	mov	r24, r28
     18c:	81 70       	andi	r24, 0x01	; 1
     18e:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
		}
		b >>= 1;
     192:	c6 95       	lsr	r28
		if( j ) {
     194:	81 11       	cpse	r24, r1
			b |= 0x80;
     196:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     198:	d1 50       	subi	r29, 0x01	; 1
     19a:	71 f7       	brne	.-36     	; 0x178 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     19c:	8c 2f       	mov	r24, r28
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	e8 2e       	mov	r14, r24
     1b2:	eb 01       	movw	r28, r22
     1b4:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     1b6:	0e 94 82 00 	call	0x104	; 0x104 <ow_reset>

	if( id ) {
     1ba:	20 97       	sbiw	r28, 0x00	; 0
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     1be:	85 e5       	ldi	r24, 0x55	; 85
     1c0:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
     1c4:	8e 01       	movw	r16, r28
     1c6:	08 5f       	subi	r16, 0xF8	; 248
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     1ca:	89 91       	ld	r24, Y+
     1cc:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
			id++;
		} while( --i );
     1d0:	c0 17       	cp	r28, r16
     1d2:	d1 07       	cpc	r29, r17
     1d4:	d1 f7       	brne	.-12     	; 0x1ca <ow_command_intern+0x26>
     1d6:	03 c0       	rjmp	.+6      	; 0x1de <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     1d8:	8c ec       	ldi	r24, 0xCC	; 204
     1da:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     1de:	ff 20       	and	r15, r15
     1e0:	21 f0       	breq	.+8      	; 0x1ea <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     1e2:	8e 2d       	mov	r24, r14
     1e4:	0e 94 b8 00 	call	0x170	; 0x170 <ow_byte_wr_with_parasite_enable>
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     1ea:	8e 2d       	mov	r24, r14
     1ec:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	}
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	08 95       	ret

000001fe <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
}
     204:	08 95       	ret

00000206 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	e8 2e       	mov	r14, r24
     216:	eb 01       	movw	r28, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     218:	0e 94 82 00 	call	0x104	; 0x104 <ow_reset>
     21c:	81 11       	cpse	r24, r1
     21e:	27 c0       	rjmp	.+78     	; 0x26e <ow_rom_search+0x68>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     220:	80 ef       	ldi	r24, 0xF0	; 240
     222:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     226:	d1 2c       	mov	r13, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     228:	10 e4       	ldi	r17, 0x40	; 64
     22a:	0f 2e       	mov	r0, r31
     22c:	f8 ef       	ldi	r31, 0xF8	; 248
     22e:	ff 2e       	mov	r15, r31
     230:	f0 2d       	mov	r31, r0
     232:	f1 0e       	add	r15, r17
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
     23a:	08 2f       	mov	r16, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <ow_rom_search+0x46>
				if( b ) {               // 0b11
     246:	00 23       	and	r16, r16
     248:	c1 f0       	breq	.+48     	; 0x27a <ow_rom_search+0x74>
     24a:	13 c0       	rjmp	.+38     	; 0x272 <ow_rom_search+0x6c>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     24c:	01 11       	cpse	r16, r1
     24e:	21 c0       	rjmp	.+66     	; 0x292 <ow_rom_search+0x8c>
					if( diff > i || ((*id & 1) && diff != i) ) {
     250:	1e 15       	cp	r17, r14
     252:	d0 f0       	brcs	.+52     	; 0x288 <ow_rom_search+0x82>
     254:	98 81       	ld	r25, Y
     256:	90 ff       	sbrs	r25, 0
     258:	10 c0       	rjmp	.+32     	; 0x27a <ow_rom_search+0x74>
     25a:	e1 12       	cpse	r14, r17
     25c:	18 c0       	rjmp	.+48     	; 0x28e <ow_rom_search+0x88>
     25e:	0d c0       	rjmp	.+26     	; 0x27a <ow_rom_search+0x74>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     260:	11 50       	subi	r17, 0x01	; 1
			
		} while( --j );
     262:	1f 11       	cpse	r17, r15
     264:	e7 cf       	rjmp	.-50     	; 0x234 <ow_rom_search+0x2e>
		
		id++;                           // next byte
     266:	21 96       	adiw	r28, 0x01	; 1
	
	} while( i );
     268:	11 11       	cpse	r17, r1
     26a:	df cf       	rjmp	.-66     	; 0x22a <ow_rom_search+0x24>
     26c:	04 c0       	rjmp	.+8      	; 0x276 <ow_rom_search+0x70>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	18 c0       	rjmp	.+48     	; 0x2a2 <ow_rom_search+0x9c>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     272:	8e ef       	ldi	r24, 0xFE	; 254
     274:	16 c0       	rjmp	.+44     	; 0x2a2 <ow_rom_search+0x9c>
     276:	8d 2d       	mov	r24, r13
     278:	14 c0       	rjmp	.+40     	; 0x2a2 <ow_rom_search+0x9c>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     27a:	80 2f       	mov	r24, r16
     27c:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
			*id >>= 1;
     280:	98 81       	ld	r25, Y
     282:	96 95       	lsr	r25
     284:	98 83       	st	Y, r25
     286:	ec cf       	rjmp	.-40     	; 0x260 <ow_rom_search+0x5a>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     288:	d1 2e       	mov	r13, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     28a:	01 e0       	ldi	r16, 0x01	; 1
     28c:	02 c0       	rjmp	.+4      	; 0x292 <ow_rom_search+0x8c>
						next_diff = i;  // next pass 0
     28e:	d1 2e       	mov	r13, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     290:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     292:	80 2f       	mov	r24, r16
     294:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
			*id >>= 1;
     298:	98 81       	ld	r25, Y
     29a:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     29c:	90 68       	ori	r25, 0x80	; 128
     29e:	98 83       	st	Y, r25
     2a0:	df cf       	rjmp	.-66     	; 0x260 <ow_rom_search+0x5a>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	08 95       	ret

000002b2 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ow_command_intern>
     2b8:	08 95       	ret

000002ba <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ow_command_intern>
     2c0:	08 95       	ret

000002c2 <_Z12SetRegistersv>:

#ifdef COMPILE_AVR
void SetRegisters(void)
{
  //configure uart0  (57600, 8bits, no parity, 1 stop bit)
  UBRR0H = 0;
     2c2:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 16;
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     2d2:	88 e1       	ldi	r24, 0x18	; 24
     2d4:	80 93 c1 00 	sts	0x00C1, r24
  
  //timer0 10ms period, interrupt enable
  //prescaler 1024, count to 156
  OCR0A = 156;
     2d8:	8c e9       	ldi	r24, 0x9C	; 156
     2da:	87 bd       	out	0x27, r24	; 39
  OCR0B = 170;
     2dc:	8a ea       	ldi	r24, 0xAA	; 170
     2de:	88 bd       	out	0x28, r24	; 40
  TCCR0A = 2;
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	84 bd       	out	0x24, r24	; 36
  TCCR0B = 5;
     2e4:	95 e0       	ldi	r25, 0x05	; 5
     2e6:	95 bd       	out	0x25, r25	; 37
  TIMSK0 = 2;
     2e8:	80 93 6e 00 	sts	0x006E, r24
     2ec:	08 95       	ret

000002ee <_Z14USART_TransmitPch>:
  //PRR = ( _BV(PRTWI) | _BV(PRTIM1) | _BV(PRTIM2) ) ;
}

//======================================================
void USART_Transmit( char *data, uint8_t len )
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
  for (uint8_t i=0; i < len; i++)
     2f2:	66 23       	and	r22, r22
     2f4:	81 f0       	breq	.+32     	; 0x316 <_Z14USART_TransmitPch+0x28>
     2f6:	28 2f       	mov	r18, r24
     2f8:	a8 2f       	mov	r26, r24
     2fa:	b9 2f       	mov	r27, r25
  {
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
     2fc:	e0 ec       	ldi	r30, 0xC0	; 192
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
     300:	c6 ec       	ldi	r28, 0xC6	; 198
     302:	d0 e0       	ldi	r29, 0x00	; 0
void USART_Transmit( char *data, uint8_t len )
{
  for (uint8_t i=0; i < len; i++)
  {
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
     304:	80 81       	ld	r24, Z
     306:	85 ff       	sbrs	r24, 5
     308:	fd cf       	rjmp	.-6      	; 0x304 <_Z14USART_TransmitPch+0x16>
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
     30a:	8d 91       	ld	r24, X+
     30c:	88 83       	st	Y, r24
     30e:	8a 2f       	mov	r24, r26
     310:	82 1b       	sub	r24, r18
}

//======================================================
void USART_Transmit( char *data, uint8_t len )
{
  for (uint8_t i=0; i < len; i++)
     312:	86 17       	cp	r24, r22
     314:	b8 f3       	brcs	.-18     	; 0x304 <_Z14USART_TransmitPch+0x16>
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
  }
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <__vector_14>:

//======================================================
ISR(TIMER0_COMPA_vect)
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	8f 93       	push	r24
     328:	9f 93       	push	r25
  	longTimer++;
     32a:	80 91 21 02 	lds	r24, 0x0221
     32e:	90 91 22 02 	lds	r25, 0x0222
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	90 93 22 02 	sts	0x0222, r25
     338:	80 93 21 02 	sts	0x0221, r24
		bylTimer = true;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 1f 02 	sts	0x021F, r24
}
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <__vector_default>:

ISR(BADISR_vect) { //just for case
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
  __asm__("nop\n\t");
     35a:	00 00       	nop
}
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <_Z10VynulujCiph>:
#endif

//======================================================
void VynulujCip(uint8_t id)
{
	VYTOCENE_IMPULZY[id] = 0;
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	fc 01       	movw	r30, r24
     36e:	e2 5b       	subi	r30, 0xB2	; 178
     370:	fd 4f       	sbci	r31, 0xFD	; 253
     372:	11 82       	std	Z+1, r1	; 0x01
     374:	10 82       	st	Z, r1
	AKUMULOVANE_IMPULZY[id] = 0;
     376:	fc 01       	movw	r30, r24
     378:	ec 5b       	subi	r30, 0xBC	; 188
     37a:	fd 4f       	sbci	r31, 0xFD	; 253
     37c:	11 82       	std	Z+1, r1	; 0x01
     37e:	10 82       	st	Z, r1
	AKUMULOVANA_CENA[id] = 0;
     380:	fc 01       	movw	r30, r24
     382:	e6 5c       	subi	r30, 0xC6	; 198
     384:	fd 4f       	sbci	r31, 0xFD	; 253
     386:	11 82       	std	Z+1, r1	; 0x01
     388:	10 82       	st	Z, r1
     38a:	08 95       	ret

0000038c <_Z18ResetujVsechnyCipyv>:
}

//======================================================
void ResetujVsechnyCipy(void)
{
     38c:	cf 93       	push	r28
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     38e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		VynulujCip(cip);
     390:	8c 2f       	mov	r24, r28
     392:	0e 94 b3 01 	call	0x366	; 0x366 <_Z10VynulujCiph>
}

//======================================================
void ResetujVsechnyCipy(void)
{
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     396:	cf 5f       	subi	r28, 0xFF	; 255
     398:	c5 30       	cpi	r28, 0x05	; 5
     39a:	d1 f7       	brne	.-12     	; 0x390 <_Z18ResetujVsechnyCipyv+0x4>
	{
		VynulujCip(cip);
	}

	CELKOVE_IMPULZY = 0;
     39c:	10 92 39 02 	sts	0x0239, r1
     3a0:	10 92 38 02 	sts	0x0238, r1
}	
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <_Z8ZmenCenuj>:

//======================================================
void ZmenCenu(uint16_t nova_cena)
{
     3a8:	5f 92       	push	r5
     3aa:	6f 92       	push	r6
     3ac:	7f 92       	push	r7
     3ae:	8f 92       	push	r8
     3b0:	9f 92       	push	r9
     3b2:	af 92       	push	r10
     3b4:	bf 92       	push	r11
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	58 2e       	mov	r5, r24
     3c8:	c0 e0       	ldi	r28, 0x00	; 0
     3ca:	d0 e0       	ldi	r29, 0x00	; 0
	//pak preneseme vytocene impulzy do akumulovanych
	//vynulujeme vytocene impulzy

	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		uint16_t cena = VYTOCENE_IMPULZY[cip] * CENA_ZA_IMPULZ * 100; //je to na halire
     3cc:	7e 01       	movw	r14, r28
     3ce:	ee 0c       	add	r14, r14
     3d0:	ff 1c       	adc	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	02 5b       	subi	r16, 0xB2	; 178
     3d6:	1d 4f       	sbci	r17, 0xFD	; 253
     3d8:	f8 01       	movw	r30, r16
     3da:	60 81       	ld	r22, Z
     3dc:	71 81       	ldd	r23, Z+1	; 0x01
     3de:	80 90 31 02 	lds	r8, 0x0231
     3e2:	90 90 32 02 	lds	r9, 0x0232
     3e6:	a0 90 33 02 	lds	r10, 0x0233
     3ea:	b0 90 34 02 	lds	r11, 0x0234
		AKUMULOVANA_CENA[cip] += cena;
     3ee:	c7 01       	movw	r24, r14
     3f0:	86 5c       	subi	r24, 0xC6	; 198
     3f2:	9d 4f       	sbci	r25, 0xFD	; 253
     3f4:	6c 01       	movw	r12, r24
     3f6:	fc 01       	movw	r30, r24
     3f8:	60 80       	ld	r6, Z
     3fa:	71 80       	ldd	r7, Z+1	; 0x01
	//pak preneseme vytocene impulzy do akumulovanych
	//vynulujeme vytocene impulzy

	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		uint16_t cena = VYTOCENE_IMPULZY[cip] * CENA_ZA_IMPULZ * 100; //je to na halire
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     404:	a5 01       	movw	r20, r10
     406:	94 01       	movw	r18, r8
     408:	0e 94 73 07 	call	0xee6	; 0xee6 <__mulsf3>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	48 ec       	ldi	r20, 0xC8	; 200
     412:	52 e4       	ldi	r21, 0x42	; 66
     414:	0e 94 73 07 	call	0xee6	; 0xee6 <__mulsf3>
     418:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fixunssfsi>
		AKUMULOVANA_CENA[cip] += cena;
     41c:	66 0d       	add	r22, r6
     41e:	77 1d       	adc	r23, r7
     420:	f6 01       	movw	r30, r12
     422:	71 83       	std	Z+1, r23	; 0x01
     424:	60 83       	st	Z, r22
		AKUMULOVANE_IMPULZY[cip] += VYTOCENE_IMPULZY[cip];
     426:	f8 01       	movw	r30, r16
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	f7 01       	movw	r30, r14
     42e:	ec 5b       	subi	r30, 0xBC	; 188
     430:	fd 4f       	sbci	r31, 0xFD	; 253
     432:	20 81       	ld	r18, Z
     434:	31 81       	ldd	r19, Z+1	; 0x01
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
		VYTOCENE_IMPULZY[cip] = 0;
     43e:	f8 01       	movw	r30, r16
     440:	11 82       	std	Z+1, r1	; 0x01
     442:	10 82       	st	Z, r1
     444:	21 96       	adiw	r28, 0x01	; 1
	//prepocitame vytocene impulzy na cenu
	//tu ulozime do akumulovane ceny
	//pak preneseme vytocene impulzy do akumulovanych
	//vynulujeme vytocene impulzy

	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     446:	c5 30       	cpi	r28, 0x05	; 5
     448:	d1 05       	cpc	r29, r1
     44a:	09 f0       	breq	.+2      	; 0x44e <_Z8ZmenCenuj+0xa6>
     44c:	bf cf       	rjmp	.-130    	; 0x3cc <_Z8ZmenCenuj+0x24>
		AKUMULOVANE_IMPULZY[cip] += VYTOCENE_IMPULZY[cip];
		VYTOCENE_IMPULZY[cip] = 0;
	}

	//a ted nastavime novou cenu piva
	CENA_PIVA = nova_cena;
     44e:	50 92 37 02 	sts	0x0237, r5
	//nova cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
     452:	60 91 37 02 	lds	r22, 0x0237
     456:	c0 91 35 02 	lds	r28, 0x0235
     45a:	d0 91 36 02 	lds	r29, 0x0236
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	66 0f       	add	r22, r22
     462:	77 1f       	adc	r23, r23
     464:	88 27       	eor	r24, r24
     466:	77 fd       	sbrc	r23, 7
     468:	80 95       	com	r24
     46a:	98 2f       	mov	r25, r24
     46c:	0e 94 e7 06 	call	0xdce	; 0xdce <__floatsisf>
     470:	6b 01       	movw	r12, r22
     472:	7c 01       	movw	r14, r24
     474:	be 01       	movw	r22, r28
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     47e:	9b 01       	movw	r18, r22
     480:	ac 01       	movw	r20, r24
     482:	c7 01       	movw	r24, r14
     484:	b6 01       	movw	r22, r12
     486:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     48a:	60 93 31 02 	sts	0x0231, r22
     48e:	70 93 32 02 	sts	0x0232, r23
     492:	80 93 33 02 	sts	0x0233, r24
     496:	90 93 34 02 	sts	0x0234, r25
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	7f 90       	pop	r7
     4b4:	6f 90       	pop	r6
     4b6:	5f 90       	pop	r5
     4b8:	08 95       	ret

000004ba <_Z8SaveDatav>:

//======================================================
void SaveData(void)
{
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <_Z8SaveDatav+0xe>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <_Z8SaveDatav+0x10>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
#ifdef COMPILE_AVR
	IntUnion_t volatile *p16;
	Int32Union_t volatile eep_dword;

	//mapovani musi byt stejne jako pro LoadData()
	eeprom_update_byte((uint8_t *)ADRESA_EE_CENA_PIVA, CENA_PIVA);
     4ce:	60 91 37 02 	lds	r22, 0x0237
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__eeupd_byte_m328p>
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB, (*p16).lsb);
     4da:	60 91 35 02 	lds	r22, 0x0235
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__eeupd_byte_m328p>
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB, (*p16).msb);
     4e6:	60 91 36 02 	lds	r22, 0x0236
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__eeupd_byte_m328p>
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f3 e0       	ldi	r31, 0x03	; 3
     4f6:	ef 2e       	mov	r14, r31
     4f8:	f1 2c       	mov	r15, r1
     4fa:	f0 2d       	mov	r31, r0
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f8 01       	movw	r30, r16
     502:	ec 5b       	subi	r30, 0xBC	; 188
     504:	fd 4f       	sbci	r31, 0xFD	; 253
	//cyklujeme pres vsechny cipy
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
		eep_dword.uint1.lsb = (*p16).lsb;
     506:	80 81       	ld	r24, Z
     508:	89 83       	std	Y+1, r24	; 0x01
		eep_dword.uint1.msb = (*p16).msb;
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	8a 83       	std	Y+2, r24	; 0x02
     50e:	f8 01       	movw	r30, r16
     510:	e6 5c       	subi	r30, 0xC6	; 198
     512:	fd 4f       	sbci	r31, 0xFD	; 253

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		eep_dword.uint2.lsb = (*p16).lsb;
     514:	80 81       	ld	r24, Z
     516:	8b 83       	std	Y+3, r24	; 0x03
		eep_dword.uint2.msb = (*p16).msb;
     518:	81 81       	ldd	r24, Z+1	; 0x01
     51a:	8c 83       	std	Y+4, r24	; 0x04

		eeprom_update_dword((uint32_t*)adresa, eep_dword.uint_long);
     51c:	49 81       	ldd	r20, Y+1	; 0x01
     51e:	5a 81       	ldd	r21, Y+2	; 0x02
     520:	6b 81       	ldd	r22, Y+3	; 0x03
     522:	7c 81       	ldd	r23, Y+4	; 0x04
     524:	c7 01       	movw	r24, r14
     526:	0e 94 09 0a 	call	0x1412	; 0x1412 <__eeupd_dword_m328p>
     52a:	0e 5f       	subi	r16, 0xFE	; 254
     52c:	1f 4f       	sbci	r17, 0xFF	; 255
     52e:	84 e0       	ldi	r24, 0x04	; 4
     530:	e8 0e       	add	r14, r24
     532:	f1 1c       	adc	r15, r1
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB, (*p16).lsb);
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB, (*p16).msb);

	//cyklujeme pres vsechny cipy
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     534:	0a 30       	cpi	r16, 0x0A	; 10
     536:	11 05       	cpc	r17, r1
     538:	19 f7       	brne	.-58     	; 0x500 <_Z8SaveDatav+0x46>
		eeprom_update_dword((uint32_t*)adresa, eep_dword.uint_long);

		adresa += 4; //posun se na dalsi pametove misto
	}
#endif
}
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	08 95       	ret

00000550 <_Z8LoadDatav>:

//======================================================
void LoadData(void)
{
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	00 d0       	rcall	.+0      	; 0x566 <_Z8LoadDatav+0x16>
     566:	00 d0       	rcall	.+0      	; 0x568 <_Z8LoadDatav+0x18>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
#ifdef COMPILE_AVR
	IntUnion_t volatile *p16;
	Int32Union_t volatile eep_dword;

	CELKOVE_IMPULZY = 0;
     56c:	10 92 39 02 	sts	0x0239, r1
     570:	10 92 38 02 	sts	0x0238, r1
	//7,8 - impulzy zakaznika 1
	//atd...
	//u vsech 16bit dat je prvni LSB

	//nactem cenu a impulzy na litr
	CENA_PIVA = eeprom_read_byte((uint8_t *)ADRESA_EE_CENA_PIVA);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__eerd_byte_m328p>
     57c:	80 93 37 02 	sts	0x0237, r24
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	(*p16).lsb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__eerd_byte_m328p>
     588:	05 e3       	ldi	r16, 0x35	; 53
     58a:	12 e0       	ldi	r17, 0x02	; 2
     58c:	f8 01       	movw	r30, r16
     58e:	80 83       	st	Z, r24
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__eerd_byte_m328p>
     598:	80 93 36 02 	sts	0x0236, r24
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky
     59c:	f8 01       	movw	r30, r16
     59e:	80 81       	ld	r24, Z
     5a0:	8f 3f       	cpi	r24, 0xFF	; 255
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <_Z8LoadDatav+0x56>
     5a4:	77 c0       	rjmp	.+238    	; 0x694 <_Z8LoadDatav+0x144>
     5a6:	80 91 36 02 	lds	r24, 0x0236
     5aa:	8f 3f       	cpi	r24, 0xFF	; 255
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <_Z8LoadDatav+0x60>
     5ae:	72 c0       	rjmp	.+228    	; 0x694 <_Z8LoadDatav+0x144>
     5b0:	6b c0       	rjmp	.+214    	; 0x688 <_Z8LoadDatav+0x138>

	//cykluj pres vsechny cipy a nacti jejich ulozena data
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		eep_dword.uint_long = eeprom_read_dword((uint32_t*)adresa);
     5b2:	c5 01       	movw	r24, r10
     5b4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__eerd_dword_m328p>
     5b8:	69 83       	std	Y+1, r22	; 0x01
     5ba:	7a 83       	std	Y+2, r23	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	9c 83       	std	Y+4, r25	; 0x04
		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
     5c0:	c6 01       	movw	r24, r12
		(*p16).lsb = eep_dword.uint1.lsb;
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	f7 01       	movw	r30, r14
     5c6:	20 83       	st	Z, r18
		(*p16).msb = eep_dword.uint1.msb;
     5c8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ca:	21 83       	std	Z+1, r18	; 0x01
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANE_IMPULZY[cip] = 0;
     5cc:	20 81       	ld	r18, Z
     5ce:	2f 3f       	cpi	r18, 0xFF	; 255
     5d0:	21 f4       	brne	.+8      	; 0x5da <_Z8LoadDatav+0x8a>
     5d2:	21 81       	ldd	r18, Z+1	; 0x01
     5d4:	2f 3f       	cpi	r18, 0xFF	; 255
     5d6:	09 f4       	brne	.+2      	; 0x5da <_Z8LoadDatav+0x8a>
     5d8:	6d c0       	rjmp	.+218    	; 0x6b4 <_Z8LoadDatav+0x164>

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		(*p16).lsb = eep_dword.uint2.lsb;
     5da:	2b 81       	ldd	r18, Y+3	; 0x03
     5dc:	f8 01       	movw	r30, r16
     5de:	20 83       	st	Z, r18
		(*p16).msb = eep_dword.uint2.msb;
     5e0:	2c 81       	ldd	r18, Y+4	; 0x04
     5e2:	21 83       	std	Z+1, r18	; 0x01
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANA_CENA[cip] = 0;
     5e4:	20 81       	ld	r18, Z
     5e6:	2f 3f       	cpi	r18, 0xFF	; 255
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <_Z8LoadDatav+0xa2>
     5ea:	21 81       	ldd	r18, Z+1	; 0x01
     5ec:	2f 3f       	cpi	r18, 0xFF	; 255
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <_Z8LoadDatav+0xa2>
     5f0:	69 c0       	rjmp	.+210    	; 0x6c4 <_Z8LoadDatav+0x174>

		adresa += 4; //posun se na dalsi pametove misto
		
		VYTOCENE_IMPULZY[cip] = 0;
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	fc 01       	movw	r30, r24
     5f8:	e2 5b       	subi	r30, 0xB2	; 178
     5fa:	fd 4f       	sbci	r31, 0xFD	; 253
     5fc:	11 82       	std	Z+1, r1	; 0x01
     5fe:	10 82       	st	Z, r1
		CELKOVE_IMPULZY += AKUMULOVANE_IMPULZY[cip];
     600:	fc 01       	movw	r30, r24
     602:	ec 5b       	subi	r30, 0xBC	; 188
     604:	fd 4f       	sbci	r31, 0xFD	; 253
     606:	20 81       	ld	r18, Z
     608:	31 81       	ldd	r19, Z+1	; 0x01
     60a:	80 91 38 02 	lds	r24, 0x0238
     60e:	90 91 39 02 	lds	r25, 0x0239
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	90 93 39 02 	sts	0x0239, r25
     61a:	80 93 38 02 	sts	0x0238, r24
     61e:	ff ef       	ldi	r31, 0xFF	; 255
     620:	cf 1a       	sub	r12, r31
     622:	df 0a       	sbc	r13, r31
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	a8 0e       	add	r10, r24
     628:	b1 1c       	adc	r11, r1
     62a:	e2 e0       	ldi	r30, 0x02	; 2
     62c:	ee 0e       	add	r14, r30
     62e:	f1 1c       	adc	r15, r1
     630:	0e 5f       	subi	r16, 0xFE	; 254
     632:	1f 4f       	sbci	r17, 0xFF	; 255
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky

	//cykluj pres vsechny cipy a nacti jejich ulozena data
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     634:	f5 e0       	ldi	r31, 0x05	; 5
     636:	cf 16       	cp	r12, r31
     638:	d1 04       	cpc	r13, r1
     63a:	09 f0       	breq	.+2      	; 0x63e <_Z8LoadDatav+0xee>
     63c:	ba cf       	rjmp	.-140    	; 0x5b2 <_Z8LoadDatav+0x62>
	(*p16).uint = 300;
	CENA_PIVA = 20;
#endif

	//cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
     63e:	60 91 37 02 	lds	r22, 0x0237
     642:	00 91 35 02 	lds	r16, 0x0235
     646:	10 91 36 02 	lds	r17, 0x0236
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	66 0f       	add	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	88 27       	eor	r24, r24
     652:	77 fd       	sbrc	r23, 7
     654:	80 95       	com	r24
     656:	98 2f       	mov	r25, r24
     658:	0e 94 e7 06 	call	0xdce	; 0xdce <__floatsisf>
     65c:	6b 01       	movw	r12, r22
     65e:	7c 01       	movw	r14, r24
     660:	b8 01       	movw	r22, r16
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     66a:	9b 01       	movw	r18, r22
     66c:	ac 01       	movw	r20, r24
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     676:	60 93 31 02 	sts	0x0231, r22
     67a:	70 93 32 02 	sts	0x0232, r23
     67e:	80 93 33 02 	sts	0x0233, r24
     682:	90 93 34 02 	sts	0x0234, r25
     686:	26 c0       	rjmp	.+76     	; 0x6d4 <_Z8LoadDatav+0x184>
	//nactem cenu a impulzy na litr
	CENA_PIVA = eeprom_read_byte((uint8_t *)ADRESA_EE_CENA_PIVA);
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	(*p16).lsb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB);
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky
     688:	8c e2       	ldi	r24, 0x2C	; 44
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	90 93 36 02 	sts	0x0236, r25
     690:	80 93 35 02 	sts	0x0235, r24
     694:	0f 2e       	mov	r0, r31
     696:	f4 e4       	ldi	r31, 0x44	; 68
     698:	ef 2e       	mov	r14, r31
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	ff 2e       	mov	r15, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	0a e3       	ldi	r16, 0x3A	; 58
     6a2:	12 e0       	ldi	r17, 0x02	; 2
#endif
}

//======================================================
void LoadData(void)
{
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f3 e0       	ldi	r31, 0x03	; 3
     6a8:	af 2e       	mov	r10, r31
     6aa:	b1 2c       	mov	r11, r1
     6ac:	f0 2d       	mov	r31, r0
     6ae:	c1 2c       	mov	r12, r1
     6b0:	d1 2c       	mov	r13, r1
     6b2:	7f cf       	rjmp	.-258    	; 0x5b2 <_Z8LoadDatav+0x62>
	{
		eep_dword.uint_long = eeprom_read_dword((uint32_t*)adresa);
		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
		(*p16).lsb = eep_dword.uint1.lsb;
		(*p16).msb = eep_dword.uint1.msb;
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANE_IMPULZY[cip] = 0;
     6b4:	f6 01       	movw	r30, r12
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ec 5b       	subi	r30, 0xBC	; 188
     6bc:	fd 4f       	sbci	r31, 0xFD	; 253
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	10 82       	st	Z, r1
     6c2:	8b cf       	rjmp	.-234    	; 0x5da <_Z8LoadDatav+0x8a>

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		(*p16).lsb = eep_dword.uint2.lsb;
		(*p16).msb = eep_dword.uint2.msb;
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANA_CENA[cip] = 0;
     6c4:	fc 01       	movw	r30, r24
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	e6 5c       	subi	r30, 0xC6	; 198
     6cc:	fd 4f       	sbci	r31, 0xFD	; 253
     6ce:	11 82       	std	Z+1, r1	; 0x01
     6d0:	10 82       	st	Z, r1
     6d2:	8f cf       	rjmp	.-226    	; 0x5f2 <_Z8LoadDatav+0xa2>
	CENA_PIVA = 20;
#endif

	//cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	bf 90       	pop	r11
     6ee:	af 90       	pop	r10
     6f0:	08 95       	ret

000006f2 <_Z15KontrolniSoucetPKh>:

//======================================================
uint8_t KontrolniSoucet(const uint8_t adresa[ADDR_LEN])
{
     6f2:	fc 01       	movw	r30, r24
     6f4:	98 e0       	ldi	r25, 0x08	; 8
	//cykluj pres vsecky znaky adresy cipu
	uint8_t kontrolni_soucet = 0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=0; i < 8; i++)
	{
		kontrolni_soucet += adresa[i];
     6f8:	21 91       	ld	r18, Z+
     6fa:	82 0f       	add	r24, r18
     6fc:	91 50       	subi	r25, 0x01	; 1
//======================================================
uint8_t KontrolniSoucet(const uint8_t adresa[ADDR_LEN])
{
	//cykluj pres vsecky znaky adresy cipu
	uint8_t kontrolni_soucet = 0;
	for(uint8_t i=0; i < 8; i++)
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <_Z15KontrolniSoucetPKh+0x6>
	{
		kontrolni_soucet += adresa[i];
	}
	
	return kontrolni_soucet;
}
     700:	08 95       	ret

00000702 <_Z8NajdiCipPKh>:
	}
}

//======================================================
uint8_t NajdiCip(const uint8_t adresa[ADDR_LEN])
{
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	8c 01       	movw	r16, r24
	uint8_t kontrolni_soucet = KontrolniSoucet(adresa);
     710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z15KontrolniSoucetPKh>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d1 e0       	ldi	r29, 0x01	; 1
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a8 01       	movw	r20, r16
     71e:	4f 5f       	subi	r20, 0xFF	; 255
     720:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
			{
				if (adresa[i] != ADRESY_CIPU[cip][i])
     722:	0f 2e       	mov	r0, r31
     724:	f7 e0       	ldi	r31, 0x07	; 7
     726:	ef 2e       	mov	r14, r31
     728:	f0 2d       	mov	r31, r0
     72a:	f2 2e       	mov	r15, r18
	bool match;

	//cykluj pres vsechny kontrolni soucty a hledej match, potom porovnej adresu
	for (cip=0; cip < POCET_CIPU; cip++)
	{
		if (KONTROLNI_SOUCTY[cip] == kontrolni_soucet)
     72c:	f9 01       	movw	r30, r18
     72e:	e8 5a       	subi	r30, 0xA8	; 168
     730:	fd 4f       	sbci	r31, 0xFD	; 253
     732:	90 81       	ld	r25, Z
     734:	89 13       	cpse	r24, r25
     736:	10 c0       	rjmp	.+32     	; 0x758 <_Z8NajdiCipPKh+0x56>
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
			{
				if (adresa[i] != ADRESY_CIPU[cip][i])
     738:	f8 01       	movw	r30, r16
     73a:	60 81       	ld	r22, Z
     73c:	98 81       	ld	r25, Y
     73e:	69 13       	cpse	r22, r25
     740:	0b c0       	rjmp	.+22     	; 0x758 <_Z8NajdiCipPKh+0x56>
     742:	da 01       	movw	r26, r20
     744:	fe 01       	movw	r30, r28
     746:	31 96       	adiw	r30, 0x01	; 1
     748:	9e 2d       	mov	r25, r14
     74a:	7d 91       	ld	r23, X+
     74c:	61 91       	ld	r22, Z+
     74e:	76 13       	cpse	r23, r22
     750:	03 c0       	rjmp	.+6      	; 0x758 <_Z8NajdiCipPKh+0x56>
     752:	91 50       	subi	r25, 0x01	; 1
	{
		if (KONTROLNI_SOUCTY[cip] == kontrolni_soucet)
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
     754:	d1 f7       	brne	.-12     	; 0x74a <_Z8NajdiCipPKh+0x48>
     756:	07 c0       	rjmp	.+14     	; 0x766 <_Z8NajdiCipPKh+0x64>
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	28 96       	adiw	r28, 0x08	; 8
	uint8_t kontrolni_soucet = KontrolniSoucet(adresa);
	uint8_t cip;
	bool match;

	//cykluj pres vsechny kontrolni soucty a hledej match, potom porovnej adresu
	for (cip=0; cip < POCET_CIPU; cip++)
     75e:	25 30       	cpi	r18, 0x05	; 5
     760:	31 05       	cpc	r19, r1
     762:	19 f7       	brne	.-58     	; 0x72a <_Z8NajdiCipPKh+0x28>
     764:	02 c0       	rjmp	.+4      	; 0x76a <_Z8NajdiCipPKh+0x68>
     766:	8f 2d       	mov	r24, r15
     768:	01 c0       	rjmp	.+2      	; 0x76c <_Z8NajdiCipPKh+0x6a>
		}
	}

	//sem se to dostane jen kdyz se projde cele pole a nic se nenajde,
	//takze vratime 255
	return(255);
     76a:	8f ef       	ldi	r24, 0xFF	; 255
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	08 95       	ret

0000077a <_Z19ZobrazInfoCipSpravah>:

//======================================================
void ZobrazInfoCipSprava(uint8_t id)
{
     77a:	8f 92       	push	r8
     77c:	9f 92       	push	r9
     77e:	af 92       	push	r10
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
	float litru = float(AKUMULOVANE_IMPULZY[id] + VYTOCENE_IMPULZY[id]) / IMPULZY_NA_LITR;
     792:	c8 2f       	mov	r28, r24
     794:	d0 e0       	ldi	r29, 0x00	; 0
     796:	8e 01       	movw	r16, r28
     798:	00 0f       	add	r16, r16
     79a:	11 1f       	adc	r17, r17
     79c:	f8 01       	movw	r30, r16
     79e:	ec 5b       	subi	r30, 0xBC	; 188
     7a0:	fd 4f       	sbci	r31, 0xFD	; 253
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	98 01       	movw	r18, r16
     7a8:	22 5b       	subi	r18, 0xB2	; 178
     7aa:	3d 4f       	sbci	r19, 0xFD	; 253
     7ac:	79 01       	movw	r14, r18
     7ae:	f9 01       	movw	r30, r18
     7b0:	60 81       	ld	r22, Z
     7b2:	71 81       	ldd	r23, Z+1	; 0x01
     7b4:	c0 90 35 02 	lds	r12, 0x0235
     7b8:	d0 90 36 02 	lds	r13, 0x0236
     7bc:	68 0f       	add	r22, r24
     7be:	79 1f       	adc	r23, r25
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     7c8:	4b 01       	movw	r8, r22
     7ca:	5c 01       	movw	r10, r24
     7cc:	b6 01       	movw	r22, r12
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	c5 01       	movw	r24, r10
     7dc:	b4 01       	movw	r22, r8
     7de:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     7e2:	b6 2e       	mov	r11, r22
     7e4:	a7 2e       	mov	r10, r23
     7e6:	98 2e       	mov	r9, r24
     7e8:	89 2e       	mov	r8, r25
	uint16_t cena = (VYTOCENE_IMPULZY[id] * CENA_ZA_IMPULZ * 100) + AKUMULOVANA_CENA[id]; //je to na halire
     7ea:	f7 01       	movw	r30, r14
     7ec:	60 81       	ld	r22, Z
     7ee:	71 81       	ldd	r23, Z+1	; 0x01
     7f0:	c0 90 31 02 	lds	r12, 0x0231
     7f4:	d0 90 32 02 	lds	r13, 0x0232
     7f8:	e0 90 33 02 	lds	r14, 0x0233
     7fc:	f0 90 34 02 	lds	r15, 0x0234
     800:	f8 01       	movw	r30, r16
     802:	e6 5c       	subi	r30, 0xC6	; 198
     804:	fd 4f       	sbci	r31, 0xFD	; 253
     806:	00 81       	ld	r16, Z
     808:	11 81       	ldd	r17, Z+1	; 0x01
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     812:	a7 01       	movw	r20, r14
     814:	96 01       	movw	r18, r12
     816:	0e 94 73 07 	call	0xee6	; 0xee6 <__mulsf3>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 ec       	ldi	r20, 0xC8	; 200
     820:	52 e4       	ldi	r21, 0x42	; 66
     822:	0e 94 73 07 	call	0xee6	; 0xee6 <__mulsf3>
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
     82a:	b8 01       	movw	r22, r16
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     840:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fixunssfsi>
     844:	6b 01       	movw	r12, r22
     846:	7c 01       	movw	r14, r24

	//cena total je v korunach a zaokrouhluje se nahoru
	uint16_t cena_total = (cena / 100);
     848:	9b 01       	movw	r18, r22
     84a:	36 95       	lsr	r19
     84c:	27 95       	ror	r18
     84e:	36 95       	lsr	r19
     850:	27 95       	ror	r18
     852:	ab e7       	ldi	r26, 0x7B	; 123
     854:	b4 e1       	ldi	r27, 0x14	; 20
     856:	0e 94 dd 05 	call	0xbba	; 0xbba <__umulhisi3>
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
	if ((cena % 100) > 0) cena_total++;
     85e:	44 e6       	ldi	r20, 0x64	; 100
     860:	48 9f       	mul	r20, r24
     862:	90 01       	movw	r18, r0
     864:	49 9f       	mul	r20, r25
     866:	30 0d       	add	r19, r0
     868:	11 24       	eor	r1, r1
     86a:	c2 16       	cp	r12, r18
     86c:	d3 06       	cpc	r13, r19
     86e:	09 f0       	breq	.+2      	; 0x872 <_Z19ZobrazInfoCipSpravah+0xf8>
     870:	01 96       	adiw	r24, 0x01	; 1

	printf(SCREEN_SPRAVA_ZAKAZNIK, id+1, litru, cena_total);
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	8f 92       	push	r8
     878:	9f 92       	push	r9
     87a:	af 92       	push	r10
     87c:	bf 92       	push	r11
     87e:	21 96       	adiw	r28, 0x01	; 1
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	0e 94 d6 07 	call	0xfac	; 0xfac <printf>
     890:	8d b7       	in	r24, 0x3d	; 61
     892:	9e b7       	in	r25, 0x3e	; 62
     894:	0a 96       	adiw	r24, 0x0a	; 10
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	9e bf       	out	0x3e, r25	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	8d bf       	out	0x3d, r24	; 61
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	08 95       	ret

000008ba <_Z18ZobrazInfoCipVytochb>:

//======================================================
void ZobrazInfoCipVytoc(uint8_t id, bool both)
{
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	a6 2e       	mov	r10, r22
	float litru = float(AKUMULOVANE_IMPULZY[id] + VYTOCENE_IMPULZY[id]) / IMPULZY_NA_LITR;
     8d6:	c8 2f       	mov	r28, r24
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
     8da:	be 01       	movw	r22, r28
     8dc:	66 0f       	add	r22, r22
     8de:	77 1f       	adc	r23, r23
     8e0:	fb 01       	movw	r30, r22
     8e2:	ec 5b       	subi	r30, 0xBC	; 188
     8e4:	fd 4f       	sbci	r31, 0xFD	; 253
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	fb 01       	movw	r30, r22
     8ec:	e2 5b       	subi	r30, 0xB2	; 178
     8ee:	fd 4f       	sbci	r31, 0xFD	; 253
     8f0:	60 81       	ld	r22, Z
     8f2:	71 81       	ldd	r23, Z+1	; 0x01
     8f4:	00 91 35 02 	lds	r16, 0x0235
     8f8:	10 91 36 02 	lds	r17, 0x0236
     8fc:	68 0f       	add	r22, r24
     8fe:	79 1f       	adc	r23, r25
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	b8 01       	movw	r22, r16
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	c7 01       	movw	r24, r14
     91c:	b6 01       	movw	r22, r12
     91e:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     922:	b6 2e       	mov	r11, r22
     924:	97 2e       	mov	r9, r23
     926:	88 2e       	mov	r8, r24
     928:	79 2e       	mov	r7, r25
	float nyni = float(prihlaseny_cip_impulzy) / IMPULZY_NA_LITR;
     92a:	60 91 25 02 	lds	r22, 0x0225
     92e:	70 91 26 02 	lds	r23, 0x0226
     932:	00 91 35 02 	lds	r16, 0x0235
     936:	10 91 36 02 	lds	r17, 0x0236
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
     946:	b8 01       	movw	r22, r16
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     95c:	16 2f       	mov	r17, r22
     95e:	07 2f       	mov	r16, r23
     960:	f8 2e       	mov	r15, r24
     962:	e9 2e       	mov	r14, r25

	if (both == true)
     964:	aa 20       	and	r10, r10
     966:	69 f0       	breq	.+26     	; 0x982 <__stack+0x83>
	{
		printf(SCREEN_VYCEP_ZAKAZNIK_L1, id+1);
     968:	21 96       	adiw	r28, 0x01	; 1
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	28 e6       	ldi	r18, 0x68	; 104
     970:	31 e0       	ldi	r19, 0x01	; 1
     972:	3f 93       	push	r19
     974:	2f 93       	push	r18
     976:	0e 94 d6 07 	call	0xfac	; 0xfac <printf>
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
	}

	printf(SCREEN_VYCEP_ZAKAZNIK_L2, litru, nyni);
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	bf 92       	push	r11
     992:	82 e5       	ldi	r24, 0x52	; 82
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	0e 94 d6 07 	call	0xfac	; 0xfac <printf>
     99e:	8d b7       	in	r24, 0x3d	; 61
     9a0:	9e b7       	in	r25, 0x3e	; 62
     9a2:	0a 96       	adiw	r24, 0x0a	; 10
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	9e bf       	out	0x3e, r25	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	8d bf       	out	0x3d, r24	; 61
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	08 95       	ret

000009ca <_Z9OdhlasCipv>:

//======================================================
void OdhlasCip(void)
{
	je_prihlaseno = false;
     9ca:	10 92 30 02 	sts	0x0230, r1
	prihlaseny_cip_id = 255;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	80 93 2f 02 	sts	0x022F, r24
	prihlaseny_cip_timeout = 0;
     9d4:	10 92 24 02 	sts	0x0224, r1
     9d8:	10 92 23 02 	sts	0x0223, r1
	prihlaseny_cip_impulzy = 0;
     9dc:	10 92 26 02 	sts	0x0226, r1
     9e0:	10 92 25 02 	sts	0x0225, r1
	sprintf((char *)displej_text, SCREEN_ZAKLADNI);
     9e4:	81 e2       	ldi	r24, 0x21	; 33
     9e6:	ed e7       	ldi	r30, 0x7D	; 125
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	a1 ef       	ldi	r26, 0xF1	; 241
     9ec:	b1 e0       	ldi	r27, 0x01	; 1
     9ee:	01 90       	ld	r0, Z+
     9f0:	0d 92       	st	X+, r0
     9f2:	8a 95       	dec	r24
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <_Z9OdhlasCipv+0x24>
	refresh_display = true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 1c 02 	sts	0x021C, r24
#ifdef COMPILE_AVR
	SOLENOID_OFF();
     9fc:	5d 98       	cbi	0x0b, 5	; 11
     9fe:	08 95       	ret

00000a00 <_Z9PrectiCipv>:
//pak zkusi cip najit a pripadne prihlasit
void PrectiCip(void)
{
#ifdef COMPILE_AVR

	if (ow_rom_search(OW_SEARCH_FIRST, (uint8_t *)prihlaseny_cip_adresa) == OW_LAST_DEVICE)
     a00:	67 e2       	ldi	r22, 0x27	; 39
     a02:	72 e0       	ldi	r23, 0x02	; 2
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	0e 94 03 01 	call	0x206	; 0x206 <ow_rom_search>
     a0a:	81 11       	cpse	r24, r1
     a0c:	35 c0       	rjmp	.+106    	; 0xa78 <_Z9PrectiCipv+0x78>
	{
		//cip byl detekovan na 1-wire a jeho data nactena, zkusime ho najit v databazi
		uint8_t nalezeny_cip = NajdiCip((uint8_t *)prihlaseny_cip_adresa);
     a0e:	87 e2       	ldi	r24, 0x27	; 39
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 81 03 	call	0x702	; 0x702 <_Z8NajdiCipPKh>
		if (nalezeny_cip < 255)
     a16:	8f 3f       	cpi	r24, 0xFF	; 255
     a18:	49 f0       	breq	.+18     	; 0xa2c <_Z9PrectiCipv+0x2c>
		{
			//cip mame v databazi, takze ho prihlasime (a pripadne odhlasime predchozi, nebo odhlasime i ten stejny)
			if ((je_prihlaseno == true) && (prihlaseny_cip_id == nalezeny_cip))
     a1a:	90 91 30 02 	lds	r25, 0x0230
     a1e:	99 23       	and	r25, r25
     a20:	a9 f0       	breq	.+42     	; 0xa4c <_Z9PrectiCipv+0x4c>
     a22:	90 91 2f 02 	lds	r25, 0x022F
     a26:	98 13       	cpse	r25, r24
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <_Z9PrectiCipv+0x4c>
     a2a:	0d c0       	rjmp	.+26     	; 0xa46 <_Z9PrectiCipv+0x46>
			}
		}
		// Tento cip nemame v databazi, takze vypiseme hlasku
		else
		{
			sprintf((char *)displej_text, SCREEN_CIP_NEZNAMY);
     a2c:	83 e1       	ldi	r24, 0x13	; 19
     a2e:	ee e9       	ldi	r30, 0x9E	; 158
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	a1 ef       	ldi	r26, 0xF1	; 241
     a34:	b1 e0       	ldi	r27, 0x01	; 1
     a36:	01 90       	ld	r0, Z+
     a38:	0d 92       	st	X+, r0
     a3a:	8a 95       	dec	r24
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <_Z9PrectiCipv+0x36>
		}
		
		refresh_display = true;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 1c 02 	sts	0x021C, r24
     a44:	08 95       	ret
			//cip mame v databazi, takze ho prihlasime (a pripadne odhlasime predchozi, nebo odhlasime i ten stejny)
			if ((je_prihlaseno == true) && (prihlaseny_cip_id == nalezeny_cip))
			{
				//cip je stejny - takze ho jen odhlasime
				//TODO - mozna bude lepci misto odhlasovani prodlouzitrefreshovat timeout
				OdhlasCip();
     a46:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z9OdhlasCipv>
     a4a:	f9 cf       	rjmp	.-14     	; 0xa3e <_Z9PrectiCipv+0x3e>
			}
			else
			{
				//prihlasime novy (to odhlasi i stary)
				je_prihlaseno = true;
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	90 93 30 02 	sts	0x0230, r25
				prihlaseny_cip_id = nalezeny_cip;
     a52:	80 93 2f 02 	sts	0x022F, r24
				prihlaseny_cip_timeout = PRIHLASENI_TIMEOUT;
     a56:	88 eb       	ldi	r24, 0xB8	; 184
     a58:	9b e0       	ldi	r25, 0x0B	; 11
     a5a:	90 93 24 02 	sts	0x0224, r25
     a5e:	80 93 23 02 	sts	0x0223, r24
				prihlaseny_cip_impulzy = 0;
     a62:	10 92 26 02 	sts	0x0226, r1
     a66:	10 92 25 02 	sts	0x0225, r1
				SOLENOID_ON();
     a6a:	5d 9a       	sbi	0x0b, 5	; 11
				ZobrazInfoCipVytoc(prihlaseny_cip_id, true);
     a6c:	80 91 2f 02 	lds	r24, 0x022F
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z18ZobrazInfoCipVytochb>
     a76:	e3 cf       	rjmp	.-58     	; 0xa3e <_Z9PrectiCipv+0x3e>
     a78:	08 95       	ret

00000a7a <main>:
//======================================================
//======================================================
//======================================================
int main (void)
{
	sprintf((char *)displej_text, SCREEN_INICIALIZACE);
     a7a:	82 e1       	ldi	r24, 0x12	; 18
     a7c:	ee ed       	ldi	r30, 0xDE	; 222
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	a1 ef       	ldi	r26, 0xF1	; 241
     a82:	b1 e0       	ldi	r27, 0x01	; 1
     a84:	01 90       	ld	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	8a 95       	dec	r24
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <main+0xa>

	LoadData();
     a8c:	0e 94 a8 02 	call	0x550	; 0x550 <_Z8LoadDatav>
     a90:	00 e0       	ldi	r16, 0x00	; 0
     a92:	11 e0       	ldi	r17, 0x01	; 1
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d0 e0       	ldi	r29, 0x00	; 0
inline void SpocitatKontrolniSoucty(void)
{
	//cykluj pres vsechny cipy
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		KONTROLNI_SOUCTY[cip] = KontrolniSoucet(ADRESY_CIPU[cip]);
     a98:	c8 01       	movw	r24, r16
     a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z15KontrolniSoucetPKh>
     a9e:	fe 01       	movw	r30, r28
     aa0:	e8 5a       	subi	r30, 0xA8	; 168
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	80 83       	st	Z, r24
     aa6:	21 96       	adiw	r28, 0x01	; 1
     aa8:	08 5f       	subi	r16, 0xF8	; 248
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255

//======================================================
inline void SpocitatKontrolniSoucty(void)
{
	//cykluj pres vsechny cipy
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     aac:	c5 30       	cpi	r28, 0x05	; 5
     aae:	d1 05       	cpc	r29, r1
     ab0:	99 f7       	brne	.-26     	; 0xa98 <main+0x1e>

	LoadData();
	SpocitatKontrolniSoucty();

#ifdef COMPILE_AVR
	SetRegisters();
     ab2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z12SetRegistersv>
	sei();
     ab6:	78 94       	sei
#endif

	//debug data
	uint8_t zak = 0;
	AKUMULOVANE_IMPULZY[zak] = 0;
     ab8:	10 92 45 02 	sts	0x0245, r1
     abc:	10 92 44 02 	sts	0x0244, r1
	AKUMULOVANA_CENA[zak] = 0;
     ac0:	10 92 3b 02 	sts	0x023B, r1
     ac4:	10 92 3a 02 	sts	0x023A, r1
	VYTOCENE_IMPULZY[zak] = 388;
     ac8:	ce e4       	ldi	r28, 0x4E	; 78
     aca:	d2 e0       	ldi	r29, 0x02	; 2
     acc:	84 e8       	ldi	r24, 0x84	; 132
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	99 83       	std	Y+1, r25	; 0x01
     ad2:	88 83       	st	Y, r24
	prihlaseny_cip_impulzy = 132;
     ad4:	84 e8       	ldi	r24, 0x84	; 132
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 26 02 	sts	0x0226, r25
     adc:	80 93 25 02 	sts	0x0225, r24

	printf("\n|--------|---------|\n");
     ae0:	81 eb       	ldi	r24, 0xB1	; 177
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>
	ZobrazInfoCipVytoc(zak, true);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z18ZobrazInfoCipVytochb>
	printf("\n|--------|---------|\n");
     af0:	81 eb       	ldi	r24, 0xB1	; 177
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>
	ZobrazInfoCipSprava(zak);
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z19ZobrazInfoCipSpravah>
	printf("\n|--------|---------|\n\n");
     afe:	87 ec       	ldi	r24, 0xC7	; 199
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>

	ZmenCenu(40);
     b06:	88 e2       	ldi	r24, 0x28	; 40
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z8ZmenCenuj>

	VYTOCENE_IMPULZY[zak] = 300;
     b0e:	8c e2       	ldi	r24, 0x2C	; 44
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	99 83       	std	Y+1, r25	; 0x01
     b14:	88 83       	st	Y, r24
	prihlaseny_cip_impulzy = 150;
     b16:	86 e9       	ldi	r24, 0x96	; 150
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 26 02 	sts	0x0226, r25
     b1e:	80 93 25 02 	sts	0x0225, r24

	printf("\n|--------|---------|\n");
     b22:	81 eb       	ldi	r24, 0xB1	; 177
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>
	ZobrazInfoCipVytoc(zak, true);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z18ZobrazInfoCipVytochb>
	printf("\n|--------|---------|\n");
     b32:	81 eb       	ldi	r24, 0xB1	; 177
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>
	ZobrazInfoCipSprava(zak);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z19ZobrazInfoCipSpravah>
	printf("\n|--------|---------|\n\n");
     b40:	87 ec       	ldi	r24, 0xC7	; 199
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <puts>
			refresh_display = false;
		}

		if (timerCteniCipu == 0)
		{
			timerCteniCipu = CTENI_CIPU_TIMEOUT;
     b48:	c2 e3       	ldi	r28, 0x32	; 50

#ifdef COMPILE_AVR
	while(1) {

		//obsluha vsech timeru az tady misto aby se to delalo v preruseni
		if (bylTimer)
     b4a:	80 91 1f 02 	lds	r24, 0x021F
     b4e:	88 23       	and	r24, r24
     b50:	d1 f0       	breq	.+52     	; 0xb86 <main+0x10c>
		{
			bylTimer = false;
     b52:	10 92 1f 02 	sts	0x021F, r1
			if (prihlaseny_cip_timeout > 0) prihlaseny_cip_timeout--;
     b56:	80 91 23 02 	lds	r24, 0x0223
     b5a:	90 91 24 02 	lds	r25, 0x0224
     b5e:	89 2b       	or	r24, r25
     b60:	49 f0       	breq	.+18     	; 0xb74 <main+0xfa>
     b62:	80 91 23 02 	lds	r24, 0x0223
     b66:	90 91 24 02 	lds	r25, 0x0224
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	90 93 24 02 	sts	0x0224, r25
     b70:	80 93 23 02 	sts	0x0223, r24
			if (timerCteniCipu > 0) timerCteniCipu--;
     b74:	80 91 20 02 	lds	r24, 0x0220
     b78:	88 23       	and	r24, r24
     b7a:	29 f0       	breq	.+10     	; 0xb86 <main+0x10c>
     b7c:	80 91 20 02 	lds	r24, 0x0220
     b80:	81 50       	subi	r24, 0x01	; 1
     b82:	80 93 20 02 	sts	0x0220, r24
		}

		//kontrola a pripadne odhlaseni timeoutovaneho cipu
		if (je_prihlaseno)
     b86:	80 91 30 02 	lds	r24, 0x0230
     b8a:	88 23       	and	r24, r24
     b8c:	41 f0       	breq	.+16     	; 0xb9e <main+0x124>
		{
			if (prihlaseny_cip_timeout == 0) OdhlasCip();
     b8e:	80 91 23 02 	lds	r24, 0x0223
     b92:	90 91 24 02 	lds	r25, 0x0224
     b96:	89 2b       	or	r24, r25
     b98:	11 f4       	brne	.+4      	; 0xb9e <main+0x124>
     b9a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z9OdhlasCipv>
		}

		//je potreba prekreslit display?
		if (refresh_display)
     b9e:	80 91 1c 02 	lds	r24, 0x021C
     ba2:	81 11       	cpse	r24, r1
		{
			refresh_display = false;
     ba4:	10 92 1c 02 	sts	0x021C, r1
		}

		if (timerCteniCipu == 0)
     ba8:	80 91 20 02 	lds	r24, 0x0220
     bac:	81 11       	cpse	r24, r1
     bae:	cd cf       	rjmp	.-102    	; 0xb4a <main+0xd0>
		{
			timerCteniCipu = CTENI_CIPU_TIMEOUT;
     bb0:	c0 93 20 02 	sts	0x0220, r28
			PrectiCip();
     bb4:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z9PrectiCipv>
     bb8:	c8 cf       	rjmp	.-112    	; 0xb4a <main+0xd0>

00000bba <__umulhisi3>:
     bba:	a2 9f       	mul	r26, r18
     bbc:	b0 01       	movw	r22, r0
     bbe:	b3 9f       	mul	r27, r19
     bc0:	c0 01       	movw	r24, r0
     bc2:	a3 9f       	mul	r26, r19
     bc4:	70 0d       	add	r23, r0
     bc6:	81 1d       	adc	r24, r1
     bc8:	11 24       	eor	r1, r1
     bca:	91 1d       	adc	r25, r1
     bcc:	b2 9f       	mul	r27, r18
     bce:	70 0d       	add	r23, r0
     bd0:	81 1d       	adc	r24, r1
     bd2:	11 24       	eor	r1, r1
     bd4:	91 1d       	adc	r25, r1
     bd6:	08 95       	ret

00000bd8 <__subsf3>:
     bd8:	50 58       	subi	r21, 0x80	; 128

00000bda <__addsf3>:
     bda:	bb 27       	eor	r27, r27
     bdc:	aa 27       	eor	r26, r26
     bde:	0e d0       	rcall	.+28     	; 0xbfc <__addsf3x>
     be0:	48 c1       	rjmp	.+656    	; 0xe72 <__fp_round>
     be2:	39 d1       	rcall	.+626    	; 0xe56 <__fp_pscA>
     be4:	30 f0       	brcs	.+12     	; 0xbf2 <__addsf3+0x18>
     be6:	3e d1       	rcall	.+636    	; 0xe64 <__fp_pscB>
     be8:	20 f0       	brcs	.+8      	; 0xbf2 <__addsf3+0x18>
     bea:	31 f4       	brne	.+12     	; 0xbf8 <__addsf3+0x1e>
     bec:	9f 3f       	cpi	r25, 0xFF	; 255
     bee:	11 f4       	brne	.+4      	; 0xbf4 <__addsf3+0x1a>
     bf0:	1e f4       	brtc	.+6      	; 0xbf8 <__addsf3+0x1e>
     bf2:	2e c1       	rjmp	.+604    	; 0xe50 <__fp_nan>
     bf4:	0e f4       	brtc	.+2      	; 0xbf8 <__addsf3+0x1e>
     bf6:	e0 95       	com	r30
     bf8:	e7 fb       	bst	r30, 7
     bfa:	24 c1       	rjmp	.+584    	; 0xe44 <__fp_inf>

00000bfc <__addsf3x>:
     bfc:	e9 2f       	mov	r30, r25
     bfe:	4a d1       	rcall	.+660    	; 0xe94 <__fp_split3>
     c00:	80 f3       	brcs	.-32     	; 0xbe2 <__addsf3+0x8>
     c02:	ba 17       	cp	r27, r26
     c04:	62 07       	cpc	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	84 07       	cpc	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <__addsf3x+0x18>
     c0e:	71 f4       	brne	.+28     	; 0xc2c <__addsf3x+0x30>
     c10:	9e f5       	brtc	.+102    	; 0xc78 <__addsf3x+0x7c>
     c12:	62 c1       	rjmp	.+708    	; 0xed8 <__fp_zero>
     c14:	0e f4       	brtc	.+2      	; 0xc18 <__addsf3x+0x1c>
     c16:	e0 95       	com	r30
     c18:	0b 2e       	mov	r0, r27
     c1a:	ba 2f       	mov	r27, r26
     c1c:	a0 2d       	mov	r26, r0
     c1e:	0b 01       	movw	r0, r22
     c20:	b9 01       	movw	r22, r18
     c22:	90 01       	movw	r18, r0
     c24:	0c 01       	movw	r0, r24
     c26:	ca 01       	movw	r24, r20
     c28:	a0 01       	movw	r20, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	ff 27       	eor	r31, r31
     c2e:	59 1b       	sub	r21, r25
     c30:	99 f0       	breq	.+38     	; 0xc58 <__addsf3x+0x5c>
     c32:	59 3f       	cpi	r21, 0xF9	; 249
     c34:	50 f4       	brcc	.+20     	; 0xc4a <__addsf3x+0x4e>
     c36:	50 3e       	cpi	r21, 0xE0	; 224
     c38:	68 f1       	brcs	.+90     	; 0xc94 <__addsf3x+0x98>
     c3a:	1a 16       	cp	r1, r26
     c3c:	f0 40       	sbci	r31, 0x00	; 0
     c3e:	a2 2f       	mov	r26, r18
     c40:	23 2f       	mov	r18, r19
     c42:	34 2f       	mov	r19, r20
     c44:	44 27       	eor	r20, r20
     c46:	58 5f       	subi	r21, 0xF8	; 248
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <__addsf3x+0x34>
     c4a:	46 95       	lsr	r20
     c4c:	37 95       	ror	r19
     c4e:	27 95       	ror	r18
     c50:	a7 95       	ror	r26
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	53 95       	inc	r21
     c56:	c9 f7       	brne	.-14     	; 0xc4a <__addsf3x+0x4e>
     c58:	7e f4       	brtc	.+30     	; 0xc78 <__addsf3x+0x7c>
     c5a:	1f 16       	cp	r1, r31
     c5c:	ba 0b       	sbc	r27, r26
     c5e:	62 0b       	sbc	r22, r18
     c60:	73 0b       	sbc	r23, r19
     c62:	84 0b       	sbc	r24, r20
     c64:	ba f0       	brmi	.+46     	; 0xc94 <__addsf3x+0x98>
     c66:	91 50       	subi	r25, 0x01	; 1
     c68:	a1 f0       	breq	.+40     	; 0xc92 <__addsf3x+0x96>
     c6a:	ff 0f       	add	r31, r31
     c6c:	bb 1f       	adc	r27, r27
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	c2 f7       	brpl	.-16     	; 0xc66 <__addsf3x+0x6a>
     c76:	0e c0       	rjmp	.+28     	; 0xc94 <__addsf3x+0x98>
     c78:	ba 0f       	add	r27, r26
     c7a:	62 1f       	adc	r22, r18
     c7c:	73 1f       	adc	r23, r19
     c7e:	84 1f       	adc	r24, r20
     c80:	48 f4       	brcc	.+18     	; 0xc94 <__addsf3x+0x98>
     c82:	87 95       	ror	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b7 95       	ror	r27
     c8a:	f7 95       	ror	r31
     c8c:	9e 3f       	cpi	r25, 0xFE	; 254
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0x96>
     c90:	b3 cf       	rjmp	.-154    	; 0xbf8 <__addsf3+0x1e>
     c92:	93 95       	inc	r25
     c94:	88 0f       	add	r24, r24
     c96:	08 f0       	brcs	.+2      	; 0xc9a <__addsf3x+0x9e>
     c98:	99 27       	eor	r25, r25
     c9a:	ee 0f       	add	r30, r30
     c9c:	97 95       	ror	r25
     c9e:	87 95       	ror	r24
     ca0:	08 95       	ret

00000ca2 <__divsf3>:
     ca2:	0c d0       	rcall	.+24     	; 0xcbc <__divsf3x>
     ca4:	e6 c0       	rjmp	.+460    	; 0xe72 <__fp_round>
     ca6:	de d0       	rcall	.+444    	; 0xe64 <__fp_pscB>
     ca8:	40 f0       	brcs	.+16     	; 0xcba <__divsf3+0x18>
     caa:	d5 d0       	rcall	.+426    	; 0xe56 <__fp_pscA>
     cac:	30 f0       	brcs	.+12     	; 0xcba <__divsf3+0x18>
     cae:	21 f4       	brne	.+8      	; 0xcb8 <__divsf3+0x16>
     cb0:	5f 3f       	cpi	r21, 0xFF	; 255
     cb2:	19 f0       	breq	.+6      	; 0xcba <__divsf3+0x18>
     cb4:	c7 c0       	rjmp	.+398    	; 0xe44 <__fp_inf>
     cb6:	51 11       	cpse	r21, r1
     cb8:	10 c1       	rjmp	.+544    	; 0xeda <__fp_szero>
     cba:	ca c0       	rjmp	.+404    	; 0xe50 <__fp_nan>

00000cbc <__divsf3x>:
     cbc:	eb d0       	rcall	.+470    	; 0xe94 <__fp_split3>
     cbe:	98 f3       	brcs	.-26     	; 0xca6 <__divsf3+0x4>

00000cc0 <__divsf3_pse>:
     cc0:	99 23       	and	r25, r25
     cc2:	c9 f3       	breq	.-14     	; 0xcb6 <__divsf3+0x14>
     cc4:	55 23       	and	r21, r21
     cc6:	b1 f3       	breq	.-20     	; 0xcb4 <__divsf3+0x12>
     cc8:	95 1b       	sub	r25, r21
     cca:	55 0b       	sbc	r21, r21
     ccc:	bb 27       	eor	r27, r27
     cce:	aa 27       	eor	r26, r26
     cd0:	62 17       	cp	r22, r18
     cd2:	73 07       	cpc	r23, r19
     cd4:	84 07       	cpc	r24, r20
     cd6:	38 f0       	brcs	.+14     	; 0xce6 <__divsf3_pse+0x26>
     cd8:	9f 5f       	subi	r25, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	aa 1f       	adc	r26, r26
     ce4:	a9 f3       	breq	.-22     	; 0xcd0 <__divsf3_pse+0x10>
     ce6:	33 d0       	rcall	.+102    	; 0xd4e <__divsf3_pse+0x8e>
     ce8:	0e 2e       	mov	r0, r30
     cea:	3a f0       	brmi	.+14     	; 0xcfa <__divsf3_pse+0x3a>
     cec:	e0 e8       	ldi	r30, 0x80	; 128
     cee:	30 d0       	rcall	.+96     	; 0xd50 <__divsf3_pse+0x90>
     cf0:	91 50       	subi	r25, 0x01	; 1
     cf2:	50 40       	sbci	r21, 0x00	; 0
     cf4:	e6 95       	lsr	r30
     cf6:	00 1c       	adc	r0, r0
     cf8:	ca f7       	brpl	.-14     	; 0xcec <__divsf3_pse+0x2c>
     cfa:	29 d0       	rcall	.+82     	; 0xd4e <__divsf3_pse+0x8e>
     cfc:	fe 2f       	mov	r31, r30
     cfe:	27 d0       	rcall	.+78     	; 0xd4e <__divsf3_pse+0x8e>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	bb 1f       	adc	r27, r27
     d08:	26 17       	cp	r18, r22
     d0a:	37 07       	cpc	r19, r23
     d0c:	48 07       	cpc	r20, r24
     d0e:	ab 07       	cpc	r26, r27
     d10:	b0 e8       	ldi	r27, 0x80	; 128
     d12:	09 f0       	breq	.+2      	; 0xd16 <__divsf3_pse+0x56>
     d14:	bb 0b       	sbc	r27, r27
     d16:	80 2d       	mov	r24, r0
     d18:	bf 01       	movw	r22, r30
     d1a:	ff 27       	eor	r31, r31
     d1c:	93 58       	subi	r25, 0x83	; 131
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	2a f0       	brmi	.+10     	; 0xd2c <__divsf3_pse+0x6c>
     d22:	9e 3f       	cpi	r25, 0xFE	; 254
     d24:	51 05       	cpc	r21, r1
     d26:	68 f0       	brcs	.+26     	; 0xd42 <__divsf3_pse+0x82>
     d28:	8d c0       	rjmp	.+282    	; 0xe44 <__fp_inf>
     d2a:	d7 c0       	rjmp	.+430    	; 0xeda <__fp_szero>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	ec f3       	brlt	.-6      	; 0xd2a <__divsf3_pse+0x6a>
     d30:	98 3e       	cpi	r25, 0xE8	; 232
     d32:	dc f3       	brlt	.-10     	; 0xd2a <__divsf3_pse+0x6a>
     d34:	86 95       	lsr	r24
     d36:	77 95       	ror	r23
     d38:	67 95       	ror	r22
     d3a:	b7 95       	ror	r27
     d3c:	f7 95       	ror	r31
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	c9 f7       	brne	.-14     	; 0xd34 <__divsf3_pse+0x74>
     d42:	88 0f       	add	r24, r24
     d44:	91 1d       	adc	r25, r1
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	97 f9       	bld	r25, 7
     d4c:	08 95       	ret
     d4e:	e1 e0       	ldi	r30, 0x01	; 1
     d50:	66 0f       	add	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	bb 1f       	adc	r27, r27
     d58:	62 17       	cp	r22, r18
     d5a:	73 07       	cpc	r23, r19
     d5c:	84 07       	cpc	r24, r20
     d5e:	ba 07       	cpc	r27, r26
     d60:	20 f0       	brcs	.+8      	; 0xd6a <__divsf3_pse+0xaa>
     d62:	62 1b       	sub	r22, r18
     d64:	73 0b       	sbc	r23, r19
     d66:	84 0b       	sbc	r24, r20
     d68:	ba 0b       	sbc	r27, r26
     d6a:	ee 1f       	adc	r30, r30
     d6c:	88 f7       	brcc	.-30     	; 0xd50 <__divsf3_pse+0x90>
     d6e:	e0 95       	com	r30
     d70:	08 95       	ret

00000d72 <__fixunssfsi>:
     d72:	98 d0       	rcall	.+304    	; 0xea4 <__fp_splitA>
     d74:	88 f0       	brcs	.+34     	; 0xd98 <__fixunssfsi+0x26>
     d76:	9f 57       	subi	r25, 0x7F	; 127
     d78:	90 f0       	brcs	.+36     	; 0xd9e <__fixunssfsi+0x2c>
     d7a:	b9 2f       	mov	r27, r25
     d7c:	99 27       	eor	r25, r25
     d7e:	b7 51       	subi	r27, 0x17	; 23
     d80:	a0 f0       	brcs	.+40     	; 0xdaa <__fixunssfsi+0x38>
     d82:	d1 f0       	breq	.+52     	; 0xdb8 <__fixunssfsi+0x46>
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	1a f0       	brmi	.+6      	; 0xd94 <__fixunssfsi+0x22>
     d8e:	ba 95       	dec	r27
     d90:	c9 f7       	brne	.-14     	; 0xd84 <__fixunssfsi+0x12>
     d92:	12 c0       	rjmp	.+36     	; 0xdb8 <__fixunssfsi+0x46>
     d94:	b1 30       	cpi	r27, 0x01	; 1
     d96:	81 f0       	breq	.+32     	; 0xdb8 <__fixunssfsi+0x46>
     d98:	9f d0       	rcall	.+318    	; 0xed8 <__fp_zero>
     d9a:	b1 e0       	ldi	r27, 0x01	; 1
     d9c:	08 95       	ret
     d9e:	9c c0       	rjmp	.+312    	; 0xed8 <__fp_zero>
     da0:	67 2f       	mov	r22, r23
     da2:	78 2f       	mov	r23, r24
     da4:	88 27       	eor	r24, r24
     da6:	b8 5f       	subi	r27, 0xF8	; 248
     da8:	39 f0       	breq	.+14     	; 0xdb8 <__fixunssfsi+0x46>
     daa:	b9 3f       	cpi	r27, 0xF9	; 249
     dac:	cc f3       	brlt	.-14     	; 0xda0 <__fixunssfsi+0x2e>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b3 95       	inc	r27
     db6:	d9 f7       	brne	.-10     	; 0xdae <__fixunssfsi+0x3c>
     db8:	3e f4       	brtc	.+14     	; 0xdc8 <__fixunssfsi+0x56>
     dba:	90 95       	com	r25
     dbc:	80 95       	com	r24
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8f 4f       	sbci	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	08 95       	ret

00000dca <__floatunsisf>:
     dca:	e8 94       	clt
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <__floatsisf+0x12>

00000dce <__floatsisf>:
     dce:	97 fb       	bst	r25, 7
     dd0:	3e f4       	brtc	.+14     	; 0xde0 <__floatsisf+0x12>
     dd2:	90 95       	com	r25
     dd4:	80 95       	com	r24
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	99 23       	and	r25, r25
     de2:	a9 f0       	breq	.+42     	; 0xe0e <__floatsisf+0x40>
     de4:	f9 2f       	mov	r31, r25
     de6:	96 e9       	ldi	r25, 0x96	; 150
     de8:	bb 27       	eor	r27, r27
     dea:	93 95       	inc	r25
     dec:	f6 95       	lsr	r31
     dee:	87 95       	ror	r24
     df0:	77 95       	ror	r23
     df2:	67 95       	ror	r22
     df4:	b7 95       	ror	r27
     df6:	f1 11       	cpse	r31, r1
     df8:	f8 cf       	rjmp	.-16     	; 0xdea <__floatsisf+0x1c>
     dfa:	fa f4       	brpl	.+62     	; 0xe3a <__floatsisf+0x6c>
     dfc:	bb 0f       	add	r27, r27
     dfe:	11 f4       	brne	.+4      	; 0xe04 <__floatsisf+0x36>
     e00:	60 ff       	sbrs	r22, 0
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <__floatsisf+0x6c>
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	8f 4f       	sbci	r24, 0xFF	; 255
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	16 c0       	rjmp	.+44     	; 0xe3a <__floatsisf+0x6c>
     e0e:	88 23       	and	r24, r24
     e10:	11 f0       	breq	.+4      	; 0xe16 <__floatsisf+0x48>
     e12:	96 e9       	ldi	r25, 0x96	; 150
     e14:	11 c0       	rjmp	.+34     	; 0xe38 <__floatsisf+0x6a>
     e16:	77 23       	and	r23, r23
     e18:	21 f0       	breq	.+8      	; 0xe22 <__floatsisf+0x54>
     e1a:	9e e8       	ldi	r25, 0x8E	; 142
     e1c:	87 2f       	mov	r24, r23
     e1e:	76 2f       	mov	r23, r22
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <__floatsisf+0x5e>
     e22:	66 23       	and	r22, r22
     e24:	71 f0       	breq	.+28     	; 0xe42 <__floatsisf+0x74>
     e26:	96 e8       	ldi	r25, 0x86	; 134
     e28:	86 2f       	mov	r24, r22
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	2a f0       	brmi	.+10     	; 0xe3a <__floatsisf+0x6c>
     e30:	9a 95       	dec	r25
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	da f7       	brpl	.-10     	; 0xe30 <__floatsisf+0x62>
     e3a:	88 0f       	add	r24, r24
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	97 f9       	bld	r25, 7
     e42:	08 95       	ret

00000e44 <__fp_inf>:
     e44:	97 f9       	bld	r25, 7
     e46:	9f 67       	ori	r25, 0x7F	; 127
     e48:	80 e8       	ldi	r24, 0x80	; 128
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	08 95       	ret

00000e50 <__fp_nan>:
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	80 ec       	ldi	r24, 0xC0	; 192
     e54:	08 95       	ret

00000e56 <__fp_pscA>:
     e56:	00 24       	eor	r0, r0
     e58:	0a 94       	dec	r0
     e5a:	16 16       	cp	r1, r22
     e5c:	17 06       	cpc	r1, r23
     e5e:	18 06       	cpc	r1, r24
     e60:	09 06       	cpc	r0, r25
     e62:	08 95       	ret

00000e64 <__fp_pscB>:
     e64:	00 24       	eor	r0, r0
     e66:	0a 94       	dec	r0
     e68:	12 16       	cp	r1, r18
     e6a:	13 06       	cpc	r1, r19
     e6c:	14 06       	cpc	r1, r20
     e6e:	05 06       	cpc	r0, r21
     e70:	08 95       	ret

00000e72 <__fp_round>:
     e72:	09 2e       	mov	r0, r25
     e74:	03 94       	inc	r0
     e76:	00 0c       	add	r0, r0
     e78:	11 f4       	brne	.+4      	; 0xe7e <__fp_round+0xc>
     e7a:	88 23       	and	r24, r24
     e7c:	52 f0       	brmi	.+20     	; 0xe92 <__fp_round+0x20>
     e7e:	bb 0f       	add	r27, r27
     e80:	40 f4       	brcc	.+16     	; 0xe92 <__fp_round+0x20>
     e82:	bf 2b       	or	r27, r31
     e84:	11 f4       	brne	.+4      	; 0xe8a <__fp_round+0x18>
     e86:	60 ff       	sbrs	r22, 0
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <__fp_round+0x20>
     e8a:	6f 5f       	subi	r22, 0xFF	; 255
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	8f 4f       	sbci	r24, 0xFF	; 255
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	08 95       	ret

00000e94 <__fp_split3>:
     e94:	57 fd       	sbrc	r21, 7
     e96:	90 58       	subi	r25, 0x80	; 128
     e98:	44 0f       	add	r20, r20
     e9a:	55 1f       	adc	r21, r21
     e9c:	59 f0       	breq	.+22     	; 0xeb4 <__fp_splitA+0x10>
     e9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ea0:	71 f0       	breq	.+28     	; 0xebe <__fp_splitA+0x1a>
     ea2:	47 95       	ror	r20

00000ea4 <__fp_splitA>:
     ea4:	88 0f       	add	r24, r24
     ea6:	97 fb       	bst	r25, 7
     ea8:	99 1f       	adc	r25, r25
     eaa:	61 f0       	breq	.+24     	; 0xec4 <__fp_splitA+0x20>
     eac:	9f 3f       	cpi	r25, 0xFF	; 255
     eae:	79 f0       	breq	.+30     	; 0xece <__fp_splitA+0x2a>
     eb0:	87 95       	ror	r24
     eb2:	08 95       	ret
     eb4:	12 16       	cp	r1, r18
     eb6:	13 06       	cpc	r1, r19
     eb8:	14 06       	cpc	r1, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	f2 cf       	rjmp	.-28     	; 0xea2 <__fp_split3+0xe>
     ebe:	46 95       	lsr	r20
     ec0:	f1 df       	rcall	.-30     	; 0xea4 <__fp_splitA>
     ec2:	08 c0       	rjmp	.+16     	; 0xed4 <__fp_splitA+0x30>
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	f1 cf       	rjmp	.-30     	; 0xeb0 <__fp_splitA+0xc>
     ece:	86 95       	lsr	r24
     ed0:	71 05       	cpc	r23, r1
     ed2:	61 05       	cpc	r22, r1
     ed4:	08 94       	sec
     ed6:	08 95       	ret

00000ed8 <__fp_zero>:
     ed8:	e8 94       	clt

00000eda <__fp_szero>:
     eda:	bb 27       	eor	r27, r27
     edc:	66 27       	eor	r22, r22
     ede:	77 27       	eor	r23, r23
     ee0:	cb 01       	movw	r24, r22
     ee2:	97 f9       	bld	r25, 7
     ee4:	08 95       	ret

00000ee6 <__mulsf3>:
     ee6:	0b d0       	rcall	.+22     	; 0xefe <__mulsf3x>
     ee8:	c4 cf       	rjmp	.-120    	; 0xe72 <__fp_round>
     eea:	b5 df       	rcall	.-150    	; 0xe56 <__fp_pscA>
     eec:	28 f0       	brcs	.+10     	; 0xef8 <__mulsf3+0x12>
     eee:	ba df       	rcall	.-140    	; 0xe64 <__fp_pscB>
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__mulsf3+0x12>
     ef2:	95 23       	and	r25, r21
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__mulsf3+0x12>
     ef6:	a6 cf       	rjmp	.-180    	; 0xe44 <__fp_inf>
     ef8:	ab cf       	rjmp	.-170    	; 0xe50 <__fp_nan>
     efa:	11 24       	eor	r1, r1
     efc:	ee cf       	rjmp	.-36     	; 0xeda <__fp_szero>

00000efe <__mulsf3x>:
     efe:	ca df       	rcall	.-108    	; 0xe94 <__fp_split3>
     f00:	a0 f3       	brcs	.-24     	; 0xeea <__mulsf3+0x4>

00000f02 <__mulsf3_pse>:
     f02:	95 9f       	mul	r25, r21
     f04:	d1 f3       	breq	.-12     	; 0xefa <__mulsf3+0x14>
     f06:	95 0f       	add	r25, r21
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	55 1f       	adc	r21, r21
     f0c:	62 9f       	mul	r22, r18
     f0e:	f0 01       	movw	r30, r0
     f10:	72 9f       	mul	r23, r18
     f12:	bb 27       	eor	r27, r27
     f14:	f0 0d       	add	r31, r0
     f16:	b1 1d       	adc	r27, r1
     f18:	63 9f       	mul	r22, r19
     f1a:	aa 27       	eor	r26, r26
     f1c:	f0 0d       	add	r31, r0
     f1e:	b1 1d       	adc	r27, r1
     f20:	aa 1f       	adc	r26, r26
     f22:	64 9f       	mul	r22, r20
     f24:	66 27       	eor	r22, r22
     f26:	b0 0d       	add	r27, r0
     f28:	a1 1d       	adc	r26, r1
     f2a:	66 1f       	adc	r22, r22
     f2c:	82 9f       	mul	r24, r18
     f2e:	22 27       	eor	r18, r18
     f30:	b0 0d       	add	r27, r0
     f32:	a1 1d       	adc	r26, r1
     f34:	62 1f       	adc	r22, r18
     f36:	73 9f       	mul	r23, r19
     f38:	b0 0d       	add	r27, r0
     f3a:	a1 1d       	adc	r26, r1
     f3c:	62 1f       	adc	r22, r18
     f3e:	83 9f       	mul	r24, r19
     f40:	a0 0d       	add	r26, r0
     f42:	61 1d       	adc	r22, r1
     f44:	22 1f       	adc	r18, r18
     f46:	74 9f       	mul	r23, r20
     f48:	33 27       	eor	r19, r19
     f4a:	a0 0d       	add	r26, r0
     f4c:	61 1d       	adc	r22, r1
     f4e:	23 1f       	adc	r18, r19
     f50:	84 9f       	mul	r24, r20
     f52:	60 0d       	add	r22, r0
     f54:	21 1d       	adc	r18, r1
     f56:	82 2f       	mov	r24, r18
     f58:	76 2f       	mov	r23, r22
     f5a:	6a 2f       	mov	r22, r26
     f5c:	11 24       	eor	r1, r1
     f5e:	9f 57       	subi	r25, 0x7F	; 127
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	8a f0       	brmi	.+34     	; 0xf86 <__mulsf3_pse+0x84>
     f64:	e1 f0       	breq	.+56     	; 0xf9e <__mulsf3_pse+0x9c>
     f66:	88 23       	and	r24, r24
     f68:	4a f0       	brmi	.+18     	; 0xf7c <__mulsf3_pse+0x7a>
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	bb 1f       	adc	r27, r27
     f70:	66 1f       	adc	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	91 50       	subi	r25, 0x01	; 1
     f78:	50 40       	sbci	r21, 0x00	; 0
     f7a:	a9 f7       	brne	.-22     	; 0xf66 <__mulsf3_pse+0x64>
     f7c:	9e 3f       	cpi	r25, 0xFE	; 254
     f7e:	51 05       	cpc	r21, r1
     f80:	70 f0       	brcs	.+28     	; 0xf9e <__mulsf3_pse+0x9c>
     f82:	60 cf       	rjmp	.-320    	; 0xe44 <__fp_inf>
     f84:	aa cf       	rjmp	.-172    	; 0xeda <__fp_szero>
     f86:	5f 3f       	cpi	r21, 0xFF	; 255
     f88:	ec f3       	brlt	.-6      	; 0xf84 <__mulsf3_pse+0x82>
     f8a:	98 3e       	cpi	r25, 0xE8	; 232
     f8c:	dc f3       	brlt	.-10     	; 0xf84 <__mulsf3_pse+0x82>
     f8e:	86 95       	lsr	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b7 95       	ror	r27
     f96:	f7 95       	ror	r31
     f98:	e7 95       	ror	r30
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	c1 f7       	brne	.-16     	; 0xf8e <__mulsf3_pse+0x8c>
     f9e:	fe 2b       	or	r31, r30
     fa0:	88 0f       	add	r24, r24
     fa2:	91 1d       	adc	r25, r1
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret

00000fac <printf>:
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ec ed       	ldi	r30, 0xDC	; 220
     fb2:	f7 e0       	ldi	r31, 0x07	; 7
     fb4:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__prologue_saves__+0x20>
     fb8:	fe 01       	movw	r30, r28
     fba:	35 96       	adiw	r30, 0x05	; 5
     fbc:	61 91       	ld	r22, Z+
     fbe:	71 91       	ld	r23, Z+
     fc0:	af 01       	movw	r20, r30
     fc2:	80 91 5f 02 	lds	r24, 0x025F
     fc6:	90 91 60 02 	lds	r25, 0x0260
     fca:	0e 94 17 08 	call	0x102e	; 0x102e <vfprintf>
     fce:	e2 e0       	ldi	r30, 0x02	; 2
     fd0:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__epilogue_restores__+0x20>

00000fd4 <puts>:
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	e0 91 5f 02 	lds	r30, 0x025F
     fe0:	f0 91 60 02 	lds	r31, 0x0260
     fe4:	23 81       	ldd	r18, Z+3	; 0x03
     fe6:	21 ff       	sbrs	r18, 1
     fe8:	1b c0       	rjmp	.+54     	; 0x1020 <puts+0x4c>
     fea:	ec 01       	movw	r28, r24
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	89 91       	ld	r24, Y+
     ff2:	60 91 5f 02 	lds	r22, 0x025F
     ff6:	70 91 60 02 	lds	r23, 0x0260
     ffa:	db 01       	movw	r26, r22
     ffc:	18 96       	adiw	r26, 0x08	; 8
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	19 97       	sbiw	r26, 0x09	; 9
    1004:	88 23       	and	r24, r24
    1006:	31 f0       	breq	.+12     	; 0x1014 <puts+0x40>
    1008:	09 95       	icall
    100a:	89 2b       	or	r24, r25
    100c:	89 f3       	breq	.-30     	; 0xff0 <puts+0x1c>
    100e:	0f ef       	ldi	r16, 0xFF	; 255
    1010:	1f ef       	ldi	r17, 0xFF	; 255
    1012:	ee cf       	rjmp	.-36     	; 0xff0 <puts+0x1c>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	09 95       	icall
    1018:	89 2b       	or	r24, r25
    101a:	11 f4       	brne	.+4      	; 0x1020 <puts+0x4c>
    101c:	c8 01       	movw	r24, r16
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <puts+0x50>
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <vfprintf>:
    102e:	ac e0       	ldi	r26, 0x0C	; 12
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ed e1       	ldi	r30, 0x1D	; 29
    1034:	f8 e0       	ldi	r31, 0x08	; 8
    1036:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__prologue_saves__>
    103a:	7c 01       	movw	r14, r24
    103c:	6b 01       	movw	r12, r22
    103e:	8a 01       	movw	r16, r20
    1040:	fc 01       	movw	r30, r24
    1042:	17 82       	std	Z+7, r1	; 0x07
    1044:	16 82       	std	Z+6, r1	; 0x06
    1046:	83 81       	ldd	r24, Z+3	; 0x03
    1048:	81 ff       	sbrs	r24, 1
    104a:	bd c1       	rjmp	.+890    	; 0x13c6 <vfprintf+0x398>
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	4c 01       	movw	r8, r24
    1052:	f7 01       	movw	r30, r14
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	f6 01       	movw	r30, r12
    1058:	93 fd       	sbrc	r25, 3
    105a:	85 91       	lpm	r24, Z+
    105c:	93 ff       	sbrs	r25, 3
    105e:	81 91       	ld	r24, Z+
    1060:	6f 01       	movw	r12, r30
    1062:	88 23       	and	r24, r24
    1064:	09 f4       	brne	.+2      	; 0x1068 <vfprintf+0x3a>
    1066:	ab c1       	rjmp	.+854    	; 0x13be <vfprintf+0x390>
    1068:	85 32       	cpi	r24, 0x25	; 37
    106a:	39 f4       	brne	.+14     	; 0x107a <vfprintf+0x4c>
    106c:	93 fd       	sbrc	r25, 3
    106e:	85 91       	lpm	r24, Z+
    1070:	93 ff       	sbrs	r25, 3
    1072:	81 91       	ld	r24, Z+
    1074:	6f 01       	movw	r12, r30
    1076:	85 32       	cpi	r24, 0x25	; 37
    1078:	29 f4       	brne	.+10     	; 0x1084 <vfprintf+0x56>
    107a:	b7 01       	movw	r22, r14
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1082:	e7 cf       	rjmp	.-50     	; 0x1052 <vfprintf+0x24>
    1084:	51 2c       	mov	r5, r1
    1086:	31 2c       	mov	r3, r1
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	20 32       	cpi	r18, 0x20	; 32
    108c:	a0 f4       	brcc	.+40     	; 0x10b6 <vfprintf+0x88>
    108e:	8b 32       	cpi	r24, 0x2B	; 43
    1090:	69 f0       	breq	.+26     	; 0x10ac <vfprintf+0x7e>
    1092:	30 f4       	brcc	.+12     	; 0x10a0 <vfprintf+0x72>
    1094:	80 32       	cpi	r24, 0x20	; 32
    1096:	59 f0       	breq	.+22     	; 0x10ae <vfprintf+0x80>
    1098:	83 32       	cpi	r24, 0x23	; 35
    109a:	69 f4       	brne	.+26     	; 0x10b6 <vfprintf+0x88>
    109c:	20 61       	ori	r18, 0x10	; 16
    109e:	2c c0       	rjmp	.+88     	; 0x10f8 <vfprintf+0xca>
    10a0:	8d 32       	cpi	r24, 0x2D	; 45
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <vfprintf+0x84>
    10a4:	80 33       	cpi	r24, 0x30	; 48
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <vfprintf+0x88>
    10a8:	21 60       	ori	r18, 0x01	; 1
    10aa:	26 c0       	rjmp	.+76     	; 0x10f8 <vfprintf+0xca>
    10ac:	22 60       	ori	r18, 0x02	; 2
    10ae:	24 60       	ori	r18, 0x04	; 4
    10b0:	23 c0       	rjmp	.+70     	; 0x10f8 <vfprintf+0xca>
    10b2:	28 60       	ori	r18, 0x08	; 8
    10b4:	21 c0       	rjmp	.+66     	; 0x10f8 <vfprintf+0xca>
    10b6:	27 fd       	sbrc	r18, 7
    10b8:	27 c0       	rjmp	.+78     	; 0x1108 <vfprintf+0xda>
    10ba:	30 ed       	ldi	r19, 0xD0	; 208
    10bc:	38 0f       	add	r19, r24
    10be:	3a 30       	cpi	r19, 0x0A	; 10
    10c0:	78 f4       	brcc	.+30     	; 0x10e0 <vfprintf+0xb2>
    10c2:	26 ff       	sbrs	r18, 6
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <vfprintf+0xa4>
    10c6:	fa e0       	ldi	r31, 0x0A	; 10
    10c8:	5f 9e       	mul	r5, r31
    10ca:	30 0d       	add	r19, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	53 2e       	mov	r5, r19
    10d0:	13 c0       	rjmp	.+38     	; 0x10f8 <vfprintf+0xca>
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	38 9e       	mul	r3, r24
    10d6:	30 0d       	add	r19, r0
    10d8:	11 24       	eor	r1, r1
    10da:	33 2e       	mov	r3, r19
    10dc:	20 62       	ori	r18, 0x20	; 32
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <vfprintf+0xca>
    10e0:	8e 32       	cpi	r24, 0x2E	; 46
    10e2:	21 f4       	brne	.+8      	; 0x10ec <vfprintf+0xbe>
    10e4:	26 fd       	sbrc	r18, 6
    10e6:	6b c1       	rjmp	.+726    	; 0x13be <vfprintf+0x390>
    10e8:	20 64       	ori	r18, 0x40	; 64
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <vfprintf+0xca>
    10ec:	8c 36       	cpi	r24, 0x6C	; 108
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <vfprintf+0xc6>
    10f0:	20 68       	ori	r18, 0x80	; 128
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0xca>
    10f4:	88 36       	cpi	r24, 0x68	; 104
    10f6:	41 f4       	brne	.+16     	; 0x1108 <vfprintf+0xda>
    10f8:	f6 01       	movw	r30, r12
    10fa:	93 fd       	sbrc	r25, 3
    10fc:	85 91       	lpm	r24, Z+
    10fe:	93 ff       	sbrs	r25, 3
    1100:	81 91       	ld	r24, Z+
    1102:	6f 01       	movw	r12, r30
    1104:	81 11       	cpse	r24, r1
    1106:	c1 cf       	rjmp	.-126    	; 0x108a <vfprintf+0x5c>
    1108:	98 2f       	mov	r25, r24
    110a:	9f 7d       	andi	r25, 0xDF	; 223
    110c:	95 54       	subi	r25, 0x45	; 69
    110e:	93 30       	cpi	r25, 0x03	; 3
    1110:	28 f4       	brcc	.+10     	; 0x111c <vfprintf+0xee>
    1112:	0c 5f       	subi	r16, 0xFC	; 252
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	ff e3       	ldi	r31, 0x3F	; 63
    1118:	f9 83       	std	Y+1, r31	; 0x01
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <vfprintf+0x108>
    111c:	83 36       	cpi	r24, 0x63	; 99
    111e:	31 f0       	breq	.+12     	; 0x112c <vfprintf+0xfe>
    1120:	83 37       	cpi	r24, 0x73	; 115
    1122:	71 f0       	breq	.+28     	; 0x1140 <vfprintf+0x112>
    1124:	83 35       	cpi	r24, 0x53	; 83
    1126:	09 f0       	breq	.+2      	; 0x112a <vfprintf+0xfc>
    1128:	5b c0       	rjmp	.+182    	; 0x11e0 <vfprintf+0x1b2>
    112a:	22 c0       	rjmp	.+68     	; 0x1170 <vfprintf+0x142>
    112c:	f8 01       	movw	r30, r16
    112e:	80 81       	ld	r24, Z
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	0e 5f       	subi	r16, 0xFE	; 254
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	44 24       	eor	r4, r4
    1138:	43 94       	inc	r4
    113a:	51 2c       	mov	r5, r1
    113c:	54 01       	movw	r10, r8
    113e:	15 c0       	rjmp	.+42     	; 0x116a <vfprintf+0x13c>
    1140:	38 01       	movw	r6, r16
    1142:	f2 e0       	ldi	r31, 0x02	; 2
    1144:	6f 0e       	add	r6, r31
    1146:	71 1c       	adc	r7, r1
    1148:	f8 01       	movw	r30, r16
    114a:	a0 80       	ld	r10, Z
    114c:	b1 80       	ldd	r11, Z+1	; 0x01
    114e:	26 ff       	sbrs	r18, 6
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <vfprintf+0x12a>
    1152:	65 2d       	mov	r22, r5
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x12e>
    1158:	6f ef       	ldi	r22, 0xFF	; 255
    115a:	7f ef       	ldi	r23, 0xFF	; 255
    115c:	c5 01       	movw	r24, r10
    115e:	2c 87       	std	Y+12, r18	; 0x0c
    1160:	0e 94 20 0a 	call	0x1440	; 0x1440 <strnlen>
    1164:	2c 01       	movw	r4, r24
    1166:	83 01       	movw	r16, r6
    1168:	2c 85       	ldd	r18, Y+12	; 0x0c
    116a:	2f 77       	andi	r18, 0x7F	; 127
    116c:	22 2e       	mov	r2, r18
    116e:	17 c0       	rjmp	.+46     	; 0x119e <vfprintf+0x170>
    1170:	38 01       	movw	r6, r16
    1172:	f2 e0       	ldi	r31, 0x02	; 2
    1174:	6f 0e       	add	r6, r31
    1176:	71 1c       	adc	r7, r1
    1178:	f8 01       	movw	r30, r16
    117a:	a0 80       	ld	r10, Z
    117c:	b1 80       	ldd	r11, Z+1	; 0x01
    117e:	26 ff       	sbrs	r18, 6
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <vfprintf+0x15a>
    1182:	65 2d       	mov	r22, r5
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x15e>
    1188:	6f ef       	ldi	r22, 0xFF	; 255
    118a:	7f ef       	ldi	r23, 0xFF	; 255
    118c:	c5 01       	movw	r24, r10
    118e:	2c 87       	std	Y+12, r18	; 0x0c
    1190:	0e 94 15 0a 	call	0x142a	; 0x142a <strnlen_P>
    1194:	2c 01       	movw	r4, r24
    1196:	2c 85       	ldd	r18, Y+12	; 0x0c
    1198:	20 68       	ori	r18, 0x80	; 128
    119a:	22 2e       	mov	r2, r18
    119c:	83 01       	movw	r16, r6
    119e:	23 fc       	sbrc	r2, 3
    11a0:	1b c0       	rjmp	.+54     	; 0x11d8 <vfprintf+0x1aa>
    11a2:	83 2d       	mov	r24, r3
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	48 16       	cp	r4, r24
    11a8:	59 06       	cpc	r5, r25
    11aa:	b0 f4       	brcc	.+44     	; 0x11d8 <vfprintf+0x1aa>
    11ac:	b7 01       	movw	r22, r14
    11ae:	80 e2       	ldi	r24, 0x20	; 32
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    11b6:	3a 94       	dec	r3
    11b8:	f4 cf       	rjmp	.-24     	; 0x11a2 <vfprintf+0x174>
    11ba:	f5 01       	movw	r30, r10
    11bc:	27 fc       	sbrc	r2, 7
    11be:	85 91       	lpm	r24, Z+
    11c0:	27 fe       	sbrs	r2, 7
    11c2:	81 91       	ld	r24, Z+
    11c4:	5f 01       	movw	r10, r30
    11c6:	b7 01       	movw	r22, r14
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    11ce:	31 10       	cpse	r3, r1
    11d0:	3a 94       	dec	r3
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	4f 1a       	sub	r4, r31
    11d6:	51 08       	sbc	r5, r1
    11d8:	41 14       	cp	r4, r1
    11da:	51 04       	cpc	r5, r1
    11dc:	71 f7       	brne	.-36     	; 0x11ba <vfprintf+0x18c>
    11de:	e5 c0       	rjmp	.+458    	; 0x13aa <vfprintf+0x37c>
    11e0:	84 36       	cpi	r24, 0x64	; 100
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <vfprintf+0x1ba>
    11e4:	89 36       	cpi	r24, 0x69	; 105
    11e6:	39 f5       	brne	.+78     	; 0x1236 <vfprintf+0x208>
    11e8:	f8 01       	movw	r30, r16
    11ea:	27 ff       	sbrs	r18, 7
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <vfprintf+0x1ce>
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	0c 5f       	subi	r16, 0xFC	; 252
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <vfprintf+0x1de>
    11fc:	60 81       	ld	r22, Z
    11fe:	71 81       	ldd	r23, Z+1	; 0x01
    1200:	88 27       	eor	r24, r24
    1202:	77 fd       	sbrc	r23, 7
    1204:	80 95       	com	r24
    1206:	98 2f       	mov	r25, r24
    1208:	0e 5f       	subi	r16, 0xFE	; 254
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	2f 76       	andi	r18, 0x6F	; 111
    120e:	b2 2e       	mov	r11, r18
    1210:	97 ff       	sbrs	r25, 7
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <vfprintf+0x1f8>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	20 68       	ori	r18, 0x80	; 128
    1224:	b2 2e       	mov	r11, r18
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	a4 01       	movw	r20, r8
    122c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__ultoa_invert>
    1230:	a8 2e       	mov	r10, r24
    1232:	a8 18       	sub	r10, r8
    1234:	44 c0       	rjmp	.+136    	; 0x12be <vfprintf+0x290>
    1236:	85 37       	cpi	r24, 0x75	; 117
    1238:	29 f4       	brne	.+10     	; 0x1244 <vfprintf+0x216>
    123a:	2f 7e       	andi	r18, 0xEF	; 239
    123c:	b2 2e       	mov	r11, r18
    123e:	2a e0       	ldi	r18, 0x0A	; 10
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	25 c0       	rjmp	.+74     	; 0x128e <vfprintf+0x260>
    1244:	f2 2f       	mov	r31, r18
    1246:	f9 7f       	andi	r31, 0xF9	; 249
    1248:	bf 2e       	mov	r11, r31
    124a:	8f 36       	cpi	r24, 0x6F	; 111
    124c:	c1 f0       	breq	.+48     	; 0x127e <vfprintf+0x250>
    124e:	18 f4       	brcc	.+6      	; 0x1256 <vfprintf+0x228>
    1250:	88 35       	cpi	r24, 0x58	; 88
    1252:	79 f0       	breq	.+30     	; 0x1272 <vfprintf+0x244>
    1254:	b4 c0       	rjmp	.+360    	; 0x13be <vfprintf+0x390>
    1256:	80 37       	cpi	r24, 0x70	; 112
    1258:	19 f0       	breq	.+6      	; 0x1260 <vfprintf+0x232>
    125a:	88 37       	cpi	r24, 0x78	; 120
    125c:	21 f0       	breq	.+8      	; 0x1266 <vfprintf+0x238>
    125e:	af c0       	rjmp	.+350    	; 0x13be <vfprintf+0x390>
    1260:	2f 2f       	mov	r18, r31
    1262:	20 61       	ori	r18, 0x10	; 16
    1264:	b2 2e       	mov	r11, r18
    1266:	b4 fe       	sbrs	r11, 4
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <vfprintf+0x256>
    126a:	8b 2d       	mov	r24, r11
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	b8 2e       	mov	r11, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <vfprintf+0x256>
    1272:	24 ff       	sbrs	r18, 4
    1274:	0a c0       	rjmp	.+20     	; 0x128a <vfprintf+0x25c>
    1276:	9f 2f       	mov	r25, r31
    1278:	96 60       	ori	r25, 0x06	; 6
    127a:	b9 2e       	mov	r11, r25
    127c:	06 c0       	rjmp	.+12     	; 0x128a <vfprintf+0x25c>
    127e:	28 e0       	ldi	r18, 0x08	; 8
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	05 c0       	rjmp	.+10     	; 0x128e <vfprintf+0x260>
    1284:	20 e1       	ldi	r18, 0x10	; 16
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x260>
    128a:	20 e1       	ldi	r18, 0x10	; 16
    128c:	32 e0       	ldi	r19, 0x02	; 2
    128e:	f8 01       	movw	r30, r16
    1290:	b7 fe       	sbrs	r11, 7
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vfprintf+0x274>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0c 5f       	subi	r16, 0xFC	; 252
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <vfprintf+0x280>
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 5f       	subi	r16, 0xFE	; 254
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	a4 01       	movw	r20, r8
    12b0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__ultoa_invert>
    12b4:	a8 2e       	mov	r10, r24
    12b6:	a8 18       	sub	r10, r8
    12b8:	fb 2d       	mov	r31, r11
    12ba:	ff 77       	andi	r31, 0x7F	; 127
    12bc:	bf 2e       	mov	r11, r31
    12be:	b6 fe       	sbrs	r11, 6
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <vfprintf+0x2aa>
    12c2:	2b 2d       	mov	r18, r11
    12c4:	2e 7f       	andi	r18, 0xFE	; 254
    12c6:	a5 14       	cp	r10, r5
    12c8:	50 f4       	brcc	.+20     	; 0x12de <vfprintf+0x2b0>
    12ca:	b4 fe       	sbrs	r11, 4
    12cc:	0a c0       	rjmp	.+20     	; 0x12e2 <vfprintf+0x2b4>
    12ce:	b2 fc       	sbrc	r11, 2
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <vfprintf+0x2b4>
    12d2:	2b 2d       	mov	r18, r11
    12d4:	2e 7e       	andi	r18, 0xEE	; 238
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <vfprintf+0x2b4>
    12d8:	7a 2c       	mov	r7, r10
    12da:	2b 2d       	mov	r18, r11
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x2b6>
    12de:	7a 2c       	mov	r7, r10
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <vfprintf+0x2b6>
    12e2:	75 2c       	mov	r7, r5
    12e4:	24 ff       	sbrs	r18, 4
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <vfprintf+0x2d4>
    12e8:	fe 01       	movw	r30, r28
    12ea:	ea 0d       	add	r30, r10
    12ec:	f1 1d       	adc	r31, r1
    12ee:	80 81       	ld	r24, Z
    12f0:	80 33       	cpi	r24, 0x30	; 48
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <vfprintf+0x2ca>
    12f4:	29 7e       	andi	r18, 0xE9	; 233
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <vfprintf+0x2dc>
    12f8:	22 ff       	sbrs	r18, 2
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <vfprintf+0x2da>
    12fc:	73 94       	inc	r7
    12fe:	73 94       	inc	r7
    1300:	04 c0       	rjmp	.+8      	; 0x130a <vfprintf+0x2dc>
    1302:	82 2f       	mov	r24, r18
    1304:	86 78       	andi	r24, 0x86	; 134
    1306:	09 f0       	breq	.+2      	; 0x130a <vfprintf+0x2dc>
    1308:	73 94       	inc	r7
    130a:	23 fd       	sbrc	r18, 3
    130c:	13 c0       	rjmp	.+38     	; 0x1334 <vfprintf+0x306>
    130e:	20 ff       	sbrs	r18, 0
    1310:	06 c0       	rjmp	.+12     	; 0x131e <vfprintf+0x2f0>
    1312:	5a 2c       	mov	r5, r10
    1314:	73 14       	cp	r7, r3
    1316:	18 f4       	brcc	.+6      	; 0x131e <vfprintf+0x2f0>
    1318:	53 0c       	add	r5, r3
    131a:	57 18       	sub	r5, r7
    131c:	73 2c       	mov	r7, r3
    131e:	73 14       	cp	r7, r3
    1320:	68 f4       	brcc	.+26     	; 0x133c <vfprintf+0x30e>
    1322:	b7 01       	movw	r22, r14
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	2c 87       	std	Y+12, r18	; 0x0c
    132a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    132e:	73 94       	inc	r7
    1330:	2c 85       	ldd	r18, Y+12	; 0x0c
    1332:	f5 cf       	rjmp	.-22     	; 0x131e <vfprintf+0x2f0>
    1334:	73 14       	cp	r7, r3
    1336:	10 f4       	brcc	.+4      	; 0x133c <vfprintf+0x30e>
    1338:	37 18       	sub	r3, r7
    133a:	01 c0       	rjmp	.+2      	; 0x133e <vfprintf+0x310>
    133c:	31 2c       	mov	r3, r1
    133e:	24 ff       	sbrs	r18, 4
    1340:	12 c0       	rjmp	.+36     	; 0x1366 <vfprintf+0x338>
    1342:	b7 01       	movw	r22, r14
    1344:	80 e3       	ldi	r24, 0x30	; 48
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	2c 87       	std	Y+12, r18	; 0x0c
    134a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	22 ff       	sbrs	r18, 2
    1352:	17 c0       	rjmp	.+46     	; 0x1382 <vfprintf+0x354>
    1354:	21 ff       	sbrs	r18, 1
    1356:	03 c0       	rjmp	.+6      	; 0x135e <vfprintf+0x330>
    1358:	88 e5       	ldi	r24, 0x58	; 88
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <vfprintf+0x334>
    135e:	88 e7       	ldi	r24, 0x78	; 120
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	b7 01       	movw	r22, r14
    1364:	0c c0       	rjmp	.+24     	; 0x137e <vfprintf+0x350>
    1366:	82 2f       	mov	r24, r18
    1368:	86 78       	andi	r24, 0x86	; 134
    136a:	59 f0       	breq	.+22     	; 0x1382 <vfprintf+0x354>
    136c:	21 fd       	sbrc	r18, 1
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x346>
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <vfprintf+0x348>
    1374:	8b e2       	ldi	r24, 0x2B	; 43
    1376:	27 fd       	sbrc	r18, 7
    1378:	8d e2       	ldi	r24, 0x2D	; 45
    137a:	b7 01       	movw	r22, r14
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1382:	a5 14       	cp	r10, r5
    1384:	38 f4       	brcc	.+14     	; 0x1394 <vfprintf+0x366>
    1386:	b7 01       	movw	r22, r14
    1388:	80 e3       	ldi	r24, 0x30	; 48
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1390:	5a 94       	dec	r5
    1392:	f7 cf       	rjmp	.-18     	; 0x1382 <vfprintf+0x354>
    1394:	aa 94       	dec	r10
    1396:	f4 01       	movw	r30, r8
    1398:	ea 0d       	add	r30, r10
    139a:	f1 1d       	adc	r31, r1
    139c:	80 81       	ld	r24, Z
    139e:	b7 01       	movw	r22, r14
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    13a6:	a1 10       	cpse	r10, r1
    13a8:	f5 cf       	rjmp	.-22     	; 0x1394 <vfprintf+0x366>
    13aa:	33 20       	and	r3, r3
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <vfprintf+0x382>
    13ae:	51 ce       	rjmp	.-862    	; 0x1052 <vfprintf+0x24>
    13b0:	b7 01       	movw	r22, r14
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    13ba:	3a 94       	dec	r3
    13bc:	f6 cf       	rjmp	.-20     	; 0x13aa <vfprintf+0x37c>
    13be:	f7 01       	movw	r30, r14
    13c0:	86 81       	ldd	r24, Z+6	; 0x06
    13c2:	97 81       	ldd	r25, Z+7	; 0x07
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x39c>
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	2c 96       	adiw	r28, 0x0c	; 12
    13cc:	e2 e1       	ldi	r30, 0x12	; 18
    13ce:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__epilogue_restores__>

000013d2 <__eerd_byte_m328p>:
    13d2:	f9 99       	sbic	0x1f, 1	; 31
    13d4:	fe cf       	rjmp	.-4      	; 0x13d2 <__eerd_byte_m328p>
    13d6:	92 bd       	out	0x22, r25	; 34
    13d8:	81 bd       	out	0x21, r24	; 33
    13da:	f8 9a       	sbi	0x1f, 0	; 31
    13dc:	99 27       	eor	r25, r25
    13de:	80 b5       	in	r24, 0x20	; 32
    13e0:	08 95       	ret

000013e2 <__eerd_dword_m328p>:
    13e2:	a6 e1       	ldi	r26, 0x16	; 22
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	44 e0       	ldi	r20, 0x04	; 4
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__eerd_blraw_m328p>

000013ee <__eeupd_byte_m328p>:
    13ee:	26 2f       	mov	r18, r22

000013f0 <__eeupd_r18_m328p>:
    13f0:	f9 99       	sbic	0x1f, 1	; 31
    13f2:	fe cf       	rjmp	.-4      	; 0x13f0 <__eeupd_r18_m328p>
    13f4:	92 bd       	out	0x22, r25	; 34
    13f6:	81 bd       	out	0x21, r24	; 33
    13f8:	f8 9a       	sbi	0x1f, 0	; 31
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	00 b4       	in	r0, 0x20	; 32
    13fe:	02 16       	cp	r0, r18
    1400:	39 f0       	breq	.+14     	; 0x1410 <__eeupd_r18_m328p+0x20>
    1402:	1f ba       	out	0x1f, r1	; 31
    1404:	20 bd       	out	0x20, r18	; 32
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	fa 9a       	sbi	0x1f, 2	; 31
    140c:	f9 9a       	sbi	0x1f, 1	; 31
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	08 95       	ret

00001412 <__eeupd_dword_m328p>:
    1412:	03 96       	adiw	r24, 0x03	; 3
    1414:	27 2f       	mov	r18, r23
    1416:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__eeupd_r18_m328p>
    141a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__eeupd_byte_m328p>
    141e:	25 2f       	mov	r18, r21
    1420:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__eeupd_r18_m328p>
    1424:	24 2f       	mov	r18, r20
    1426:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__eeupd_r18_m328p>

0000142a <strnlen_P>:
    142a:	fc 01       	movw	r30, r24
    142c:	05 90       	lpm	r0, Z+
    142e:	61 50       	subi	r22, 0x01	; 1
    1430:	70 40       	sbci	r23, 0x00	; 0
    1432:	01 10       	cpse	r0, r1
    1434:	d8 f7       	brcc	.-10     	; 0x142c <strnlen_P+0x2>
    1436:	80 95       	com	r24
    1438:	90 95       	com	r25
    143a:	8e 0f       	add	r24, r30
    143c:	9f 1f       	adc	r25, r31
    143e:	08 95       	ret

00001440 <strnlen>:
    1440:	fc 01       	movw	r30, r24
    1442:	61 50       	subi	r22, 0x01	; 1
    1444:	70 40       	sbci	r23, 0x00	; 0
    1446:	01 90       	ld	r0, Z+
    1448:	01 10       	cpse	r0, r1
    144a:	d8 f7       	brcc	.-10     	; 0x1442 <strnlen+0x2>
    144c:	80 95       	com	r24
    144e:	90 95       	com	r25
    1450:	8e 0f       	add	r24, r30
    1452:	9f 1f       	adc	r25, r31
    1454:	08 95       	ret

00001456 <fputc>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	18 2f       	mov	r17, r24
    1460:	09 2f       	mov	r16, r25
    1462:	eb 01       	movw	r28, r22
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	81 fd       	sbrc	r24, 1
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <fputc+0x1a>
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	9f ef       	ldi	r25, 0xFF	; 255
    146e:	20 c0       	rjmp	.+64     	; 0x14b0 <fputc+0x5a>
    1470:	82 ff       	sbrs	r24, 2
    1472:	10 c0       	rjmp	.+32     	; 0x1494 <fputc+0x3e>
    1474:	4e 81       	ldd	r20, Y+6	; 0x06
    1476:	5f 81       	ldd	r21, Y+7	; 0x07
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	42 17       	cp	r20, r18
    147e:	53 07       	cpc	r21, r19
    1480:	7c f4       	brge	.+30     	; 0x14a0 <fputc+0x4a>
    1482:	e8 81       	ld	r30, Y
    1484:	f9 81       	ldd	r31, Y+1	; 0x01
    1486:	9f 01       	movw	r18, r30
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	39 83       	std	Y+1, r19	; 0x01
    148e:	28 83       	st	Y, r18
    1490:	10 83       	st	Z, r17
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <fputc+0x4a>
    1494:	e8 85       	ldd	r30, Y+8	; 0x08
    1496:	f9 85       	ldd	r31, Y+9	; 0x09
    1498:	81 2f       	mov	r24, r17
    149a:	09 95       	icall
    149c:	89 2b       	or	r24, r25
    149e:	29 f7       	brne	.-54     	; 0x146a <fputc+0x14>
    14a0:	2e 81       	ldd	r18, Y+6	; 0x06
    14a2:	3f 81       	ldd	r19, Y+7	; 0x07
    14a4:	2f 5f       	subi	r18, 0xFF	; 255
    14a6:	3f 4f       	sbci	r19, 0xFF	; 255
    14a8:	3f 83       	std	Y+7, r19	; 0x07
    14aa:	2e 83       	std	Y+6, r18	; 0x06
    14ac:	81 2f       	mov	r24, r17
    14ae:	90 2f       	mov	r25, r16
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <__ultoa_invert>:
    14ba:	fa 01       	movw	r30, r20
    14bc:	aa 27       	eor	r26, r26
    14be:	28 30       	cpi	r18, 0x08	; 8
    14c0:	51 f1       	breq	.+84     	; 0x1516 <__ultoa_invert+0x5c>
    14c2:	20 31       	cpi	r18, 0x10	; 16
    14c4:	81 f1       	breq	.+96     	; 0x1526 <__ultoa_invert+0x6c>
    14c6:	e8 94       	clt
    14c8:	6f 93       	push	r22
    14ca:	6e 7f       	andi	r22, 0xFE	; 254
    14cc:	6e 5f       	subi	r22, 0xFE	; 254
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	af 4f       	sbci	r26, 0xFF	; 255
    14d6:	b1 e0       	ldi	r27, 0x01	; 1
    14d8:	3e d0       	rcall	.+124    	; 0x1556 <__ultoa_invert+0x9c>
    14da:	b4 e0       	ldi	r27, 0x04	; 4
    14dc:	3c d0       	rcall	.+120    	; 0x1556 <__ultoa_invert+0x9c>
    14de:	67 0f       	add	r22, r23
    14e0:	78 1f       	adc	r23, r24
    14e2:	89 1f       	adc	r24, r25
    14e4:	9a 1f       	adc	r25, r26
    14e6:	a1 1d       	adc	r26, r1
    14e8:	68 0f       	add	r22, r24
    14ea:	79 1f       	adc	r23, r25
    14ec:	8a 1f       	adc	r24, r26
    14ee:	91 1d       	adc	r25, r1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	6a 0f       	add	r22, r26
    14f4:	71 1d       	adc	r23, r1
    14f6:	81 1d       	adc	r24, r1
    14f8:	91 1d       	adc	r25, r1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	20 d0       	rcall	.+64     	; 0x153e <__ultoa_invert+0x84>
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__ultoa_invert+0x48>
    1500:	68 94       	set
    1502:	3f 91       	pop	r19
    1504:	2a e0       	ldi	r18, 0x0A	; 10
    1506:	26 9f       	mul	r18, r22
    1508:	11 24       	eor	r1, r1
    150a:	30 19       	sub	r19, r0
    150c:	30 5d       	subi	r19, 0xD0	; 208
    150e:	31 93       	st	Z+, r19
    1510:	de f6       	brtc	.-74     	; 0x14c8 <__ultoa_invert+0xe>
    1512:	cf 01       	movw	r24, r30
    1514:	08 95       	ret
    1516:	46 2f       	mov	r20, r22
    1518:	47 70       	andi	r20, 0x07	; 7
    151a:	40 5d       	subi	r20, 0xD0	; 208
    151c:	41 93       	st	Z+, r20
    151e:	b3 e0       	ldi	r27, 0x03	; 3
    1520:	0f d0       	rcall	.+30     	; 0x1540 <__ultoa_invert+0x86>
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__ultoa_invert+0x5c>
    1524:	f6 cf       	rjmp	.-20     	; 0x1512 <__ultoa_invert+0x58>
    1526:	46 2f       	mov	r20, r22
    1528:	4f 70       	andi	r20, 0x0F	; 15
    152a:	40 5d       	subi	r20, 0xD0	; 208
    152c:	4a 33       	cpi	r20, 0x3A	; 58
    152e:	18 f0       	brcs	.+6      	; 0x1536 <__ultoa_invert+0x7c>
    1530:	49 5d       	subi	r20, 0xD9	; 217
    1532:	31 fd       	sbrc	r19, 1
    1534:	40 52       	subi	r20, 0x20	; 32
    1536:	41 93       	st	Z+, r20
    1538:	02 d0       	rcall	.+4      	; 0x153e <__ultoa_invert+0x84>
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__ultoa_invert+0x6c>
    153c:	ea cf       	rjmp	.-44     	; 0x1512 <__ultoa_invert+0x58>
    153e:	b4 e0       	ldi	r27, 0x04	; 4
    1540:	a6 95       	lsr	r26
    1542:	97 95       	ror	r25
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	ba 95       	dec	r27
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__ultoa_invert+0x86>
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 05       	cpc	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	08 95       	ret
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	0a 2e       	mov	r0, r26
    155c:	06 94       	lsr	r0
    155e:	57 95       	ror	r21
    1560:	47 95       	ror	r20
    1562:	37 95       	ror	r19
    1564:	27 95       	ror	r18
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__ultoa_invert+0xa2>
    156a:	62 0f       	add	r22, r18
    156c:	73 1f       	adc	r23, r19
    156e:	84 1f       	adc	r24, r20
    1570:	95 1f       	adc	r25, r21
    1572:	a0 1d       	adc	r26, r0
    1574:	08 95       	ret

00001576 <__eerd_block_m328p>:
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22

0000157a <__eerd_blraw_m328p>:
    157a:	fc 01       	movw	r30, r24
    157c:	f9 99       	sbic	0x1f, 1	; 31
    157e:	fe cf       	rjmp	.-4      	; 0x157c <__eerd_blraw_m328p+0x2>
    1580:	06 c0       	rjmp	.+12     	; 0x158e <__eerd_blraw_m328p+0x14>
    1582:	f2 bd       	out	0x22, r31	; 34
    1584:	e1 bd       	out	0x21, r30	; 33
    1586:	f8 9a       	sbi	0x1f, 0	; 31
    1588:	31 96       	adiw	r30, 0x01	; 1
    158a:	00 b4       	in	r0, 0x20	; 32
    158c:	0d 92       	st	X+, r0
    158e:	41 50       	subi	r20, 0x01	; 1
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	b8 f7       	brcc	.-18     	; 0x1582 <__eerd_blraw_m328p+0x8>
    1594:	08 95       	ret

00001596 <__prologue_saves__>:
    1596:	2f 92       	push	r2
    1598:	3f 92       	push	r3
    159a:	4f 92       	push	r4
    159c:	5f 92       	push	r5
    159e:	6f 92       	push	r6
    15a0:	7f 92       	push	r7
    15a2:	8f 92       	push	r8
    15a4:	9f 92       	push	r9
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	ca 1b       	sub	r28, r26
    15c0:	db 0b       	sbc	r29, r27
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	09 94       	ijmp

000015ce <__epilogue_restores__>:
    15ce:	2a 88       	ldd	r2, Y+18	; 0x12
    15d0:	39 88       	ldd	r3, Y+17	; 0x11
    15d2:	48 88       	ldd	r4, Y+16	; 0x10
    15d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15da:	8c 84       	ldd	r8, Y+12	; 0x0c
    15dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    15de:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e0:	b9 84       	ldd	r11, Y+9	; 0x09
    15e2:	c8 84       	ldd	r12, Y+8	; 0x08
    15e4:	df 80       	ldd	r13, Y+7	; 0x07
    15e6:	ee 80       	ldd	r14, Y+6	; 0x06
    15e8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ea:	0c 81       	ldd	r16, Y+4	; 0x04
    15ec:	1b 81       	ldd	r17, Y+3	; 0x03
    15ee:	aa 81       	ldd	r26, Y+2	; 0x02
    15f0:	b9 81       	ldd	r27, Y+1	; 0x01
    15f2:	ce 0f       	add	r28, r30
    15f4:	d1 1d       	adc	r29, r1
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	ed 01       	movw	r28, r26
    1602:	08 95       	ret

00001604 <_exit>:
    1604:	f8 94       	cli

00001606 <__stop_program>:
    1606:	ff cf       	rjmp	.-2      	; 0x1606 <__stop_program>
