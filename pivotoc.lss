
pivotoc.a:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000016d6  0000176a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  008001d0  008001d0  0000183a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00001850  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a09  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000846  00000000  00000000  00003b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000488  00000000  00000000  00004354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000997  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011f7  00000000  00000000  00005173  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0000636a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ed       	ldi	r30, 0xD6	; 214
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3d       	cpi	r26, 0xD0	; 208
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 ed       	ldi	r26, 0xD0	; 208
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 34       	cpi	r26, 0x4A	; 74
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 81 05 	call	0xb02	; 0xb02 <main>
      9e:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_default>

000000a6 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
      a6:	86 b1       	in	r24, 0x06	; 6
}
      a8:	80 72       	andi	r24, 0x20	; 32
      aa:	08 95       	ret

000000ac <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
      ac:	45 9a       	sbi	0x08, 5	; 8
	OW_DIR_OUT();
      ae:	3d 9a       	sbi	0x07, 5	; 7
      b0:	08 95       	ret

000000b2 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      b8:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      ba:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
      bc:	45 98       	cbi	0x08, 5	; 8
#endif
		OW_DIR_OUT();    // drive bus low
      be:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	8a e0       	ldi	r24, 0x0A	; 10
      c2:	8a 95       	dec	r24
      c4:	f1 f7       	brne	.-4      	; 0xc2 <ow_bit_io_intern+0x10>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <ow_bit_io_intern+0x16>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
      c8:	cc 23       	and	r28, r28
      ca:	11 f0       	breq	.+4      	; 0xd0 <ow_bit_io_intern+0x1e>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
      cc:	3d 98       	cbi	0x07, 5	; 7
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
      ce:	45 9a       	sbi	0x08, 5	; 8
      d0:	85 e4       	ldi	r24, 0x45	; 69
      d2:	8a 95       	dec	r24
      d4:	f1 f7       	brne	.-4      	; 0xd2 <ow_bit_io_intern+0x20>
      d6:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
      d8:	35 9b       	sbis	0x06, 5	; 6
			b = 0;  // sample at end of read-timeslot
      da:	c0 e0       	ldi	r28, 0x00	; 0
      dc:	85 ee       	ldi	r24, 0xE5	; 229
      de:	8a 95       	dec	r24
      e0:	f1 f7       	brne	.-4      	; 0xde <ow_bit_io_intern+0x2c>
      e2:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
      e4:	45 9a       	sbi	0x08, 5	; 8
#endif
		OW_DIR_IN();
      e6:	3d 98       	cbi	0x07, 5	; 7
	
		if ( with_parasite_enable ) {
      e8:	61 11       	cpse	r22, r1
			ow_parasite_enable();
      ea:	0e 94 56 00 	call	0xac	; 0xac <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      ee:	df bf       	out	0x3f, r29	; 63
      f0:	85 e3       	ldi	r24, 0x35	; 53
      f2:	8a 95       	dec	r24
      f4:	f1 f7       	brne	.-4      	; 0xf2 <ow_bit_io_intern+0x40>
      f6:	00 00       	nop
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
      f8:	8c 2f       	mov	r24, r28
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
     100:	3d 98       	cbi	0x07, 5	; 7
     102:	08 95       	ret

00000104 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     104:	45 98       	cbi	0x08, 5	; 8
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     106:	3d 9a       	sbi	0x07, 5	; 7
     108:	8f e7       	ldi	r24, 0x7F	; 127
     10a:	97 e0       	ldi	r25, 0x07	; 7
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <ow_reset+0x8>
     110:	00 c0       	rjmp	.+0      	; 0x112 <ow_reset+0xe>
     112:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     114:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     116:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     118:	3d 98       	cbi	0x07, 5	; 7
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     11a:	45 9a       	sbi	0x08, 5	; 8
     11c:	ef ef       	ldi	r30, 0xFF	; 255
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	31 97       	sbiw	r30, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <ow_reset+0x1c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <ow_reset+0x22>
     126:	00 00       	nop
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     128:	86 b1       	in	r24, 0x06	; 6
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12a:	9f bf       	out	0x3f, r25	; 63
     12c:	ef e7       	ldi	r30, 0x7F	; 127
     12e:	f6 e0       	ldi	r31, 0x06	; 6
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <ow_reset+0x2c>
     134:	00 c0       	rjmp	.+0      	; 0x136 <ow_reset+0x32>
     136:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     138:	35 9b       	sbis	0x06, 5	; 6
     13a:	02 c0       	rjmp	.+4      	; 0x140 <ow_reset+0x3c>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     140:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
     142:	08 95       	ret

00000144 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	81 70       	andi	r24, 0x01	; 1
     148:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
}
     14c:	08 95       	ret

0000014e <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	c8 2f       	mov	r28, r24
     154:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     156:	8c 2f       	mov	r24, r28
     158:	81 70       	andi	r24, 0x01	; 1
     15a:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
		b >>= 1;
     15e:	c6 95       	lsr	r28
		if( j ) {
     160:	81 11       	cpse	r24, r1
			b |= 0x80;
     162:	c0 68       	ori	r28, 0x80	; 128
     164:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     166:	b9 f7       	brne	.-18     	; 0x156 <ow_byte_wr+0x8>
	
	return b;
}
     168:	8c 2f       	mov	r24, r28
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     176:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     178:	d1 30       	cpi	r29, 0x01	; 1
     17a:	31 f0       	breq	.+12     	; 0x188 <ow_byte_wr_with_parasite_enable+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8c 2f       	mov	r24, r28
     180:	81 70       	andi	r24, 0x01	; 1
     182:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
     186:	05 c0       	rjmp	.+10     	; 0x192 <ow_byte_wr_with_parasite_enable+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	8c 2f       	mov	r24, r28
     18c:	81 70       	andi	r24, 0x01	; 1
     18e:	0e 94 59 00 	call	0xb2	; 0xb2 <ow_bit_io_intern>
		}
		b >>= 1;
     192:	c6 95       	lsr	r28
		if( j ) {
     194:	81 11       	cpse	r24, r1
			b |= 0x80;
     196:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     198:	d1 50       	subi	r29, 0x01	; 1
     19a:	71 f7       	brne	.-36     	; 0x178 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     19c:	8c 2f       	mov	r24, r28
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	e8 2e       	mov	r14, r24
     1b2:	eb 01       	movw	r28, r22
     1b4:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     1b6:	0e 94 82 00 	call	0x104	; 0x104 <ow_reset>

	if( id ) {
     1ba:	20 97       	sbiw	r28, 0x00	; 0
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     1be:	85 e5       	ldi	r24, 0x55	; 85
     1c0:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
     1c4:	8e 01       	movw	r16, r28
     1c6:	08 5f       	subi	r16, 0xF8	; 248
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     1ca:	89 91       	ld	r24, Y+
     1cc:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
			id++;
		} while( --i );
     1d0:	c0 17       	cp	r28, r16
     1d2:	d1 07       	cpc	r29, r17
     1d4:	d1 f7       	brne	.-12     	; 0x1ca <ow_command_intern+0x26>
     1d6:	03 c0       	rjmp	.+6      	; 0x1de <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     1d8:	8c ec       	ldi	r24, 0xCC	; 204
     1da:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     1de:	ff 20       	and	r15, r15
     1e0:	21 f0       	breq	.+8      	; 0x1ea <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     1e2:	8e 2d       	mov	r24, r14
     1e4:	0e 94 b8 00 	call	0x170	; 0x170 <ow_byte_wr_with_parasite_enable>
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     1ea:	8e 2d       	mov	r24, r14
     1ec:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	}
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	08 95       	ret

000001fe <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
}
     204:	08 95       	ret

00000206 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	e8 2e       	mov	r14, r24
     216:	eb 01       	movw	r28, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     218:	0e 94 82 00 	call	0x104	; 0x104 <ow_reset>
     21c:	81 11       	cpse	r24, r1
     21e:	27 c0       	rjmp	.+78     	; 0x26e <ow_rom_search+0x68>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     220:	80 ef       	ldi	r24, 0xF0	; 240
     222:	0e 94 a7 00 	call	0x14e	; 0x14e <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     226:	d1 2c       	mov	r13, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     228:	10 e4       	ldi	r17, 0x40	; 64
     22a:	0f 2e       	mov	r0, r31
     22c:	f8 ef       	ldi	r31, 0xF8	; 248
     22e:	ff 2e       	mov	r15, r31
     230:	f0 2d       	mov	r31, r0
     232:	f1 0e       	add	r15, r17
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
     23a:	08 2f       	mov	r16, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <ow_rom_search+0x46>
				if( b ) {               // 0b11
     246:	00 23       	and	r16, r16
     248:	c1 f0       	breq	.+48     	; 0x27a <ow_rom_search+0x74>
     24a:	13 c0       	rjmp	.+38     	; 0x272 <ow_rom_search+0x6c>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     24c:	01 11       	cpse	r16, r1
     24e:	21 c0       	rjmp	.+66     	; 0x292 <ow_rom_search+0x8c>
					if( diff > i || ((*id & 1) && diff != i) ) {
     250:	1e 15       	cp	r17, r14
     252:	d0 f0       	brcs	.+52     	; 0x288 <ow_rom_search+0x82>
     254:	98 81       	ld	r25, Y
     256:	90 ff       	sbrs	r25, 0
     258:	10 c0       	rjmp	.+32     	; 0x27a <ow_rom_search+0x74>
     25a:	e1 12       	cpse	r14, r17
     25c:	18 c0       	rjmp	.+48     	; 0x28e <ow_rom_search+0x88>
     25e:	0d c0       	rjmp	.+26     	; 0x27a <ow_rom_search+0x74>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     260:	11 50       	subi	r17, 0x01	; 1
			
		} while( --j );
     262:	1f 11       	cpse	r17, r15
     264:	e7 cf       	rjmp	.-50     	; 0x234 <ow_rom_search+0x2e>
		
		id++;                           // next byte
     266:	21 96       	adiw	r28, 0x01	; 1
	
	} while( i );
     268:	11 11       	cpse	r17, r1
     26a:	df cf       	rjmp	.-66     	; 0x22a <ow_rom_search+0x24>
     26c:	04 c0       	rjmp	.+8      	; 0x276 <ow_rom_search+0x70>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	18 c0       	rjmp	.+48     	; 0x2a2 <ow_rom_search+0x9c>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     272:	8e ef       	ldi	r24, 0xFE	; 254
     274:	16 c0       	rjmp	.+44     	; 0x2a2 <ow_rom_search+0x9c>
     276:	8d 2d       	mov	r24, r13
     278:	14 c0       	rjmp	.+40     	; 0x2a2 <ow_rom_search+0x9c>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     27a:	80 2f       	mov	r24, r16
     27c:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
			*id >>= 1;
     280:	98 81       	ld	r25, Y
     282:	96 95       	lsr	r25
     284:	98 83       	st	Y, r25
     286:	ec cf       	rjmp	.-40     	; 0x260 <ow_rom_search+0x5a>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     288:	d1 2e       	mov	r13, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     28a:	01 e0       	ldi	r16, 0x01	; 1
     28c:	02 c0       	rjmp	.+4      	; 0x292 <ow_rom_search+0x8c>
						next_diff = i;  // next pass 0
     28e:	d1 2e       	mov	r13, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     290:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     292:	80 2f       	mov	r24, r16
     294:	0e 94 a2 00 	call	0x144	; 0x144 <ow_bit_io>
			*id >>= 1;
     298:	98 81       	ld	r25, Y
     29a:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     29c:	90 68       	ori	r25, 0x80	; 128
     29e:	98 83       	st	Y, r25
     2a0:	df cf       	rjmp	.-66     	; 0x260 <ow_rom_search+0x5a>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	08 95       	ret

000002b2 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ow_command_intern>
     2b8:	08 95       	ret

000002ba <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ow_command_intern>
     2c0:	08 95       	ret

000002c2 <_Z17DisplayFrontaPushh>:
void DisplayFrontaPush(uint8_t novy_stav)
{
	//pridame stav na konec pole (doufam ze nenastane pripad, aby se pole nekdy preplnilo)
	//to pak nevim jestli je lepci diskardovat prvni a nebo posledni polozku
	//ted se holt kdyztak nahradi dycky ta posledni
	display_fronta[display_fronta_len] = novy_stav;
     2c2:	e0 91 fd 01 	lds	r30, 0x01FD
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e2 50       	subi	r30, 0x02	; 2
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	80 83       	st	Z, r24
	display_fronta_len++;
     2ce:	80 91 fd 01 	lds	r24, 0x01FD
     2d2:	8f 5f       	subi	r24, 0xFF	; 255
     2d4:	80 93 fd 01 	sts	0x01FD, r24
	if (display_fronta_len == DISPLAY_FRONTA_MAXLEN) display_fronta_len--;
     2d8:	80 91 fd 01 	lds	r24, 0x01FD
     2dc:	85 30       	cpi	r24, 0x05	; 5
     2de:	29 f4       	brne	.+10     	; 0x2ea <_Z17DisplayFrontaPushh+0x28>
     2e0:	80 91 fd 01 	lds	r24, 0x01FD
     2e4:	81 50       	subi	r24, 0x01	; 1
     2e6:	80 93 fd 01 	sts	0x01FD, r24
     2ea:	08 95       	ret

000002ec <_Z16DisplayFrontaPopv>:
{
	//vratime stav na pozici 0 a cele pole pak posuneme o jednu niz cimz se puvodni nulova pozice prepise
	//a nakonec jednu nulu vlozime

	//asi muzem rict, ze kdyz je pole prazdne, vracime automaticky stav NIC
	if (display_fronta_len == 0) return STAV_DISPLEJE_NIC;
     2ec:	80 91 fd 01 	lds	r24, 0x01FD
     2f0:	88 23       	and	r24, r24
     2f2:	11 f1       	breq	.+68     	; 0x338 <_Z16DisplayFrontaPopv+0x4c>

	uint8_t vratit = display_fronta[0];
     2f4:	80 91 fe 01 	lds	r24, 0x01FE
	for (uint8_t i=0; i < display_fronta_len; i++)
     2f8:	90 91 fd 01 	lds	r25, 0x01FD
     2fc:	99 23       	and	r25, r25
     2fe:	81 f0       	breq	.+32     	; 0x320 <_Z16DisplayFrontaPopv+0x34>
     300:	90 e0       	ldi	r25, 0x00	; 0
	{
		display_fronta[i] = display_fronta[i+1];
     302:	29 2f       	mov	r18, r25
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	e1 50       	subi	r30, 0x01	; 1
     30a:	fe 4f       	sbci	r31, 0xFE	; 254
     30c:	40 81       	ld	r20, Z
     30e:	f9 01       	movw	r30, r18
     310:	e2 50       	subi	r30, 0x02	; 2
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	40 83       	st	Z, r20

	//asi muzem rict, ze kdyz je pole prazdne, vracime automaticky stav NIC
	if (display_fronta_len == 0) return STAV_DISPLEJE_NIC;

	uint8_t vratit = display_fronta[0];
	for (uint8_t i=0; i < display_fronta_len; i++)
     316:	9f 5f       	subi	r25, 0xFF	; 255
     318:	20 91 fd 01 	lds	r18, 0x01FD
     31c:	92 17       	cp	r25, r18
     31e:	88 f3       	brcs	.-30     	; 0x302 <_Z16DisplayFrontaPopv+0x16>
	{
		display_fronta[i] = display_fronta[i+1];
	}

	display_fronta[display_fronta_len] = STAV_DISPLEJE_NIC;
     320:	e0 91 fd 01 	lds	r30, 0x01FD
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	e2 50       	subi	r30, 0x02	; 2
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	10 82       	st	Z, r1
	display_fronta_len--;
     32c:	90 91 fd 01 	lds	r25, 0x01FD
     330:	91 50       	subi	r25, 0x01	; 1
     332:	90 93 fd 01 	sts	0x01FD, r25

	return vratit;
     336:	08 95       	ret
{
	//vratime stav na pozici 0 a cele pole pak posuneme o jednu niz cimz se puvodni nulova pozice prepise
	//a nakonec jednu nulu vlozime

	//asi muzem rict, ze kdyz je pole prazdne, vracime automaticky stav NIC
	if (display_fronta_len == 0) return STAV_DISPLEJE_NIC;
     338:	80 e0       	ldi	r24, 0x00	; 0

	display_fronta[display_fronta_len] = STAV_DISPLEJE_NIC;
	display_fronta_len--;

	return vratit;
}
     33a:	08 95       	ret

0000033c <_Z17PrekreslitDisplayh>:

void PrekreslitDisplay(uint8_t novy_stav)
{
     33c:	08 95       	ret

0000033e <_Z12SetRegistersv>:

#ifdef COMPILE_AVR
void SetRegisters(void)
{
  //configure uart0  (57600, 8bits, no parity, 1 stop bit)
  UBRR0H = 0;
     33e:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 16;
     342:	80 e1       	ldi	r24, 0x10	; 16
     344:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     34e:	88 e1       	ldi	r24, 0x18	; 24
     350:	80 93 c1 00 	sts	0x00C1, r24
  
  //timer0 10ms period, interrupt enable
  //prescaler 1024, count to 156
  OCR0A = 156;
     354:	8c e9       	ldi	r24, 0x9C	; 156
     356:	87 bd       	out	0x27, r24	; 39
  OCR0B = 170;
     358:	8a ea       	ldi	r24, 0xAA	; 170
     35a:	88 bd       	out	0x28, r24	; 40
  TCCR0A = 2;
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	84 bd       	out	0x24, r24	; 36
  TCCR0B = 5;
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	95 bd       	out	0x25, r25	; 37
  TIMSK0 = 2;
     364:	80 93 6e 00 	sts	0x006E, r24
     368:	08 95       	ret

0000036a <_Z14USART_TransmitPch>:
  //PRR = ( _BV(PRTWI) | _BV(PRTIM1) | _BV(PRTIM2) ) ;
}

//======================================================
void USART_Transmit( char *data, uint8_t len )
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
  for (uint8_t i=0; i < len; i++)
     36e:	66 23       	and	r22, r22
     370:	81 f0       	breq	.+32     	; 0x392 <_Z14USART_TransmitPch+0x28>
     372:	28 2f       	mov	r18, r24
     374:	a8 2f       	mov	r26, r24
     376:	b9 2f       	mov	r27, r25
  {
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
     378:	e0 ec       	ldi	r30, 0xC0	; 192
     37a:	f0 e0       	ldi	r31, 0x00	; 0
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
     37c:	c6 ec       	ldi	r28, 0xC6	; 198
     37e:	d0 e0       	ldi	r29, 0x00	; 0
void USART_Transmit( char *data, uint8_t len )
{
  for (uint8_t i=0; i < len; i++)
  {
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
     380:	80 81       	ld	r24, Z
     382:	85 ff       	sbrs	r24, 5
     384:	fd cf       	rjmp	.-6      	; 0x380 <_Z14USART_TransmitPch+0x16>
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
     386:	8d 91       	ld	r24, X+
     388:	88 83       	st	Y, r24
     38a:	8a 2f       	mov	r24, r26
     38c:	82 1b       	sub	r24, r18
}

//======================================================
void USART_Transmit( char *data, uint8_t len )
{
  for (uint8_t i=0; i < len; i++)
     38e:	86 17       	cp	r24, r22
     390:	b8 f3       	brcs	.-18     	; 0x380 <_Z14USART_TransmitPch+0x16>
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
    /* Put data into buffer, sends the data */
    UDR0 = data[i];
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <__vector_14>:

//======================================================
ISR(TIMER0_COMPA_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
     3a4:	9f 93       	push	r25
  	longTimer++;
     3a6:	80 91 08 02 	lds	r24, 0x0208
     3aa:	90 91 09 02 	lds	r25, 0x0209
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	90 93 09 02 	sts	0x0209, r25
     3b4:	80 93 08 02 	sts	0x0208, r24
		bylTimer = true;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 06 02 	sts	0x0206, r24
}
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_default>:

ISR(BADISR_vect) { //just for case
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
  __asm__("nop\n\t");
     3d6:	00 00       	nop
}
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <_Z10VynulujCiph>:
#endif

//======================================================
void VynulujCip(uint8_t id)
{
	VYTOCENE_IMPULZY[id] = 0;
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	fc 01       	movw	r30, r24
     3ea:	eb 5c       	subi	r30, 0xCB	; 203
     3ec:	fd 4f       	sbci	r31, 0xFD	; 253
     3ee:	11 82       	std	Z+1, r1	; 0x01
     3f0:	10 82       	st	Z, r1
	AKUMULOVANE_IMPULZY[id] = 0;
     3f2:	fc 01       	movw	r30, r24
     3f4:	e5 5d       	subi	r30, 0xD5	; 213
     3f6:	fd 4f       	sbci	r31, 0xFD	; 253
     3f8:	11 82       	std	Z+1, r1	; 0x01
     3fa:	10 82       	st	Z, r1
	AKUMULOVANA_CENA[id] = 0;
     3fc:	fc 01       	movw	r30, r24
     3fe:	ef 5d       	subi	r30, 0xDF	; 223
     400:	fd 4f       	sbci	r31, 0xFD	; 253
     402:	11 82       	std	Z+1, r1	; 0x01
     404:	10 82       	st	Z, r1
     406:	08 95       	ret

00000408 <_Z18ResetujVsechnyCipyv>:
}

//======================================================
void ResetujVsechnyCipy(void)
{
     408:	cf 93       	push	r28
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     40a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		VynulujCip(cip);
     40c:	8c 2f       	mov	r24, r28
     40e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z10VynulujCiph>
}

//======================================================
void ResetujVsechnyCipy(void)
{
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     412:	cf 5f       	subi	r28, 0xFF	; 255
     414:	c5 30       	cpi	r28, 0x05	; 5
     416:	d1 f7       	brne	.-12     	; 0x40c <_Z18ResetujVsechnyCipyv+0x4>
	{
		VynulujCip(cip);
	}

	CELKOVE_IMPULZY = 0;
     418:	10 92 20 02 	sts	0x0220, r1
     41c:	10 92 1f 02 	sts	0x021F, r1
}	
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <_Z12AkumulujCenuh>:

//======================================================
void AkumulujCenu(uint8_t cip)
{
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
	uint16_t cena = VYTOCENE_IMPULZY[cip] * CENA_ZA_IMPULZ * 100; //je to na halire
     43c:	08 2f       	mov	r16, r24
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	00 0f       	add	r16, r16
     442:	11 1f       	adc	r17, r17
     444:	e8 01       	movw	r28, r16
     446:	cb 5c       	subi	r28, 0xCB	; 203
     448:	dd 4f       	sbci	r29, 0xFD	; 253
     44a:	68 81       	ld	r22, Y
     44c:	79 81       	ldd	r23, Y+1	; 0x01
     44e:	80 90 18 02 	lds	r8, 0x0218
     452:	90 90 19 02 	lds	r9, 0x0219
     456:	a0 90 1a 02 	lds	r10, 0x021A
     45a:	b0 90 1b 02 	lds	r11, 0x021B
	AKUMULOVANA_CENA[cip] += cena;
     45e:	c8 01       	movw	r24, r16
     460:	8f 5d       	subi	r24, 0xDF	; 223
     462:	9d 4f       	sbci	r25, 0xFD	; 253
     464:	7c 01       	movw	r14, r24
     466:	fc 01       	movw	r30, r24
     468:	c0 80       	ld	r12, Z
     46a:	d1 80       	ldd	r13, Z+1	; 0x01
}	

//======================================================
void AkumulujCenu(uint8_t cip)
{
	uint16_t cena = VYTOCENE_IMPULZY[cip] * CENA_ZA_IMPULZ * 100; //je to na halire
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     474:	a5 01       	movw	r20, r10
     476:	94 01       	movw	r18, r8
     478:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	48 ec       	ldi	r20, 0xC8	; 200
     482:	52 e4       	ldi	r21, 0x42	; 66
     484:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     488:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixunssfsi>
	AKUMULOVANA_CENA[cip] += cena;
     48c:	6c 0d       	add	r22, r12
     48e:	7d 1d       	adc	r23, r13
     490:	f7 01       	movw	r30, r14
     492:	71 83       	std	Z+1, r23	; 0x01
     494:	60 83       	st	Z, r22
	AKUMULOVANE_IMPULZY[cip] += VYTOCENE_IMPULZY[cip];
     496:	88 81       	ld	r24, Y
     498:	99 81       	ldd	r25, Y+1	; 0x01
     49a:	f8 01       	movw	r30, r16
     49c:	e5 5d       	subi	r30, 0xD5	; 213
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	20 81       	ld	r18, Z
     4a2:	31 81       	ldd	r19, Z+1	; 0x01
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	80 83       	st	Z, r24
	VYTOCENE_IMPULZY[cip] = 0;
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	18 82       	st	Y, r1
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	9f 90       	pop	r9
     4c6:	8f 90       	pop	r8
     4c8:	08 95       	ret

000004ca <_Z8ZmenCenuj>:

//======================================================
void ZmenCenu(uint16_t nova_cena)
{
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	d8 2f       	mov	r29, r24
	//prepocitame vytocene impulzy na cenu
	//tu ulozime do akumulovane ceny
	//pak preneseme vytocene impulzy do akumulovanych
	//vynulujeme vytocene impulzy

	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		AkumulujCenu(cip);
     4da:	8c 2f       	mov	r24, r28
     4dc:	0e 94 12 02 	call	0x424	; 0x424 <_Z12AkumulujCenuh>
	//prepocitame vytocene impulzy na cenu
	//tu ulozime do akumulovane ceny
	//pak preneseme vytocene impulzy do akumulovanych
	//vynulujeme vytocene impulzy

	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     4e0:	cf 5f       	subi	r28, 0xFF	; 255
     4e2:	c5 30       	cpi	r28, 0x05	; 5
     4e4:	d1 f7       	brne	.-12     	; 0x4da <_Z8ZmenCenuj+0x10>
	{
		AkumulujCenu(cip);
	}

	//a ted nastavime novou cenu piva
	CENA_PIVA = nova_cena;
     4e6:	d0 93 1e 02 	sts	0x021E, r29
	//nova cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
     4ea:	60 91 1e 02 	lds	r22, 0x021E
     4ee:	c0 91 1c 02 	lds	r28, 0x021C
     4f2:	d0 91 1d 02 	lds	r29, 0x021D
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	66 0f       	add	r22, r22
     4fa:	77 1f       	adc	r23, r23
     4fc:	88 27       	eor	r24, r24
     4fe:	77 fd       	sbrc	r23, 7
     500:	80 95       	com	r24
     502:	98 2f       	mov	r25, r24
     504:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatsisf>
     508:	6b 01       	movw	r12, r22
     50a:	7c 01       	movw	r14, r24
     50c:	be 01       	movw	r22, r28
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	c7 01       	movw	r24, r14
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     522:	60 93 18 02 	sts	0x0218, r22
     526:	70 93 19 02 	sts	0x0219, r23
     52a:	80 93 1a 02 	sts	0x021A, r24
     52e:	90 93 1b 02 	sts	0x021B, r25
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	08 95       	ret

00000540 <_Z8SaveDatav>:

//======================================================
void SaveData(void)
{
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	00 d0       	rcall	.+0      	; 0x550 <_Z8SaveDatav+0x10>
     550:	00 d0       	rcall	.+0      	; 0x552 <_Z8SaveDatav+0x12>
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
#ifdef COMPILE_AVR
	IntUnion_t volatile *p16;
	Int32Union_t volatile eep_dword;

	//mapovani musi byt stejne jako pro LoadData()
	eeprom_update_byte((uint8_t *)ADRESA_EE_CENA_PIVA, CENA_PIVA);
     556:	60 91 1e 02 	lds	r22, 0x021E
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__eeupd_byte_m328p>
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB, (*p16).lsb);
     562:	60 91 1c 02 	lds	r22, 0x021C
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__eeupd_byte_m328p>
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB, (*p16).msb);
     56e:	60 91 1d 02 	lds	r22, 0x021D
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__eeupd_byte_m328p>
     57a:	0f 2e       	mov	r0, r31
     57c:	f3 e0       	ldi	r31, 0x03	; 3
     57e:	ef 2e       	mov	r14, r31
     580:	f1 2c       	mov	r15, r1
     582:	f0 2d       	mov	r31, r0
     584:	00 e0       	ldi	r16, 0x00	; 0
     586:	10 e0       	ldi	r17, 0x00	; 0

	//cyklujeme pres vsechny cipy
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     588:	d1 2c       	mov	r13, r1
	{
		//nejdriv musime presunout vsechno do akumulovanych impulzu
		//a taky spocitat cenu a tu taky pricist do akumulovane
		//a pak teprve muzeme ukladat do eeprom
		AkumulujCenu(cip);
     58a:	8d 2d       	mov	r24, r13
     58c:	0e 94 12 02 	call	0x424	; 0x424 <_Z12AkumulujCenuh>
     590:	f8 01       	movw	r30, r16
     592:	e5 5d       	subi	r30, 0xD5	; 213
     594:	fd 4f       	sbci	r31, 0xFD	; 253

		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
		eep_dword.uint1.lsb = (*p16).lsb;
     596:	80 81       	ld	r24, Z
     598:	89 83       	std	Y+1, r24	; 0x01
		eep_dword.uint1.msb = (*p16).msb;
     59a:	81 81       	ldd	r24, Z+1	; 0x01
     59c:	8a 83       	std	Y+2, r24	; 0x02
     59e:	f8 01       	movw	r30, r16
     5a0:	ef 5d       	subi	r30, 0xDF	; 223
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		eep_dword.uint2.lsb = (*p16).lsb;
     5a4:	80 81       	ld	r24, Z
     5a6:	8b 83       	std	Y+3, r24	; 0x03
		eep_dword.uint2.msb = (*p16).msb;
     5a8:	81 81       	ldd	r24, Z+1	; 0x01
     5aa:	8c 83       	std	Y+4, r24	; 0x04

		eeprom_update_dword((uint32_t*)adresa, eep_dword.uint_long);
     5ac:	49 81       	ldd	r20, Y+1	; 0x01
     5ae:	5a 81       	ldd	r21, Y+2	; 0x02
     5b0:	6b 81       	ldd	r22, Y+3	; 0x03
     5b2:	7c 81       	ldd	r23, Y+4	; 0x04
     5b4:	c7 01       	movw	r24, r14
     5b6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__eeupd_dword_m328p>
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB, (*p16).lsb);
	eeprom_update_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB, (*p16).msb);

	//cyklujeme pres vsechny cipy
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     5ba:	d3 94       	inc	r13
     5bc:	0e 5f       	subi	r16, 0xFE	; 254
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	e8 0e       	add	r14, r24
     5c4:	f1 1c       	adc	r15, r1
     5c6:	85 e0       	ldi	r24, 0x05	; 5
     5c8:	d8 12       	cpse	r13, r24
     5ca:	df cf       	rjmp	.-66     	; 0x58a <_Z8SaveDatav+0x4a>
		eeprom_update_dword((uint32_t*)adresa, eep_dword.uint_long);

		adresa += 4; //posun se na dalsi pametove misto
	}
#endif
}
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	08 95       	ret

000005e4 <_Z8LoadDatav>:

//======================================================
void LoadData(void)
{
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <_Z8LoadDatav+0x16>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <_Z8LoadDatav+0x18>
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
#ifdef COMPILE_AVR
	IntUnion_t volatile *p16;
	Int32Union_t volatile eep_dword;

	CELKOVE_IMPULZY = 0;
     600:	10 92 20 02 	sts	0x0220, r1
     604:	10 92 1f 02 	sts	0x021F, r1
	//7,8 - impulzy zakaznika 1
	//atd...
	//u vsech 16bit dat je prvni LSB

	//nactem cenu a impulzy na litr
	CENA_PIVA = eeprom_read_byte((uint8_t *)ADRESA_EE_CENA_PIVA);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__eerd_byte_m328p>
     610:	80 93 1e 02 	sts	0x021E, r24
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	(*p16).lsb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__eerd_byte_m328p>
     61c:	0c e1       	ldi	r16, 0x1C	; 28
     61e:	12 e0       	ldi	r17, 0x02	; 2
     620:	f8 01       	movw	r30, r16
     622:	80 83       	st	Z, r24
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__eerd_byte_m328p>
     62c:	80 93 1d 02 	sts	0x021D, r24
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky
     630:	f8 01       	movw	r30, r16
     632:	80 81       	ld	r24, Z
     634:	8f 3f       	cpi	r24, 0xFF	; 255
     636:	09 f0       	breq	.+2      	; 0x63a <_Z8LoadDatav+0x56>
     638:	77 c0       	rjmp	.+238    	; 0x728 <_Z8LoadDatav+0x144>
     63a:	80 91 1d 02 	lds	r24, 0x021D
     63e:	8f 3f       	cpi	r24, 0xFF	; 255
     640:	09 f0       	breq	.+2      	; 0x644 <_Z8LoadDatav+0x60>
     642:	72 c0       	rjmp	.+228    	; 0x728 <_Z8LoadDatav+0x144>
     644:	6b c0       	rjmp	.+214    	; 0x71c <_Z8LoadDatav+0x138>

	//cykluj pres vsechny cipy a nacti jejich ulozena data
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		eep_dword.uint_long = eeprom_read_dword((uint32_t*)adresa);
     646:	c5 01       	movw	r24, r10
     648:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__eerd_dword_m328p>
     64c:	69 83       	std	Y+1, r22	; 0x01
     64e:	7a 83       	std	Y+2, r23	; 0x02
     650:	8b 83       	std	Y+3, r24	; 0x03
     652:	9c 83       	std	Y+4, r25	; 0x04
		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
     654:	c6 01       	movw	r24, r12
		(*p16).lsb = eep_dword.uint1.lsb;
     656:	29 81       	ldd	r18, Y+1	; 0x01
     658:	f7 01       	movw	r30, r14
     65a:	20 83       	st	Z, r18
		(*p16).msb = eep_dword.uint1.msb;
     65c:	2a 81       	ldd	r18, Y+2	; 0x02
     65e:	21 83       	std	Z+1, r18	; 0x01
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANE_IMPULZY[cip] = 0;
     660:	20 81       	ld	r18, Z
     662:	2f 3f       	cpi	r18, 0xFF	; 255
     664:	21 f4       	brne	.+8      	; 0x66e <_Z8LoadDatav+0x8a>
     666:	21 81       	ldd	r18, Z+1	; 0x01
     668:	2f 3f       	cpi	r18, 0xFF	; 255
     66a:	09 f4       	brne	.+2      	; 0x66e <_Z8LoadDatav+0x8a>
     66c:	6d c0       	rjmp	.+218    	; 0x748 <_Z8LoadDatav+0x164>

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		(*p16).lsb = eep_dword.uint2.lsb;
     66e:	2b 81       	ldd	r18, Y+3	; 0x03
     670:	f8 01       	movw	r30, r16
     672:	20 83       	st	Z, r18
		(*p16).msb = eep_dword.uint2.msb;
     674:	2c 81       	ldd	r18, Y+4	; 0x04
     676:	21 83       	std	Z+1, r18	; 0x01
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANA_CENA[cip] = 0;
     678:	20 81       	ld	r18, Z
     67a:	2f 3f       	cpi	r18, 0xFF	; 255
     67c:	21 f4       	brne	.+8      	; 0x686 <_Z8LoadDatav+0xa2>
     67e:	21 81       	ldd	r18, Z+1	; 0x01
     680:	2f 3f       	cpi	r18, 0xFF	; 255
     682:	09 f4       	brne	.+2      	; 0x686 <_Z8LoadDatav+0xa2>
     684:	69 c0       	rjmp	.+210    	; 0x758 <_Z8LoadDatav+0x174>

		adresa += 4; //posun se na dalsi pametove misto
		
		VYTOCENE_IMPULZY[cip] = 0;
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	fc 01       	movw	r30, r24
     68c:	eb 5c       	subi	r30, 0xCB	; 203
     68e:	fd 4f       	sbci	r31, 0xFD	; 253
     690:	11 82       	std	Z+1, r1	; 0x01
     692:	10 82       	st	Z, r1
		CELKOVE_IMPULZY += AKUMULOVANE_IMPULZY[cip];
     694:	fc 01       	movw	r30, r24
     696:	e5 5d       	subi	r30, 0xD5	; 213
     698:	fd 4f       	sbci	r31, 0xFD	; 253
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	80 91 1f 02 	lds	r24, 0x021F
     6a2:	90 91 20 02 	lds	r25, 0x0220
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	90 93 20 02 	sts	0x0220, r25
     6ae:	80 93 1f 02 	sts	0x021F, r24
     6b2:	ff ef       	ldi	r31, 0xFF	; 255
     6b4:	cf 1a       	sub	r12, r31
     6b6:	df 0a       	sbc	r13, r31
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	a8 0e       	add	r10, r24
     6bc:	b1 1c       	adc	r11, r1
     6be:	e2 e0       	ldi	r30, 0x02	; 2
     6c0:	ee 0e       	add	r14, r30
     6c2:	f1 1c       	adc	r15, r1
     6c4:	0e 5f       	subi	r16, 0xFE	; 254
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky

	//cykluj pres vsechny cipy a nacti jejich ulozena data
	uint8_t adresa = ADRESA_EE_CIPY_START;
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     6c8:	f5 e0       	ldi	r31, 0x05	; 5
     6ca:	cf 16       	cp	r12, r31
     6cc:	d1 04       	cpc	r13, r1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <_Z8LoadDatav+0xee>
     6d0:	ba cf       	rjmp	.-140    	; 0x646 <_Z8LoadDatav+0x62>
	(*p16).uint = 300;
	CENA_PIVA = 20;
#endif

	//cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
     6d2:	60 91 1e 02 	lds	r22, 0x021E
     6d6:	00 91 1c 02 	lds	r16, 0x021C
     6da:	10 91 1d 02 	lds	r17, 0x021D
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	66 0f       	add	r22, r22
     6e2:	77 1f       	adc	r23, r23
     6e4:	88 27       	eor	r24, r24
     6e6:	77 fd       	sbrc	r23, 7
     6e8:	80 95       	com	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatsisf>
     6f0:	6b 01       	movw	r12, r22
     6f2:	7c 01       	movw	r14, r24
     6f4:	b8 01       	movw	r22, r16
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     70a:	60 93 18 02 	sts	0x0218, r22
     70e:	70 93 19 02 	sts	0x0219, r23
     712:	80 93 1a 02 	sts	0x021A, r24
     716:	90 93 1b 02 	sts	0x021B, r25
     71a:	26 c0       	rjmp	.+76     	; 0x768 <_Z8LoadDatav+0x184>
	//nactem cenu a impulzy na litr
	CENA_PIVA = eeprom_read_byte((uint8_t *)ADRESA_EE_CENA_PIVA);
	p16 = (IntUnion_t*)&IMPULZY_NA_LITR;
	(*p16).lsb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_LSB);
	(*p16).msb = eeprom_read_byte((uint8_t *)ADRESA_EE_IMPULZY_NA_LITR_MSB);
	if (((*p16).lsb == 255) and ((*p16).msb == 255)) IMPULZY_NA_LITR = 300; //jen pro prvni nacteni cerstve eepromky
     71c:	8c e2       	ldi	r24, 0x2C	; 44
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	90 93 1d 02 	sts	0x021D, r25
     724:	80 93 1c 02 	sts	0x021C, r24
     728:	0f 2e       	mov	r0, r31
     72a:	fb e2       	ldi	r31, 0x2B	; 43
     72c:	ef 2e       	mov	r14, r31
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	ff 2e       	mov	r15, r31
     732:	f0 2d       	mov	r31, r0
     734:	01 e2       	ldi	r16, 0x21	; 33
     736:	12 e0       	ldi	r17, 0x02	; 2
#endif
}

//======================================================
void LoadData(void)
{
     738:	0f 2e       	mov	r0, r31
     73a:	f3 e0       	ldi	r31, 0x03	; 3
     73c:	af 2e       	mov	r10, r31
     73e:	b1 2c       	mov	r11, r1
     740:	f0 2d       	mov	r31, r0
     742:	c1 2c       	mov	r12, r1
     744:	d1 2c       	mov	r13, r1
     746:	7f cf       	rjmp	.-258    	; 0x646 <_Z8LoadDatav+0x62>
	{
		eep_dword.uint_long = eeprom_read_dword((uint32_t*)adresa);
		p16 = (IntUnion_t*)&AKUMULOVANE_IMPULZY[cip];
		(*p16).lsb = eep_dword.uint1.lsb;
		(*p16).msb = eep_dword.uint1.msb;
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANE_IMPULZY[cip] = 0;
     748:	f6 01       	movw	r30, r12
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e5 5d       	subi	r30, 0xD5	; 213
     750:	fd 4f       	sbci	r31, 0xFD	; 253
     752:	11 82       	std	Z+1, r1	; 0x01
     754:	10 82       	st	Z, r1
     756:	8b cf       	rjmp	.-234    	; 0x66e <_Z8LoadDatav+0x8a>

		p16 = (IntUnion_t*)&AKUMULOVANA_CENA[cip];
		(*p16).lsb = eep_dword.uint2.lsb;
		(*p16).msb = eep_dword.uint2.msb;
		if (((*p16).lsb == 255) and ((*p16).msb == 255)) AKUMULOVANA_CENA[cip] = 0;
     758:	fc 01       	movw	r30, r24
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ef 5d       	subi	r30, 0xDF	; 223
     760:	fd 4f       	sbci	r31, 0xFD	; 253
     762:	11 82       	std	Z+1, r1	; 0x01
     764:	10 82       	st	Z, r1
     766:	8f cf       	rjmp	.-226    	; 0x686 <_Z8LoadDatav+0xa2>
	CENA_PIVA = 20;
#endif

	//cena piva na impulz
	CENA_ZA_IMPULZ = float(2 * CENA_PIVA) / IMPULZY_NA_LITR;
}
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	08 95       	ret

00000786 <_Z15KontrolniSoucetPKh>:

//======================================================
uint8_t KontrolniSoucet(const uint8_t adresa[ADDR_LEN])
{
     786:	fc 01       	movw	r30, r24
     788:	98 e0       	ldi	r25, 0x08	; 8
	//cykluj pres vsecky znaky adresy cipu
	uint8_t kontrolni_soucet = 0;
     78a:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=0; i < 8; i++)
	{
		kontrolni_soucet += adresa[i];
     78c:	21 91       	ld	r18, Z+
     78e:	82 0f       	add	r24, r18
     790:	91 50       	subi	r25, 0x01	; 1
//======================================================
uint8_t KontrolniSoucet(const uint8_t adresa[ADDR_LEN])
{
	//cykluj pres vsecky znaky adresy cipu
	uint8_t kontrolni_soucet = 0;
	for(uint8_t i=0; i < 8; i++)
     792:	e1 f7       	brne	.-8      	; 0x78c <_Z15KontrolniSoucetPKh+0x6>
	{
		kontrolni_soucet += adresa[i];
	}
	
	return kontrolni_soucet;
}
     794:	08 95       	ret

00000796 <_Z8NajdiCipPKh>:
	}
}

//======================================================
uint8_t NajdiCip(const uint8_t adresa[ADDR_LEN])
{
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	8c 01       	movw	r16, r24
	uint8_t kontrolni_soucet = KontrolniSoucet(adresa);
     7a4:	0e 94 c3 03 	call	0x786	; 0x786 <_Z15KontrolniSoucetPKh>
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	d1 e0       	ldi	r29, 0x01	; 1
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	a8 01       	movw	r20, r16
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
			{
				if (adresa[i] != ADRESY_CIPU[cip][i])
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f7 e0       	ldi	r31, 0x07	; 7
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	f2 2e       	mov	r15, r18
	bool match;

	//cykluj pres vsechny kontrolni soucty a hledej match, potom porovnej adresu
	for (cip=0; cip < POCET_CIPU; cip++)
	{
		if (KONTROLNI_SOUCTY[cip] == kontrolni_soucet)
     7c0:	f9 01       	movw	r30, r18
     7c2:	e1 5c       	subi	r30, 0xC1	; 193
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	90 81       	ld	r25, Z
     7c8:	89 13       	cpse	r24, r25
     7ca:	10 c0       	rjmp	.+32     	; 0x7ec <_Z8NajdiCipPKh+0x56>
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
			{
				if (adresa[i] != ADRESY_CIPU[cip][i])
     7cc:	f8 01       	movw	r30, r16
     7ce:	60 81       	ld	r22, Z
     7d0:	98 81       	ld	r25, Y
     7d2:	69 13       	cpse	r22, r25
     7d4:	0b c0       	rjmp	.+22     	; 0x7ec <_Z8NajdiCipPKh+0x56>
     7d6:	da 01       	movw	r26, r20
     7d8:	fe 01       	movw	r30, r28
     7da:	31 96       	adiw	r30, 0x01	; 1
     7dc:	9e 2d       	mov	r25, r14
     7de:	7d 91       	ld	r23, X+
     7e0:	61 91       	ld	r22, Z+
     7e2:	76 13       	cpse	r23, r22
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <_Z8NajdiCipPKh+0x56>
     7e6:	91 50       	subi	r25, 0x01	; 1
	{
		if (KONTROLNI_SOUCTY[cip] == kontrolni_soucet)
		{
			match = true;
			//cykluj pres vsecky znaky adresy cipu
			for(uint8_t i=0; i < 8; i++)
     7e8:	d1 f7       	brne	.-12     	; 0x7de <_Z8NajdiCipPKh+0x48>
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <_Z8NajdiCipPKh+0x64>
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	28 96       	adiw	r28, 0x08	; 8
	uint8_t kontrolni_soucet = KontrolniSoucet(adresa);
	uint8_t cip;
	bool match;

	//cykluj pres vsechny kontrolni soucty a hledej match, potom porovnej adresu
	for (cip=0; cip < POCET_CIPU; cip++)
     7f2:	25 30       	cpi	r18, 0x05	; 5
     7f4:	31 05       	cpc	r19, r1
     7f6:	19 f7       	brne	.-58     	; 0x7be <_Z8NajdiCipPKh+0x28>
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <_Z8NajdiCipPKh+0x68>
     7fa:	8f 2d       	mov	r24, r15
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <_Z8NajdiCipPKh+0x6a>
		}
	}

	//sem se to dostane jen kdyz se projde cele pole a nic se nenajde,
	//takze vratime 255
	return(255);
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <_Z19ZobrazInfoCipSpravah>:

//======================================================
void ZobrazInfoCipSprava(uint8_t id)
{
     80e:	8f 92       	push	r8
     810:	9f 92       	push	r9
     812:	af 92       	push	r10
     814:	bf 92       	push	r11
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
	float litru = float(AKUMULOVANE_IMPULZY[id] + VYTOCENE_IMPULZY[id]) / IMPULZY_NA_LITR;
     826:	c8 2f       	mov	r28, r24
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	8e 01       	movw	r16, r28
     82c:	00 0f       	add	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	f8 01       	movw	r30, r16
     832:	e5 5d       	subi	r30, 0xD5	; 213
     834:	fd 4f       	sbci	r31, 0xFD	; 253
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	98 01       	movw	r18, r16
     83c:	2b 5c       	subi	r18, 0xCB	; 203
     83e:	3d 4f       	sbci	r19, 0xFD	; 253
     840:	79 01       	movw	r14, r18
     842:	f9 01       	movw	r30, r18
     844:	60 81       	ld	r22, Z
     846:	71 81       	ldd	r23, Z+1	; 0x01
     848:	c0 90 1c 02 	lds	r12, 0x021C
     84c:	d0 90 1d 02 	lds	r13, 0x021D
     850:	68 0f       	add	r22, r24
     852:	79 1f       	adc	r23, r25
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     85c:	4b 01       	movw	r8, r22
     85e:	5c 01       	movw	r10, r24
     860:	b6 01       	movw	r22, r12
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	c5 01       	movw	r24, r10
     870:	b4 01       	movw	r22, r8
     872:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     876:	b6 2e       	mov	r11, r22
     878:	a7 2e       	mov	r10, r23
     87a:	98 2e       	mov	r9, r24
     87c:	89 2e       	mov	r8, r25
	uint16_t cena = (VYTOCENE_IMPULZY[id] * CENA_ZA_IMPULZ * 100) + AKUMULOVANA_CENA[id]; //je to na halire
     87e:	f7 01       	movw	r30, r14
     880:	60 81       	ld	r22, Z
     882:	71 81       	ldd	r23, Z+1	; 0x01
     884:	c0 90 18 02 	lds	r12, 0x0218
     888:	d0 90 19 02 	lds	r13, 0x0219
     88c:	e0 90 1a 02 	lds	r14, 0x021A
     890:	f0 90 1b 02 	lds	r15, 0x021B
     894:	f8 01       	movw	r30, r16
     896:	ef 5d       	subi	r30, 0xDF	; 223
     898:	fd 4f       	sbci	r31, 0xFD	; 253
     89a:	00 81       	ld	r16, Z
     89c:	11 81       	ldd	r17, Z+1	; 0x01
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     8a6:	a7 01       	movw	r20, r14
     8a8:	96 01       	movw	r18, r12
     8aa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	48 ec       	ldi	r20, 0xC8	; 200
     8b4:	52 e4       	ldi	r21, 0x42	; 66
     8b6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
     8be:	b8 01       	movw	r22, r16
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 54 06 	call	0xca8	; 0xca8 <__addsf3>
     8d4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixunssfsi>
     8d8:	6b 01       	movw	r12, r22
     8da:	7c 01       	movw	r14, r24

	//cena total je v korunach a zaokrouhluje se nahoru
	uint16_t cena_total = (cena / 100);
     8dc:	9b 01       	movw	r18, r22
     8de:	36 95       	lsr	r19
     8e0:	27 95       	ror	r18
     8e2:	36 95       	lsr	r19
     8e4:	27 95       	ror	r18
     8e6:	ab e7       	ldi	r26, 0x7B	; 123
     8e8:	b4 e1       	ldi	r27, 0x14	; 20
     8ea:	0e 94 44 06 	call	0xc88	; 0xc88 <__umulhisi3>
     8ee:	96 95       	lsr	r25
     8f0:	87 95       	ror	r24
	if ((cena % 100) > 0) cena_total++;
     8f2:	44 e6       	ldi	r20, 0x64	; 100
     8f4:	48 9f       	mul	r20, r24
     8f6:	90 01       	movw	r18, r0
     8f8:	49 9f       	mul	r20, r25
     8fa:	30 0d       	add	r19, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	c2 16       	cp	r12, r18
     900:	d3 06       	cpc	r13, r19
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
     904:	01 96       	adiw	r24, 0x01	; 1

	printf(SCREEN_SPRAVA_ZAKAZNIK, id+1, litru, cena_total);
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	21 96       	adiw	r28, 0x01	; 1
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	88 e2       	ldi	r24, 0x28	; 40
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 3d 08 	call	0x107a	; 0x107a <printf>
     924:	8d b7       	in	r24, 0x3d	; 61
     926:	9e b7       	in	r25, 0x3e	; 62
     928:	0a 96       	adiw	r24, 0x0a	; 10
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	9e bf       	out	0x3e, r25	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	8d bf       	out	0x3d, r24	; 61
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	08 95       	ret

0000094e <_Z18ZobrazInfoCipVytochb>:

//======================================================
void ZobrazInfoCipVytoc(uint8_t id, bool both)
{
     94e:	7f 92       	push	r7
     950:	8f 92       	push	r8
     952:	9f 92       	push	r9
     954:	af 92       	push	r10
     956:	bf 92       	push	r11
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	a6 2e       	mov	r10, r22
	float litru = float(AKUMULOVANE_IMPULZY[id] + VYTOCENE_IMPULZY[id]) / IMPULZY_NA_LITR;
     96a:	c8 2f       	mov	r28, r24
     96c:	d0 e0       	ldi	r29, 0x00	; 0
     96e:	be 01       	movw	r22, r28
     970:	66 0f       	add	r22, r22
     972:	77 1f       	adc	r23, r23
     974:	fb 01       	movw	r30, r22
     976:	e5 5d       	subi	r30, 0xD5	; 213
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	fb 01       	movw	r30, r22
     980:	eb 5c       	subi	r30, 0xCB	; 203
     982:	fd 4f       	sbci	r31, 0xFD	; 253
     984:	60 81       	ld	r22, Z
     986:	71 81       	ldd	r23, Z+1	; 0x01
     988:	00 91 1c 02 	lds	r16, 0x021C
     98c:	10 91 1d 02 	lds	r17, 0x021D
     990:	68 0f       	add	r22, r24
     992:	79 1f       	adc	r23, r25
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
     9a0:	b8 01       	movw	r22, r16
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     9b6:	b6 2e       	mov	r11, r22
     9b8:	97 2e       	mov	r9, r23
     9ba:	88 2e       	mov	r8, r24
     9bc:	79 2e       	mov	r7, r25
	float nyni = float(prihlaseny_cip_impulzy) / IMPULZY_NA_LITR;
     9be:	60 91 0c 02 	lds	r22, 0x020C
     9c2:	70 91 0d 02 	lds	r23, 0x020D
     9c6:	00 91 1c 02 	lds	r16, 0x021C
     9ca:	10 91 1d 02 	lds	r17, 0x021D
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     9d6:	6b 01       	movw	r12, r22
     9d8:	7c 01       	movw	r14, r24
     9da:	b8 01       	movw	r22, r16
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     9f0:	16 2f       	mov	r17, r22
     9f2:	07 2f       	mov	r16, r23
     9f4:	f8 2e       	mov	r15, r24
     9f6:	e9 2e       	mov	r14, r25

	if (both == true)
     9f8:	aa 20       	and	r10, r10
     9fa:	69 f0       	breq	.+26     	; 0xa16 <_Z18ZobrazInfoCipVytochb+0xc8>
	{
		printf(SCREEN_VYCEP_ZAKAZNIK_L1, id+1);
     9fc:	21 96       	adiw	r28, 0x01	; 1
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	28 e6       	ldi	r18, 0x68	; 104
     a04:	31 e0       	ldi	r19, 0x01	; 1
     a06:	3f 93       	push	r19
     a08:	2f 93       	push	r18
     a0a:	0e 94 3d 08 	call	0x107a	; 0x107a <printf>
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
	}

	printf(SCREEN_VYCEP_ZAKAZNIK_L2, litru, nyni);
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	bf 92       	push	r11
     a26:	82 e5       	ldi	r24, 0x52	; 82
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 3d 08 	call	0x107a	; 0x107a <printf>
     a32:	8d b7       	in	r24, 0x3d	; 61
     a34:	9e b7       	in	r25, 0x3e	; 62
     a36:	0a 96       	adiw	r24, 0x0a	; 10
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	9e bf       	out	0x3e, r25	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	8d bf       	out	0x3d, r24	; 61
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	08 95       	ret

00000a5e <_Z9OdhlasCipv>:

//======================================================
void OdhlasCip(void)
{
	je_prihlaseno = false;
     a5e:	10 92 17 02 	sts	0x0217, r1
	prihlaseny_cip_id = 255;
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	80 93 16 02 	sts	0x0216, r24
	prihlaseny_cip_timeout = 0;
     a68:	10 92 0b 02 	sts	0x020B, r1
     a6c:	10 92 0a 02 	sts	0x020A, r1
	prihlaseny_cip_impulzy = 0;
     a70:	10 92 0d 02 	sts	0x020D, r1
     a74:	10 92 0c 02 	sts	0x020C, r1
	//sprintf((char *)displej_text, SCREEN_ZAKLADNI);
	DisplayFrontaPush(DISP_STAV_ZAKLADNI);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z17DisplayFrontaPushh>
	refresh_display = true;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 03 02 	sts	0x0203, r24
#ifdef COMPILE_AVR
	SOLENOID_OFF();
     a84:	5d 98       	cbi	0x0b, 5	; 11
     a86:	08 95       	ret

00000a88 <_Z9PrectiCipv>:
//pak zkusi cip najit a pripadne prihlasit
void PrectiCip(void)
{
#ifdef COMPILE_AVR

	if (ow_rom_search(OW_SEARCH_FIRST, (uint8_t *)prihlaseny_cip_adresa) == OW_LAST_DEVICE)
     a88:	6e e0       	ldi	r22, 0x0E	; 14
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	0e 94 03 01 	call	0x206	; 0x206 <ow_rom_search>
     a92:	81 11       	cpse	r24, r1
     a94:	35 c0       	rjmp	.+106    	; 0xb00 <_Z9PrectiCipv+0x78>
	{
		//cip byl detekovan na 1-wire a jeho data nactena, zkusime ho najit v databazi
		uint8_t nalezeny_cip = NajdiCip((uint8_t *)prihlaseny_cip_adresa);
     a96:	8e e0       	ldi	r24, 0x0E	; 14
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8NajdiCipPKh>
		if (nalezeny_cip < 255)
     a9e:	8f 3f       	cpi	r24, 0xFF	; 255
     aa0:	49 f0       	breq	.+18     	; 0xab4 <_Z9PrectiCipv+0x2c>
		{
			//cip mame v databazi, takze ho prihlasime (a pripadne odhlasime predchozi, nebo odhlasime i ten stejny)
			if ((je_prihlaseno == true) && (prihlaseny_cip_id == nalezeny_cip))
     aa2:	90 91 17 02 	lds	r25, 0x0217
     aa6:	99 23       	and	r25, r25
     aa8:	a9 f0       	breq	.+42     	; 0xad4 <_Z9PrectiCipv+0x4c>
     aaa:	90 91 16 02 	lds	r25, 0x0216
     aae:	98 13       	cpse	r25, r24
     ab0:	11 c0       	rjmp	.+34     	; 0xad4 <_Z9PrectiCipv+0x4c>
     ab2:	0d c0       	rjmp	.+26     	; 0xace <_Z9PrectiCipv+0x46>
			}
		}
		// Tento cip nemame v databazi, takze vypiseme hlasku
		else
		{
			sprintf((char *)displej_text, SCREEN_CIP_NEZNAMY);
     ab4:	83 e1       	ldi	r24, 0x13	; 19
     ab6:	ed e7       	ldi	r30, 0x7D	; 125
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	a0 ed       	ldi	r26, 0xD0	; 208
     abc:	b1 e0       	ldi	r27, 0x01	; 1
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
     ac2:	8a 95       	dec	r24
     ac4:	e1 f7       	brne	.-8      	; 0xabe <_Z9PrectiCipv+0x36>
		}
		
		refresh_display = true;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 03 02 	sts	0x0203, r24
     acc:	08 95       	ret
			//cip mame v databazi, takze ho prihlasime (a pripadne odhlasime predchozi, nebo odhlasime i ten stejny)
			if ((je_prihlaseno == true) && (prihlaseny_cip_id == nalezeny_cip))
			{
				//cip je stejny - takze ho jen odhlasime
				//TODO - mozna bude lepci misto odhlasovani prodlouzitrefreshovat timeout
				OdhlasCip();
     ace:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z9OdhlasCipv>
     ad2:	f9 cf       	rjmp	.-14     	; 0xac6 <_Z9PrectiCipv+0x3e>
			}
			else
			{
				//prihlasime novy (to odhlasi i stary)
				je_prihlaseno = true;
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	90 93 17 02 	sts	0x0217, r25
				prihlaseny_cip_id = nalezeny_cip;
     ada:	80 93 16 02 	sts	0x0216, r24
				prihlaseny_cip_timeout = PRIHLASENI_TIMEOUT;
     ade:	88 eb       	ldi	r24, 0xB8	; 184
     ae0:	9b e0       	ldi	r25, 0x0B	; 11
     ae2:	90 93 0b 02 	sts	0x020B, r25
     ae6:	80 93 0a 02 	sts	0x020A, r24
				prihlaseny_cip_impulzy = 0;
     aea:	10 92 0d 02 	sts	0x020D, r1
     aee:	10 92 0c 02 	sts	0x020C, r1
				SOLENOID_ON();
     af2:	5d 9a       	sbi	0x0b, 5	; 11
				ZobrazInfoCipVytoc(prihlaseny_cip_id, true);
     af4:	80 91 16 02 	lds	r24, 0x0216
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z18ZobrazInfoCipVytochb>
     afe:	e3 cf       	rjmp	.-58     	; 0xac6 <_Z9PrectiCipv+0x3e>
     b00:	08 95       	ret

00000b02 <main>:
//======================================================
//======================================================
//======================================================
int main (void)
{
	sprintf((char *)displej_text, SCREEN_INICIALIZACE);
     b02:	82 e1       	ldi	r24, 0x12	; 18
     b04:	ed eb       	ldi	r30, 0xBD	; 189
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	a0 ed       	ldi	r26, 0xD0	; 208
     b0a:	b1 e0       	ldi	r27, 0x01	; 1
     b0c:	01 90       	ld	r0, Z+
     b0e:	0d 92       	st	X+, r0
     b10:	8a 95       	dec	r24
     b12:	e1 f7       	brne	.-8      	; 0xb0c <main+0xa>

	LoadData();
     b14:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_Z8LoadDatav>
     b18:	00 e0       	ldi	r16, 0x00	; 0
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
inline void SpocitatKontrolniSoucty(void)
{
	//cykluj pres vsechny cipy
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
	{
		KONTROLNI_SOUCTY[cip] = KontrolniSoucet(ADRESY_CIPU[cip]);
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 c3 03 	call	0x786	; 0x786 <_Z15KontrolniSoucetPKh>
     b26:	fe 01       	movw	r30, r28
     b28:	e1 5c       	subi	r30, 0xC1	; 193
     b2a:	fd 4f       	sbci	r31, 0xFD	; 253
     b2c:	80 83       	st	Z, r24
     b2e:	21 96       	adiw	r28, 0x01	; 1
     b30:	08 5f       	subi	r16, 0xF8	; 248
     b32:	1f 4f       	sbci	r17, 0xFF	; 255

//======================================================
inline void SpocitatKontrolniSoucty(void)
{
	//cykluj pres vsechny cipy
	for (uint8_t cip=0; cip < POCET_CIPU; cip++)
     b34:	c5 30       	cpi	r28, 0x05	; 5
     b36:	d1 05       	cpc	r29, r1
     b38:	99 f7       	brne	.-26     	; 0xb20 <main+0x1e>

	LoadData();
	SpocitatKontrolniSoucty();

#ifdef COMPILE_AVR
	SetRegisters();
     b3a:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z12SetRegistersv>
	sei();
     b3e:	78 94       	sei
#endif

	aktualni_stav = STAV_NORMAL;
     b40:	c1 e0       	ldi	r28, 0x01	; 1
     b42:	c0 93 05 02 	sts	0x0205, r28
	display_posledni_stav = DISP_STAV_INICIALIZACE;
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	80 93 fc 01 	sts	0x01FC, r24
	//sprintf((char *)displej_text, SCREEN_ZAKLADNI);
	DisplayFrontaPush(DISP_STAV_ZAKLADNI);	
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z17DisplayFrontaPushh>
	refresh_display = true;
     b52:	c0 93 03 02 	sts	0x0203, r28


	//debug data
	uint8_t zak = 0;
	AKUMULOVANE_IMPULZY[zak] = 0;
     b56:	10 92 2c 02 	sts	0x022C, r1
     b5a:	10 92 2b 02 	sts	0x022B, r1
	AKUMULOVANA_CENA[zak] = 0;
     b5e:	10 92 22 02 	sts	0x0222, r1
     b62:	10 92 21 02 	sts	0x0221, r1
	VYTOCENE_IMPULZY[zak] = 388;
     b66:	c5 e3       	ldi	r28, 0x35	; 53
     b68:	d2 e0       	ldi	r29, 0x02	; 2
     b6a:	84 e8       	ldi	r24, 0x84	; 132
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	99 83       	std	Y+1, r25	; 0x01
     b70:	88 83       	st	Y, r24
	prihlaseny_cip_impulzy = 132;
     b72:	84 e8       	ldi	r24, 0x84	; 132
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 0d 02 	sts	0x020D, r25
     b7a:	80 93 0c 02 	sts	0x020C, r24

	printf("\n|--------|---------|\n");
     b7e:	80 e9       	ldi	r24, 0x90	; 144
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	ZobrazInfoCipVytoc(zak, true);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z18ZobrazInfoCipVytochb>
	printf("\n|--------|---------|\n");
     b8e:	80 e9       	ldi	r24, 0x90	; 144
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	ZobrazInfoCipSprava(zak);
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 07 04 	call	0x80e	; 0x80e <_Z19ZobrazInfoCipSpravah>
	printf("\n|--------|---------|\n\n");
     b9c:	86 ea       	ldi	r24, 0xA6	; 166
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>

	ZmenCenu(40);
     ba4:	88 e2       	ldi	r24, 0x28	; 40
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8ZmenCenuj>

	VYTOCENE_IMPULZY[zak] = 300;
     bac:	8c e2       	ldi	r24, 0x2C	; 44
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	99 83       	std	Y+1, r25	; 0x01
     bb2:	88 83       	st	Y, r24
	prihlaseny_cip_impulzy = 150;
     bb4:	86 e9       	ldi	r24, 0x96	; 150
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 0d 02 	sts	0x020D, r25
     bbc:	80 93 0c 02 	sts	0x020C, r24

	printf("\n|--------|---------|\n");
     bc0:	80 e9       	ldi	r24, 0x90	; 144
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	ZobrazInfoCipVytoc(zak, true);
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z18ZobrazInfoCipVytochb>
	printf("\n|--------|---------|\n");
     bd0:	80 e9       	ldi	r24, 0x90	; 144
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	ZobrazInfoCipSprava(zak);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 07 04 	call	0x80e	; 0x80e <_Z19ZobrazInfoCipSpravah>
	printf("\n|--------|---------|\n\n");
     bde:	86 ea       	ldi	r24, 0xA6	; 166
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
		}

		//uz je cas zkusit jestli je prilozen cip?
		if (timerCteniCipu == 0)
		{
			timerCteniCipu = CTENI_CIPU_TIMEOUT;
     be6:	c2 e3       	ldi	r28, 0x32	; 50

		//je potreba prekreslit display?
		//tohle by melo byt az na konci cyklu
		if ( (timerDisplay == 0) || (refresh_display) )
		{	
			timerDisplay = DISPLAY_REFRESH_TIME;
     be8:	d4 e6       	ldi	r29, 0x64	; 100
#ifdef COMPILE_AVR
	while(1) {

		//obsluha vsech timeru az tady misto aby se to delalo v preruseni
		//melo by to byt hned na zacatku cyklu, aby se podle toho pak zbytek podminek mohl zaridit
		if (bylTimer)
     bea:	80 91 06 02 	lds	r24, 0x0206
     bee:	88 23       	and	r24, r24
     bf0:	19 f1       	breq	.+70     	; 0xc38 <main+0x136>
		{
			bylTimer = false;
     bf2:	10 92 06 02 	sts	0x0206, r1
			if (prihlaseny_cip_timeout > 0) prihlaseny_cip_timeout--;
     bf6:	80 91 0a 02 	lds	r24, 0x020A
     bfa:	90 91 0b 02 	lds	r25, 0x020B
     bfe:	89 2b       	or	r24, r25
     c00:	49 f0       	breq	.+18     	; 0xc14 <main+0x112>
     c02:	80 91 0a 02 	lds	r24, 0x020A
     c06:	90 91 0b 02 	lds	r25, 0x020B
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	90 93 0b 02 	sts	0x020B, r25
     c10:	80 93 0a 02 	sts	0x020A, r24
			if (timerCteniCipu > 0) timerCteniCipu--;
     c14:	80 91 07 02 	lds	r24, 0x0207
     c18:	88 23       	and	r24, r24
     c1a:	29 f0       	breq	.+10     	; 0xc26 <main+0x124>
     c1c:	80 91 07 02 	lds	r24, 0x0207
     c20:	81 50       	subi	r24, 0x01	; 1
     c22:	80 93 07 02 	sts	0x0207, r24
			if (timerDisplay > 0) timerDisplay--;
     c26:	80 91 fb 01 	lds	r24, 0x01FB
     c2a:	88 23       	and	r24, r24
     c2c:	29 f0       	breq	.+10     	; 0xc38 <main+0x136>
     c2e:	80 91 fb 01 	lds	r24, 0x01FB
     c32:	81 50       	subi	r24, 0x01	; 1
     c34:	80 93 fb 01 	sts	0x01FB, r24
		}

		//kontrola a pripadne odhlaseni timeoutovaneho cipu
		if (je_prihlaseno)
     c38:	80 91 17 02 	lds	r24, 0x0217
     c3c:	88 23       	and	r24, r24
     c3e:	41 f0       	breq	.+16     	; 0xc50 <main+0x14e>
		{
			if (prihlaseny_cip_timeout == 0) OdhlasCip();
     c40:	80 91 0a 02 	lds	r24, 0x020A
     c44:	90 91 0b 02 	lds	r25, 0x020B
     c48:	89 2b       	or	r24, r25
     c4a:	11 f4       	brne	.+4      	; 0xc50 <main+0x14e>
     c4c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z9OdhlasCipv>
		}

		//uz je cas zkusit jestli je prilozen cip?
		if (timerCteniCipu == 0)
     c50:	80 91 07 02 	lds	r24, 0x0207
     c54:	81 11       	cpse	r24, r1
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <main+0x15e>
		{
			timerCteniCipu = CTENI_CIPU_TIMEOUT;
     c58:	c0 93 07 02 	sts	0x0207, r28
			PrectiCip();
     c5c:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z9PrectiCipv>
		}

		//je potreba prekreslit display?
		//tohle by melo byt az na konci cyklu
		if ( (timerDisplay == 0) || (refresh_display) )
     c60:	80 91 fb 01 	lds	r24, 0x01FB
     c64:	88 23       	and	r24, r24
     c66:	29 f0       	breq	.+10     	; 0xc72 <main+0x170>
     c68:	80 91 03 02 	lds	r24, 0x0203
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <main+0x170>
     c70:	bc cf       	rjmp	.-136    	; 0xbea <main+0xe8>
		{	
			timerDisplay = DISPLAY_REFRESH_TIME;
     c72:	d0 93 fb 01 	sts	0x01FB, r29

			uint8_t novy_stav = DisplayFrontaPop();
     c76:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z16DisplayFrontaPopv>
			//prekreslovat jen jestli je v poli neco jineho nez prazdno
			//jinak pouzijem minuly screen
			if (novy_stav == STAV_DISPLEJE_NIC) novy_stav = display_posledni_stav;	
     c7a:	81 11       	cpse	r24, r1
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <main+0x180>
     c7e:	80 91 fc 01 	lds	r24, 0x01FC
			PrekreslitDisplay(novy_stav);
			refresh_display = false;
     c82:	10 92 03 02 	sts	0x0203, r1
     c86:	b1 cf       	rjmp	.-158    	; 0xbea <main+0xe8>

00000c88 <__umulhisi3>:
     c88:	a2 9f       	mul	r26, r18
     c8a:	b0 01       	movw	r22, r0
     c8c:	b3 9f       	mul	r27, r19
     c8e:	c0 01       	movw	r24, r0
     c90:	a3 9f       	mul	r26, r19
     c92:	70 0d       	add	r23, r0
     c94:	81 1d       	adc	r24, r1
     c96:	11 24       	eor	r1, r1
     c98:	91 1d       	adc	r25, r1
     c9a:	b2 9f       	mul	r27, r18
     c9c:	70 0d       	add	r23, r0
     c9e:	81 1d       	adc	r24, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	91 1d       	adc	r25, r1
     ca4:	08 95       	ret

00000ca6 <__subsf3>:
     ca6:	50 58       	subi	r21, 0x80	; 128

00000ca8 <__addsf3>:
     ca8:	bb 27       	eor	r27, r27
     caa:	aa 27       	eor	r26, r26
     cac:	0e d0       	rcall	.+28     	; 0xcca <__addsf3x>
     cae:	48 c1       	rjmp	.+656    	; 0xf40 <__fp_round>
     cb0:	39 d1       	rcall	.+626    	; 0xf24 <__fp_pscA>
     cb2:	30 f0       	brcs	.+12     	; 0xcc0 <__addsf3+0x18>
     cb4:	3e d1       	rcall	.+636    	; 0xf32 <__fp_pscB>
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3+0x18>
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__addsf3+0x1e>
     cba:	9f 3f       	cpi	r25, 0xFF	; 255
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__addsf3+0x1a>
     cbe:	1e f4       	brtc	.+6      	; 0xcc6 <__addsf3+0x1e>
     cc0:	2e c1       	rjmp	.+604    	; 0xf1e <__fp_nan>
     cc2:	0e f4       	brtc	.+2      	; 0xcc6 <__addsf3+0x1e>
     cc4:	e0 95       	com	r30
     cc6:	e7 fb       	bst	r30, 7
     cc8:	24 c1       	rjmp	.+584    	; 0xf12 <__fp_inf>

00000cca <__addsf3x>:
     cca:	e9 2f       	mov	r30, r25
     ccc:	4a d1       	rcall	.+660    	; 0xf62 <__fp_split3>
     cce:	80 f3       	brcs	.-32     	; 0xcb0 <__addsf3+0x8>
     cd0:	ba 17       	cp	r27, r26
     cd2:	62 07       	cpc	r22, r18
     cd4:	73 07       	cpc	r23, r19
     cd6:	84 07       	cpc	r24, r20
     cd8:	95 07       	cpc	r25, r21
     cda:	18 f0       	brcs	.+6      	; 0xce2 <__addsf3x+0x18>
     cdc:	71 f4       	brne	.+28     	; 0xcfa <__addsf3x+0x30>
     cde:	9e f5       	brtc	.+102    	; 0xd46 <__addsf3x+0x7c>
     ce0:	62 c1       	rjmp	.+708    	; 0xfa6 <__fp_zero>
     ce2:	0e f4       	brtc	.+2      	; 0xce6 <__addsf3x+0x1c>
     ce4:	e0 95       	com	r30
     ce6:	0b 2e       	mov	r0, r27
     ce8:	ba 2f       	mov	r27, r26
     cea:	a0 2d       	mov	r26, r0
     cec:	0b 01       	movw	r0, r22
     cee:	b9 01       	movw	r22, r18
     cf0:	90 01       	movw	r18, r0
     cf2:	0c 01       	movw	r0, r24
     cf4:	ca 01       	movw	r24, r20
     cf6:	a0 01       	movw	r20, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	ff 27       	eor	r31, r31
     cfc:	59 1b       	sub	r21, r25
     cfe:	99 f0       	breq	.+38     	; 0xd26 <__addsf3x+0x5c>
     d00:	59 3f       	cpi	r21, 0xF9	; 249
     d02:	50 f4       	brcc	.+20     	; 0xd18 <__addsf3x+0x4e>
     d04:	50 3e       	cpi	r21, 0xE0	; 224
     d06:	68 f1       	brcs	.+90     	; 0xd62 <__addsf3x+0x98>
     d08:	1a 16       	cp	r1, r26
     d0a:	f0 40       	sbci	r31, 0x00	; 0
     d0c:	a2 2f       	mov	r26, r18
     d0e:	23 2f       	mov	r18, r19
     d10:	34 2f       	mov	r19, r20
     d12:	44 27       	eor	r20, r20
     d14:	58 5f       	subi	r21, 0xF8	; 248
     d16:	f3 cf       	rjmp	.-26     	; 0xcfe <__addsf3x+0x34>
     d18:	46 95       	lsr	r20
     d1a:	37 95       	ror	r19
     d1c:	27 95       	ror	r18
     d1e:	a7 95       	ror	r26
     d20:	f0 40       	sbci	r31, 0x00	; 0
     d22:	53 95       	inc	r21
     d24:	c9 f7       	brne	.-14     	; 0xd18 <__addsf3x+0x4e>
     d26:	7e f4       	brtc	.+30     	; 0xd46 <__addsf3x+0x7c>
     d28:	1f 16       	cp	r1, r31
     d2a:	ba 0b       	sbc	r27, r26
     d2c:	62 0b       	sbc	r22, r18
     d2e:	73 0b       	sbc	r23, r19
     d30:	84 0b       	sbc	r24, r20
     d32:	ba f0       	brmi	.+46     	; 0xd62 <__addsf3x+0x98>
     d34:	91 50       	subi	r25, 0x01	; 1
     d36:	a1 f0       	breq	.+40     	; 0xd60 <__addsf3x+0x96>
     d38:	ff 0f       	add	r31, r31
     d3a:	bb 1f       	adc	r27, r27
     d3c:	66 1f       	adc	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	c2 f7       	brpl	.-16     	; 0xd34 <__addsf3x+0x6a>
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <__addsf3x+0x98>
     d46:	ba 0f       	add	r27, r26
     d48:	62 1f       	adc	r22, r18
     d4a:	73 1f       	adc	r23, r19
     d4c:	84 1f       	adc	r24, r20
     d4e:	48 f4       	brcc	.+18     	; 0xd62 <__addsf3x+0x98>
     d50:	87 95       	ror	r24
     d52:	77 95       	ror	r23
     d54:	67 95       	ror	r22
     d56:	b7 95       	ror	r27
     d58:	f7 95       	ror	r31
     d5a:	9e 3f       	cpi	r25, 0xFE	; 254
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <__addsf3x+0x96>
     d5e:	b3 cf       	rjmp	.-154    	; 0xcc6 <__addsf3+0x1e>
     d60:	93 95       	inc	r25
     d62:	88 0f       	add	r24, r24
     d64:	08 f0       	brcs	.+2      	; 0xd68 <__addsf3x+0x9e>
     d66:	99 27       	eor	r25, r25
     d68:	ee 0f       	add	r30, r30
     d6a:	97 95       	ror	r25
     d6c:	87 95       	ror	r24
     d6e:	08 95       	ret

00000d70 <__divsf3>:
     d70:	0c d0       	rcall	.+24     	; 0xd8a <__divsf3x>
     d72:	e6 c0       	rjmp	.+460    	; 0xf40 <__fp_round>
     d74:	de d0       	rcall	.+444    	; 0xf32 <__fp_pscB>
     d76:	40 f0       	brcs	.+16     	; 0xd88 <__divsf3+0x18>
     d78:	d5 d0       	rcall	.+426    	; 0xf24 <__fp_pscA>
     d7a:	30 f0       	brcs	.+12     	; 0xd88 <__divsf3+0x18>
     d7c:	21 f4       	brne	.+8      	; 0xd86 <__divsf3+0x16>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	19 f0       	breq	.+6      	; 0xd88 <__divsf3+0x18>
     d82:	c7 c0       	rjmp	.+398    	; 0xf12 <__fp_inf>
     d84:	51 11       	cpse	r21, r1
     d86:	10 c1       	rjmp	.+544    	; 0xfa8 <__fp_szero>
     d88:	ca c0       	rjmp	.+404    	; 0xf1e <__fp_nan>

00000d8a <__divsf3x>:
     d8a:	eb d0       	rcall	.+470    	; 0xf62 <__fp_split3>
     d8c:	98 f3       	brcs	.-26     	; 0xd74 <__divsf3+0x4>

00000d8e <__divsf3_pse>:
     d8e:	99 23       	and	r25, r25
     d90:	c9 f3       	breq	.-14     	; 0xd84 <__divsf3+0x14>
     d92:	55 23       	and	r21, r21
     d94:	b1 f3       	breq	.-20     	; 0xd82 <__divsf3+0x12>
     d96:	95 1b       	sub	r25, r21
     d98:	55 0b       	sbc	r21, r21
     d9a:	bb 27       	eor	r27, r27
     d9c:	aa 27       	eor	r26, r26
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	38 f0       	brcs	.+14     	; 0xdb4 <__divsf3_pse+0x26>
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	44 1f       	adc	r20, r20
     db0:	aa 1f       	adc	r26, r26
     db2:	a9 f3       	breq	.-22     	; 0xd9e <__divsf3_pse+0x10>
     db4:	33 d0       	rcall	.+102    	; 0xe1c <__divsf3_pse+0x8e>
     db6:	0e 2e       	mov	r0, r30
     db8:	3a f0       	brmi	.+14     	; 0xdc8 <__divsf3_pse+0x3a>
     dba:	e0 e8       	ldi	r30, 0x80	; 128
     dbc:	30 d0       	rcall	.+96     	; 0xe1e <__divsf3_pse+0x90>
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	50 40       	sbci	r21, 0x00	; 0
     dc2:	e6 95       	lsr	r30
     dc4:	00 1c       	adc	r0, r0
     dc6:	ca f7       	brpl	.-14     	; 0xdba <__divsf3_pse+0x2c>
     dc8:	29 d0       	rcall	.+82     	; 0xe1c <__divsf3_pse+0x8e>
     dca:	fe 2f       	mov	r31, r30
     dcc:	27 d0       	rcall	.+78     	; 0xe1c <__divsf3_pse+0x8e>
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	bb 1f       	adc	r27, r27
     dd6:	26 17       	cp	r18, r22
     dd8:	37 07       	cpc	r19, r23
     dda:	48 07       	cpc	r20, r24
     ddc:	ab 07       	cpc	r26, r27
     dde:	b0 e8       	ldi	r27, 0x80	; 128
     de0:	09 f0       	breq	.+2      	; 0xde4 <__divsf3_pse+0x56>
     de2:	bb 0b       	sbc	r27, r27
     de4:	80 2d       	mov	r24, r0
     de6:	bf 01       	movw	r22, r30
     de8:	ff 27       	eor	r31, r31
     dea:	93 58       	subi	r25, 0x83	; 131
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	2a f0       	brmi	.+10     	; 0xdfa <__divsf3_pse+0x6c>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	68 f0       	brcs	.+26     	; 0xe10 <__divsf3_pse+0x82>
     df6:	8d c0       	rjmp	.+282    	; 0xf12 <__fp_inf>
     df8:	d7 c0       	rjmp	.+430    	; 0xfa8 <__fp_szero>
     dfa:	5f 3f       	cpi	r21, 0xFF	; 255
     dfc:	ec f3       	brlt	.-6      	; 0xdf8 <__divsf3_pse+0x6a>
     dfe:	98 3e       	cpi	r25, 0xE8	; 232
     e00:	dc f3       	brlt	.-10     	; 0xdf8 <__divsf3_pse+0x6a>
     e02:	86 95       	lsr	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f7 95       	ror	r31
     e0c:	9f 5f       	subi	r25, 0xFF	; 255
     e0e:	c9 f7       	brne	.-14     	; 0xe02 <__divsf3_pse+0x74>
     e10:	88 0f       	add	r24, r24
     e12:	91 1d       	adc	r25, r1
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	97 f9       	bld	r25, 7
     e1a:	08 95       	ret
     e1c:	e1 e0       	ldi	r30, 0x01	; 1
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	bb 1f       	adc	r27, r27
     e26:	62 17       	cp	r22, r18
     e28:	73 07       	cpc	r23, r19
     e2a:	84 07       	cpc	r24, r20
     e2c:	ba 07       	cpc	r27, r26
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <__divsf3_pse+0xaa>
     e30:	62 1b       	sub	r22, r18
     e32:	73 0b       	sbc	r23, r19
     e34:	84 0b       	sbc	r24, r20
     e36:	ba 0b       	sbc	r27, r26
     e38:	ee 1f       	adc	r30, r30
     e3a:	88 f7       	brcc	.-30     	; 0xe1e <__divsf3_pse+0x90>
     e3c:	e0 95       	com	r30
     e3e:	08 95       	ret

00000e40 <__fixunssfsi>:
     e40:	98 d0       	rcall	.+304    	; 0xf72 <__fp_splitA>
     e42:	88 f0       	brcs	.+34     	; 0xe66 <__fixunssfsi+0x26>
     e44:	9f 57       	subi	r25, 0x7F	; 127
     e46:	90 f0       	brcs	.+36     	; 0xe6c <__fixunssfsi+0x2c>
     e48:	b9 2f       	mov	r27, r25
     e4a:	99 27       	eor	r25, r25
     e4c:	b7 51       	subi	r27, 0x17	; 23
     e4e:	a0 f0       	brcs	.+40     	; 0xe78 <__fixunssfsi+0x38>
     e50:	d1 f0       	breq	.+52     	; 0xe86 <__fixunssfsi+0x46>
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	88 1f       	adc	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	1a f0       	brmi	.+6      	; 0xe62 <__fixunssfsi+0x22>
     e5c:	ba 95       	dec	r27
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <__fixunssfsi+0x12>
     e60:	12 c0       	rjmp	.+36     	; 0xe86 <__fixunssfsi+0x46>
     e62:	b1 30       	cpi	r27, 0x01	; 1
     e64:	81 f0       	breq	.+32     	; 0xe86 <__fixunssfsi+0x46>
     e66:	9f d0       	rcall	.+318    	; 0xfa6 <__fp_zero>
     e68:	b1 e0       	ldi	r27, 0x01	; 1
     e6a:	08 95       	ret
     e6c:	9c c0       	rjmp	.+312    	; 0xfa6 <__fp_zero>
     e6e:	67 2f       	mov	r22, r23
     e70:	78 2f       	mov	r23, r24
     e72:	88 27       	eor	r24, r24
     e74:	b8 5f       	subi	r27, 0xF8	; 248
     e76:	39 f0       	breq	.+14     	; 0xe86 <__fixunssfsi+0x46>
     e78:	b9 3f       	cpi	r27, 0xF9	; 249
     e7a:	cc f3       	brlt	.-14     	; 0xe6e <__fixunssfsi+0x2e>
     e7c:	86 95       	lsr	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b3 95       	inc	r27
     e84:	d9 f7       	brne	.-10     	; 0xe7c <__fixunssfsi+0x3c>
     e86:	3e f4       	brtc	.+14     	; 0xe96 <__fixunssfsi+0x56>
     e88:	90 95       	com	r25
     e8a:	80 95       	com	r24
     e8c:	70 95       	com	r23
     e8e:	61 95       	neg	r22
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	08 95       	ret

00000e98 <__floatunsisf>:
     e98:	e8 94       	clt
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <__floatsisf+0x12>

00000e9c <__floatsisf>:
     e9c:	97 fb       	bst	r25, 7
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__floatsisf+0x12>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	99 23       	and	r25, r25
     eb0:	a9 f0       	breq	.+42     	; 0xedc <__floatsisf+0x40>
     eb2:	f9 2f       	mov	r31, r25
     eb4:	96 e9       	ldi	r25, 0x96	; 150
     eb6:	bb 27       	eor	r27, r27
     eb8:	93 95       	inc	r25
     eba:	f6 95       	lsr	r31
     ebc:	87 95       	ror	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f1 11       	cpse	r31, r1
     ec6:	f8 cf       	rjmp	.-16     	; 0xeb8 <__floatsisf+0x1c>
     ec8:	fa f4       	brpl	.+62     	; 0xf08 <__floatsisf+0x6c>
     eca:	bb 0f       	add	r27, r27
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__floatsisf+0x36>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	1b c0       	rjmp	.+54     	; 0xf08 <__floatsisf+0x6c>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <__floatsisf+0x6c>
     edc:	88 23       	and	r24, r24
     ede:	11 f0       	breq	.+4      	; 0xee4 <__floatsisf+0x48>
     ee0:	96 e9       	ldi	r25, 0x96	; 150
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <__floatsisf+0x6a>
     ee4:	77 23       	and	r23, r23
     ee6:	21 f0       	breq	.+8      	; 0xef0 <__floatsisf+0x54>
     ee8:	9e e8       	ldi	r25, 0x8E	; 142
     eea:	87 2f       	mov	r24, r23
     eec:	76 2f       	mov	r23, r22
     eee:	05 c0       	rjmp	.+10     	; 0xefa <__floatsisf+0x5e>
     ef0:	66 23       	and	r22, r22
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__floatsisf+0x74>
     ef4:	96 e8       	ldi	r25, 0x86	; 134
     ef6:	86 2f       	mov	r24, r22
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	2a f0       	brmi	.+10     	; 0xf08 <__floatsisf+0x6c>
     efe:	9a 95       	dec	r25
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	da f7       	brpl	.-10     	; 0xefe <__floatsisf+0x62>
     f08:	88 0f       	add	r24, r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret

00000f12 <__fp_inf>:
     f12:	97 f9       	bld	r25, 7
     f14:	9f 67       	ori	r25, 0x7F	; 127
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	08 95       	ret

00000f1e <__fp_nan>:
     f1e:	9f ef       	ldi	r25, 0xFF	; 255
     f20:	80 ec       	ldi	r24, 0xC0	; 192
     f22:	08 95       	ret

00000f24 <__fp_pscA>:
     f24:	00 24       	eor	r0, r0
     f26:	0a 94       	dec	r0
     f28:	16 16       	cp	r1, r22
     f2a:	17 06       	cpc	r1, r23
     f2c:	18 06       	cpc	r1, r24
     f2e:	09 06       	cpc	r0, r25
     f30:	08 95       	ret

00000f32 <__fp_pscB>:
     f32:	00 24       	eor	r0, r0
     f34:	0a 94       	dec	r0
     f36:	12 16       	cp	r1, r18
     f38:	13 06       	cpc	r1, r19
     f3a:	14 06       	cpc	r1, r20
     f3c:	05 06       	cpc	r0, r21
     f3e:	08 95       	ret

00000f40 <__fp_round>:
     f40:	09 2e       	mov	r0, r25
     f42:	03 94       	inc	r0
     f44:	00 0c       	add	r0, r0
     f46:	11 f4       	brne	.+4      	; 0xf4c <__fp_round+0xc>
     f48:	88 23       	and	r24, r24
     f4a:	52 f0       	brmi	.+20     	; 0xf60 <__fp_round+0x20>
     f4c:	bb 0f       	add	r27, r27
     f4e:	40 f4       	brcc	.+16     	; 0xf60 <__fp_round+0x20>
     f50:	bf 2b       	or	r27, r31
     f52:	11 f4       	brne	.+4      	; 0xf58 <__fp_round+0x18>
     f54:	60 ff       	sbrs	r22, 0
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <__fp_round+0x20>
     f58:	6f 5f       	subi	r22, 0xFF	; 255
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	08 95       	ret

00000f62 <__fp_split3>:
     f62:	57 fd       	sbrc	r21, 7
     f64:	90 58       	subi	r25, 0x80	; 128
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	59 f0       	breq	.+22     	; 0xf82 <__fp_splitA+0x10>
     f6c:	5f 3f       	cpi	r21, 0xFF	; 255
     f6e:	71 f0       	breq	.+28     	; 0xf8c <__fp_splitA+0x1a>
     f70:	47 95       	ror	r20

00000f72 <__fp_splitA>:
     f72:	88 0f       	add	r24, r24
     f74:	97 fb       	bst	r25, 7
     f76:	99 1f       	adc	r25, r25
     f78:	61 f0       	breq	.+24     	; 0xf92 <__fp_splitA+0x20>
     f7a:	9f 3f       	cpi	r25, 0xFF	; 255
     f7c:	79 f0       	breq	.+30     	; 0xf9c <__fp_splitA+0x2a>
     f7e:	87 95       	ror	r24
     f80:	08 95       	ret
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	f2 cf       	rjmp	.-28     	; 0xf70 <__fp_split3+0xe>
     f8c:	46 95       	lsr	r20
     f8e:	f1 df       	rcall	.-30     	; 0xf72 <__fp_splitA>
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <__fp_splitA+0x30>
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	18 06       	cpc	r1, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	f1 cf       	rjmp	.-30     	; 0xf7e <__fp_splitA+0xc>
     f9c:	86 95       	lsr	r24
     f9e:	71 05       	cpc	r23, r1
     fa0:	61 05       	cpc	r22, r1
     fa2:	08 94       	sec
     fa4:	08 95       	ret

00000fa6 <__fp_zero>:
     fa6:	e8 94       	clt

00000fa8 <__fp_szero>:
     fa8:	bb 27       	eor	r27, r27
     faa:	66 27       	eor	r22, r22
     fac:	77 27       	eor	r23, r23
     fae:	cb 01       	movw	r24, r22
     fb0:	97 f9       	bld	r25, 7
     fb2:	08 95       	ret

00000fb4 <__mulsf3>:
     fb4:	0b d0       	rcall	.+22     	; 0xfcc <__mulsf3x>
     fb6:	c4 cf       	rjmp	.-120    	; 0xf40 <__fp_round>
     fb8:	b5 df       	rcall	.-150    	; 0xf24 <__fp_pscA>
     fba:	28 f0       	brcs	.+10     	; 0xfc6 <__mulsf3+0x12>
     fbc:	ba df       	rcall	.-140    	; 0xf32 <__fp_pscB>
     fbe:	18 f0       	brcs	.+6      	; 0xfc6 <__mulsf3+0x12>
     fc0:	95 23       	and	r25, r21
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__mulsf3+0x12>
     fc4:	a6 cf       	rjmp	.-180    	; 0xf12 <__fp_inf>
     fc6:	ab cf       	rjmp	.-170    	; 0xf1e <__fp_nan>
     fc8:	11 24       	eor	r1, r1
     fca:	ee cf       	rjmp	.-36     	; 0xfa8 <__fp_szero>

00000fcc <__mulsf3x>:
     fcc:	ca df       	rcall	.-108    	; 0xf62 <__fp_split3>
     fce:	a0 f3       	brcs	.-24     	; 0xfb8 <__mulsf3+0x4>

00000fd0 <__mulsf3_pse>:
     fd0:	95 9f       	mul	r25, r21
     fd2:	d1 f3       	breq	.-12     	; 0xfc8 <__mulsf3+0x14>
     fd4:	95 0f       	add	r25, r21
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	55 1f       	adc	r21, r21
     fda:	62 9f       	mul	r22, r18
     fdc:	f0 01       	movw	r30, r0
     fde:	72 9f       	mul	r23, r18
     fe0:	bb 27       	eor	r27, r27
     fe2:	f0 0d       	add	r31, r0
     fe4:	b1 1d       	adc	r27, r1
     fe6:	63 9f       	mul	r22, r19
     fe8:	aa 27       	eor	r26, r26
     fea:	f0 0d       	add	r31, r0
     fec:	b1 1d       	adc	r27, r1
     fee:	aa 1f       	adc	r26, r26
     ff0:	64 9f       	mul	r22, r20
     ff2:	66 27       	eor	r22, r22
     ff4:	b0 0d       	add	r27, r0
     ff6:	a1 1d       	adc	r26, r1
     ff8:	66 1f       	adc	r22, r22
     ffa:	82 9f       	mul	r24, r18
     ffc:	22 27       	eor	r18, r18
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	62 1f       	adc	r22, r18
    1004:	73 9f       	mul	r23, r19
    1006:	b0 0d       	add	r27, r0
    1008:	a1 1d       	adc	r26, r1
    100a:	62 1f       	adc	r22, r18
    100c:	83 9f       	mul	r24, r19
    100e:	a0 0d       	add	r26, r0
    1010:	61 1d       	adc	r22, r1
    1012:	22 1f       	adc	r18, r18
    1014:	74 9f       	mul	r23, r20
    1016:	33 27       	eor	r19, r19
    1018:	a0 0d       	add	r26, r0
    101a:	61 1d       	adc	r22, r1
    101c:	23 1f       	adc	r18, r19
    101e:	84 9f       	mul	r24, r20
    1020:	60 0d       	add	r22, r0
    1022:	21 1d       	adc	r18, r1
    1024:	82 2f       	mov	r24, r18
    1026:	76 2f       	mov	r23, r22
    1028:	6a 2f       	mov	r22, r26
    102a:	11 24       	eor	r1, r1
    102c:	9f 57       	subi	r25, 0x7F	; 127
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	8a f0       	brmi	.+34     	; 0x1054 <__mulsf3_pse+0x84>
    1032:	e1 f0       	breq	.+56     	; 0x106c <__mulsf3_pse+0x9c>
    1034:	88 23       	and	r24, r24
    1036:	4a f0       	brmi	.+18     	; 0x104a <__mulsf3_pse+0x7a>
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	bb 1f       	adc	r27, r27
    103e:	66 1f       	adc	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	a9 f7       	brne	.-22     	; 0x1034 <__mulsf3_pse+0x64>
    104a:	9e 3f       	cpi	r25, 0xFE	; 254
    104c:	51 05       	cpc	r21, r1
    104e:	70 f0       	brcs	.+28     	; 0x106c <__mulsf3_pse+0x9c>
    1050:	60 cf       	rjmp	.-320    	; 0xf12 <__fp_inf>
    1052:	aa cf       	rjmp	.-172    	; 0xfa8 <__fp_szero>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	ec f3       	brlt	.-6      	; 0x1052 <__mulsf3_pse+0x82>
    1058:	98 3e       	cpi	r25, 0xE8	; 232
    105a:	dc f3       	brlt	.-10     	; 0x1052 <__mulsf3_pse+0x82>
    105c:	86 95       	lsr	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	b7 95       	ror	r27
    1064:	f7 95       	ror	r31
    1066:	e7 95       	ror	r30
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	c1 f7       	brne	.-16     	; 0x105c <__mulsf3_pse+0x8c>
    106c:	fe 2b       	or	r31, r30
    106e:	88 0f       	add	r24, r24
    1070:	91 1d       	adc	r25, r1
    1072:	96 95       	lsr	r25
    1074:	87 95       	ror	r24
    1076:	97 f9       	bld	r25, 7
    1078:	08 95       	ret

0000107a <printf>:
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e3 e4       	ldi	r30, 0x43	; 67
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__prologue_saves__+0x20>
    1086:	fe 01       	movw	r30, r28
    1088:	35 96       	adiw	r30, 0x05	; 5
    108a:	61 91       	ld	r22, Z+
    108c:	71 91       	ld	r23, Z+
    108e:	af 01       	movw	r20, r30
    1090:	80 91 46 02 	lds	r24, 0x0246
    1094:	90 91 47 02 	lds	r25, 0x0247
    1098:	0e 94 7e 08 	call	0x10fc	; 0x10fc <vfprintf>
    109c:	e2 e0       	ldi	r30, 0x02	; 2
    109e:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__epilogue_restores__+0x20>

000010a2 <puts>:
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	e0 91 46 02 	lds	r30, 0x0246
    10ae:	f0 91 47 02 	lds	r31, 0x0247
    10b2:	23 81       	ldd	r18, Z+3	; 0x03
    10b4:	21 ff       	sbrs	r18, 1
    10b6:	1b c0       	rjmp	.+54     	; 0x10ee <puts+0x4c>
    10b8:	ec 01       	movw	r28, r24
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	89 91       	ld	r24, Y+
    10c0:	60 91 46 02 	lds	r22, 0x0246
    10c4:	70 91 47 02 	lds	r23, 0x0247
    10c8:	db 01       	movw	r26, r22
    10ca:	18 96       	adiw	r26, 0x08	; 8
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	19 97       	sbiw	r26, 0x09	; 9
    10d2:	88 23       	and	r24, r24
    10d4:	31 f0       	breq	.+12     	; 0x10e2 <puts+0x40>
    10d6:	09 95       	icall
    10d8:	89 2b       	or	r24, r25
    10da:	89 f3       	breq	.-30     	; 0x10be <puts+0x1c>
    10dc:	0f ef       	ldi	r16, 0xFF	; 255
    10de:	1f ef       	ldi	r17, 0xFF	; 255
    10e0:	ee cf       	rjmp	.-36     	; 0x10be <puts+0x1c>
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	09 95       	icall
    10e6:	89 2b       	or	r24, r25
    10e8:	11 f4       	brne	.+4      	; 0x10ee <puts+0x4c>
    10ea:	c8 01       	movw	r24, r16
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <puts+0x50>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	08 95       	ret

000010fc <vfprintf>:
    10fc:	ac e0       	ldi	r26, 0x0C	; 12
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e8       	ldi	r30, 0x84	; 132
    1102:	f8 e0       	ldi	r31, 0x08	; 8
    1104:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__>
    1108:	7c 01       	movw	r14, r24
    110a:	6b 01       	movw	r12, r22
    110c:	8a 01       	movw	r16, r20
    110e:	fc 01       	movw	r30, r24
    1110:	17 82       	std	Z+7, r1	; 0x07
    1112:	16 82       	std	Z+6, r1	; 0x06
    1114:	83 81       	ldd	r24, Z+3	; 0x03
    1116:	81 ff       	sbrs	r24, 1
    1118:	bd c1       	rjmp	.+890    	; 0x1494 <vfprintf+0x398>
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	4c 01       	movw	r8, r24
    1120:	f7 01       	movw	r30, r14
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	f6 01       	movw	r30, r12
    1126:	93 fd       	sbrc	r25, 3
    1128:	85 91       	lpm	r24, Z+
    112a:	93 ff       	sbrs	r25, 3
    112c:	81 91       	ld	r24, Z+
    112e:	6f 01       	movw	r12, r30
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <vfprintf+0x3a>
    1134:	ab c1       	rjmp	.+854    	; 0x148c <vfprintf+0x390>
    1136:	85 32       	cpi	r24, 0x25	; 37
    1138:	39 f4       	brne	.+14     	; 0x1148 <vfprintf+0x4c>
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	6f 01       	movw	r12, r30
    1144:	85 32       	cpi	r24, 0x25	; 37
    1146:	29 f4       	brne	.+10     	; 0x1152 <vfprintf+0x56>
    1148:	b7 01       	movw	r22, r14
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1150:	e7 cf       	rjmp	.-50     	; 0x1120 <vfprintf+0x24>
    1152:	51 2c       	mov	r5, r1
    1154:	31 2c       	mov	r3, r1
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	20 32       	cpi	r18, 0x20	; 32
    115a:	a0 f4       	brcc	.+40     	; 0x1184 <vfprintf+0x88>
    115c:	8b 32       	cpi	r24, 0x2B	; 43
    115e:	69 f0       	breq	.+26     	; 0x117a <vfprintf+0x7e>
    1160:	30 f4       	brcc	.+12     	; 0x116e <vfprintf+0x72>
    1162:	80 32       	cpi	r24, 0x20	; 32
    1164:	59 f0       	breq	.+22     	; 0x117c <vfprintf+0x80>
    1166:	83 32       	cpi	r24, 0x23	; 35
    1168:	69 f4       	brne	.+26     	; 0x1184 <vfprintf+0x88>
    116a:	20 61       	ori	r18, 0x10	; 16
    116c:	2c c0       	rjmp	.+88     	; 0x11c6 <vfprintf+0xca>
    116e:	8d 32       	cpi	r24, 0x2D	; 45
    1170:	39 f0       	breq	.+14     	; 0x1180 <vfprintf+0x84>
    1172:	80 33       	cpi	r24, 0x30	; 48
    1174:	39 f4       	brne	.+14     	; 0x1184 <vfprintf+0x88>
    1176:	21 60       	ori	r18, 0x01	; 1
    1178:	26 c0       	rjmp	.+76     	; 0x11c6 <vfprintf+0xca>
    117a:	22 60       	ori	r18, 0x02	; 2
    117c:	24 60       	ori	r18, 0x04	; 4
    117e:	23 c0       	rjmp	.+70     	; 0x11c6 <vfprintf+0xca>
    1180:	28 60       	ori	r18, 0x08	; 8
    1182:	21 c0       	rjmp	.+66     	; 0x11c6 <vfprintf+0xca>
    1184:	27 fd       	sbrc	r18, 7
    1186:	27 c0       	rjmp	.+78     	; 0x11d6 <vfprintf+0xda>
    1188:	30 ed       	ldi	r19, 0xD0	; 208
    118a:	38 0f       	add	r19, r24
    118c:	3a 30       	cpi	r19, 0x0A	; 10
    118e:	78 f4       	brcc	.+30     	; 0x11ae <vfprintf+0xb2>
    1190:	26 ff       	sbrs	r18, 6
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0xa4>
    1194:	fa e0       	ldi	r31, 0x0A	; 10
    1196:	5f 9e       	mul	r5, r31
    1198:	30 0d       	add	r19, r0
    119a:	11 24       	eor	r1, r1
    119c:	53 2e       	mov	r5, r19
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <vfprintf+0xca>
    11a0:	8a e0       	ldi	r24, 0x0A	; 10
    11a2:	38 9e       	mul	r3, r24
    11a4:	30 0d       	add	r19, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	33 2e       	mov	r3, r19
    11aa:	20 62       	ori	r18, 0x20	; 32
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <vfprintf+0xca>
    11ae:	8e 32       	cpi	r24, 0x2E	; 46
    11b0:	21 f4       	brne	.+8      	; 0x11ba <vfprintf+0xbe>
    11b2:	26 fd       	sbrc	r18, 6
    11b4:	6b c1       	rjmp	.+726    	; 0x148c <vfprintf+0x390>
    11b6:	20 64       	ori	r18, 0x40	; 64
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0xca>
    11ba:	8c 36       	cpi	r24, 0x6C	; 108
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <vfprintf+0xc6>
    11be:	20 68       	ori	r18, 0x80	; 128
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0xca>
    11c2:	88 36       	cpi	r24, 0x68	; 104
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <vfprintf+0xda>
    11c6:	f6 01       	movw	r30, r12
    11c8:	93 fd       	sbrc	r25, 3
    11ca:	85 91       	lpm	r24, Z+
    11cc:	93 ff       	sbrs	r25, 3
    11ce:	81 91       	ld	r24, Z+
    11d0:	6f 01       	movw	r12, r30
    11d2:	81 11       	cpse	r24, r1
    11d4:	c1 cf       	rjmp	.-126    	; 0x1158 <vfprintf+0x5c>
    11d6:	98 2f       	mov	r25, r24
    11d8:	9f 7d       	andi	r25, 0xDF	; 223
    11da:	95 54       	subi	r25, 0x45	; 69
    11dc:	93 30       	cpi	r25, 0x03	; 3
    11de:	28 f4       	brcc	.+10     	; 0x11ea <vfprintf+0xee>
    11e0:	0c 5f       	subi	r16, 0xFC	; 252
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	ff e3       	ldi	r31, 0x3F	; 63
    11e6:	f9 83       	std	Y+1, r31	; 0x01
    11e8:	0d c0       	rjmp	.+26     	; 0x1204 <vfprintf+0x108>
    11ea:	83 36       	cpi	r24, 0x63	; 99
    11ec:	31 f0       	breq	.+12     	; 0x11fa <vfprintf+0xfe>
    11ee:	83 37       	cpi	r24, 0x73	; 115
    11f0:	71 f0       	breq	.+28     	; 0x120e <vfprintf+0x112>
    11f2:	83 35       	cpi	r24, 0x53	; 83
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <vfprintf+0xfc>
    11f6:	5b c0       	rjmp	.+182    	; 0x12ae <vfprintf+0x1b2>
    11f8:	22 c0       	rjmp	.+68     	; 0x123e <vfprintf+0x142>
    11fa:	f8 01       	movw	r30, r16
    11fc:	80 81       	ld	r24, Z
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	0e 5f       	subi	r16, 0xFE	; 254
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	44 24       	eor	r4, r4
    1206:	43 94       	inc	r4
    1208:	51 2c       	mov	r5, r1
    120a:	54 01       	movw	r10, r8
    120c:	15 c0       	rjmp	.+42     	; 0x1238 <vfprintf+0x13c>
    120e:	38 01       	movw	r6, r16
    1210:	f2 e0       	ldi	r31, 0x02	; 2
    1212:	6f 0e       	add	r6, r31
    1214:	71 1c       	adc	r7, r1
    1216:	f8 01       	movw	r30, r16
    1218:	a0 80       	ld	r10, Z
    121a:	b1 80       	ldd	r11, Z+1	; 0x01
    121c:	26 ff       	sbrs	r18, 6
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <vfprintf+0x12a>
    1220:	65 2d       	mov	r22, r5
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0x12e>
    1226:	6f ef       	ldi	r22, 0xFF	; 255
    1228:	7f ef       	ldi	r23, 0xFF	; 255
    122a:	c5 01       	movw	r24, r10
    122c:	2c 87       	std	Y+12, r18	; 0x0c
    122e:	0e 94 87 0a 	call	0x150e	; 0x150e <strnlen>
    1232:	2c 01       	movw	r4, r24
    1234:	83 01       	movw	r16, r6
    1236:	2c 85       	ldd	r18, Y+12	; 0x0c
    1238:	2f 77       	andi	r18, 0x7F	; 127
    123a:	22 2e       	mov	r2, r18
    123c:	17 c0       	rjmp	.+46     	; 0x126c <vfprintf+0x170>
    123e:	38 01       	movw	r6, r16
    1240:	f2 e0       	ldi	r31, 0x02	; 2
    1242:	6f 0e       	add	r6, r31
    1244:	71 1c       	adc	r7, r1
    1246:	f8 01       	movw	r30, r16
    1248:	a0 80       	ld	r10, Z
    124a:	b1 80       	ldd	r11, Z+1	; 0x01
    124c:	26 ff       	sbrs	r18, 6
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x15a>
    1250:	65 2d       	mov	r22, r5
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x15e>
    1256:	6f ef       	ldi	r22, 0xFF	; 255
    1258:	7f ef       	ldi	r23, 0xFF	; 255
    125a:	c5 01       	movw	r24, r10
    125c:	2c 87       	std	Y+12, r18	; 0x0c
    125e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <strnlen_P>
    1262:	2c 01       	movw	r4, r24
    1264:	2c 85       	ldd	r18, Y+12	; 0x0c
    1266:	20 68       	ori	r18, 0x80	; 128
    1268:	22 2e       	mov	r2, r18
    126a:	83 01       	movw	r16, r6
    126c:	23 fc       	sbrc	r2, 3
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <vfprintf+0x1aa>
    1270:	83 2d       	mov	r24, r3
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	48 16       	cp	r4, r24
    1276:	59 06       	cpc	r5, r25
    1278:	b0 f4       	brcc	.+44     	; 0x12a6 <vfprintf+0x1aa>
    127a:	b7 01       	movw	r22, r14
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1284:	3a 94       	dec	r3
    1286:	f4 cf       	rjmp	.-24     	; 0x1270 <vfprintf+0x174>
    1288:	f5 01       	movw	r30, r10
    128a:	27 fc       	sbrc	r2, 7
    128c:	85 91       	lpm	r24, Z+
    128e:	27 fe       	sbrs	r2, 7
    1290:	81 91       	ld	r24, Z+
    1292:	5f 01       	movw	r10, r30
    1294:	b7 01       	movw	r22, r14
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    129c:	31 10       	cpse	r3, r1
    129e:	3a 94       	dec	r3
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	4f 1a       	sub	r4, r31
    12a4:	51 08       	sbc	r5, r1
    12a6:	41 14       	cp	r4, r1
    12a8:	51 04       	cpc	r5, r1
    12aa:	71 f7       	brne	.-36     	; 0x1288 <vfprintf+0x18c>
    12ac:	e5 c0       	rjmp	.+458    	; 0x1478 <vfprintf+0x37c>
    12ae:	84 36       	cpi	r24, 0x64	; 100
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <vfprintf+0x1ba>
    12b2:	89 36       	cpi	r24, 0x69	; 105
    12b4:	39 f5       	brne	.+78     	; 0x1304 <vfprintf+0x208>
    12b6:	f8 01       	movw	r30, r16
    12b8:	27 ff       	sbrs	r18, 7
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <vfprintf+0x1ce>
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0c 5f       	subi	r16, 0xFC	; 252
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <vfprintf+0x1de>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	88 27       	eor	r24, r24
    12d0:	77 fd       	sbrc	r23, 7
    12d2:	80 95       	com	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	0e 5f       	subi	r16, 0xFE	; 254
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	2f 76       	andi	r18, 0x6F	; 111
    12dc:	b2 2e       	mov	r11, r18
    12de:	97 ff       	sbrs	r25, 7
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <vfprintf+0x1f8>
    12e2:	90 95       	com	r25
    12e4:	80 95       	com	r24
    12e6:	70 95       	com	r23
    12e8:	61 95       	neg	r22
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	20 68       	ori	r18, 0x80	; 128
    12f2:	b2 2e       	mov	r11, r18
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a4 01       	movw	r20, r8
    12fa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__ultoa_invert>
    12fe:	a8 2e       	mov	r10, r24
    1300:	a8 18       	sub	r10, r8
    1302:	44 c0       	rjmp	.+136    	; 0x138c <vfprintf+0x290>
    1304:	85 37       	cpi	r24, 0x75	; 117
    1306:	29 f4       	brne	.+10     	; 0x1312 <vfprintf+0x216>
    1308:	2f 7e       	andi	r18, 0xEF	; 239
    130a:	b2 2e       	mov	r11, r18
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	25 c0       	rjmp	.+74     	; 0x135c <vfprintf+0x260>
    1312:	f2 2f       	mov	r31, r18
    1314:	f9 7f       	andi	r31, 0xF9	; 249
    1316:	bf 2e       	mov	r11, r31
    1318:	8f 36       	cpi	r24, 0x6F	; 111
    131a:	c1 f0       	breq	.+48     	; 0x134c <vfprintf+0x250>
    131c:	18 f4       	brcc	.+6      	; 0x1324 <vfprintf+0x228>
    131e:	88 35       	cpi	r24, 0x58	; 88
    1320:	79 f0       	breq	.+30     	; 0x1340 <vfprintf+0x244>
    1322:	b4 c0       	rjmp	.+360    	; 0x148c <vfprintf+0x390>
    1324:	80 37       	cpi	r24, 0x70	; 112
    1326:	19 f0       	breq	.+6      	; 0x132e <vfprintf+0x232>
    1328:	88 37       	cpi	r24, 0x78	; 120
    132a:	21 f0       	breq	.+8      	; 0x1334 <vfprintf+0x238>
    132c:	af c0       	rjmp	.+350    	; 0x148c <vfprintf+0x390>
    132e:	2f 2f       	mov	r18, r31
    1330:	20 61       	ori	r18, 0x10	; 16
    1332:	b2 2e       	mov	r11, r18
    1334:	b4 fe       	sbrs	r11, 4
    1336:	0d c0       	rjmp	.+26     	; 0x1352 <vfprintf+0x256>
    1338:	8b 2d       	mov	r24, r11
    133a:	84 60       	ori	r24, 0x04	; 4
    133c:	b8 2e       	mov	r11, r24
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <vfprintf+0x256>
    1340:	24 ff       	sbrs	r18, 4
    1342:	0a c0       	rjmp	.+20     	; 0x1358 <vfprintf+0x25c>
    1344:	9f 2f       	mov	r25, r31
    1346:	96 60       	ori	r25, 0x06	; 6
    1348:	b9 2e       	mov	r11, r25
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0x25c>
    134c:	28 e0       	ldi	r18, 0x08	; 8
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	05 c0       	rjmp	.+10     	; 0x135c <vfprintf+0x260>
    1352:	20 e1       	ldi	r18, 0x10	; 16
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <vfprintf+0x260>
    1358:	20 e1       	ldi	r18, 0x10	; 16
    135a:	32 e0       	ldi	r19, 0x02	; 2
    135c:	f8 01       	movw	r30, r16
    135e:	b7 fe       	sbrs	r11, 7
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <vfprintf+0x274>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	0c 5f       	subi	r16, 0xFC	; 252
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0x280>
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 5f       	subi	r16, 0xFE	; 254
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	a4 01       	movw	r20, r8
    137e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__ultoa_invert>
    1382:	a8 2e       	mov	r10, r24
    1384:	a8 18       	sub	r10, r8
    1386:	fb 2d       	mov	r31, r11
    1388:	ff 77       	andi	r31, 0x7F	; 127
    138a:	bf 2e       	mov	r11, r31
    138c:	b6 fe       	sbrs	r11, 6
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <vfprintf+0x2aa>
    1390:	2b 2d       	mov	r18, r11
    1392:	2e 7f       	andi	r18, 0xFE	; 254
    1394:	a5 14       	cp	r10, r5
    1396:	50 f4       	brcc	.+20     	; 0x13ac <vfprintf+0x2b0>
    1398:	b4 fe       	sbrs	r11, 4
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <vfprintf+0x2b4>
    139c:	b2 fc       	sbrc	r11, 2
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <vfprintf+0x2b4>
    13a0:	2b 2d       	mov	r18, r11
    13a2:	2e 7e       	andi	r18, 0xEE	; 238
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <vfprintf+0x2b4>
    13a6:	7a 2c       	mov	r7, r10
    13a8:	2b 2d       	mov	r18, r11
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x2b6>
    13ac:	7a 2c       	mov	r7, r10
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <vfprintf+0x2b6>
    13b0:	75 2c       	mov	r7, r5
    13b2:	24 ff       	sbrs	r18, 4
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <vfprintf+0x2d4>
    13b6:	fe 01       	movw	r30, r28
    13b8:	ea 0d       	add	r30, r10
    13ba:	f1 1d       	adc	r31, r1
    13bc:	80 81       	ld	r24, Z
    13be:	80 33       	cpi	r24, 0x30	; 48
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <vfprintf+0x2ca>
    13c2:	29 7e       	andi	r18, 0xE9	; 233
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <vfprintf+0x2dc>
    13c6:	22 ff       	sbrs	r18, 2
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <vfprintf+0x2da>
    13ca:	73 94       	inc	r7
    13cc:	73 94       	inc	r7
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <vfprintf+0x2dc>
    13d0:	82 2f       	mov	r24, r18
    13d2:	86 78       	andi	r24, 0x86	; 134
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <vfprintf+0x2dc>
    13d6:	73 94       	inc	r7
    13d8:	23 fd       	sbrc	r18, 3
    13da:	13 c0       	rjmp	.+38     	; 0x1402 <vfprintf+0x306>
    13dc:	20 ff       	sbrs	r18, 0
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x2f0>
    13e0:	5a 2c       	mov	r5, r10
    13e2:	73 14       	cp	r7, r3
    13e4:	18 f4       	brcc	.+6      	; 0x13ec <vfprintf+0x2f0>
    13e6:	53 0c       	add	r5, r3
    13e8:	57 18       	sub	r5, r7
    13ea:	73 2c       	mov	r7, r3
    13ec:	73 14       	cp	r7, r3
    13ee:	68 f4       	brcc	.+26     	; 0x140a <vfprintf+0x30e>
    13f0:	b7 01       	movw	r22, r14
    13f2:	80 e2       	ldi	r24, 0x20	; 32
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	2c 87       	std	Y+12, r18	; 0x0c
    13f8:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    13fc:	73 94       	inc	r7
    13fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1400:	f5 cf       	rjmp	.-22     	; 0x13ec <vfprintf+0x2f0>
    1402:	73 14       	cp	r7, r3
    1404:	10 f4       	brcc	.+4      	; 0x140a <vfprintf+0x30e>
    1406:	37 18       	sub	r3, r7
    1408:	01 c0       	rjmp	.+2      	; 0x140c <vfprintf+0x310>
    140a:	31 2c       	mov	r3, r1
    140c:	24 ff       	sbrs	r18, 4
    140e:	12 c0       	rjmp	.+36     	; 0x1434 <vfprintf+0x338>
    1410:	b7 01       	movw	r22, r14
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	2c 87       	std	Y+12, r18	; 0x0c
    1418:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    141c:	2c 85       	ldd	r18, Y+12	; 0x0c
    141e:	22 ff       	sbrs	r18, 2
    1420:	17 c0       	rjmp	.+46     	; 0x1450 <vfprintf+0x354>
    1422:	21 ff       	sbrs	r18, 1
    1424:	03 c0       	rjmp	.+6      	; 0x142c <vfprintf+0x330>
    1426:	88 e5       	ldi	r24, 0x58	; 88
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x334>
    142c:	88 e7       	ldi	r24, 0x78	; 120
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	b7 01       	movw	r22, r14
    1432:	0c c0       	rjmp	.+24     	; 0x144c <vfprintf+0x350>
    1434:	82 2f       	mov	r24, r18
    1436:	86 78       	andi	r24, 0x86	; 134
    1438:	59 f0       	breq	.+22     	; 0x1450 <vfprintf+0x354>
    143a:	21 fd       	sbrc	r18, 1
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0x346>
    143e:	80 e2       	ldi	r24, 0x20	; 32
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <vfprintf+0x348>
    1442:	8b e2       	ldi	r24, 0x2B	; 43
    1444:	27 fd       	sbrc	r18, 7
    1446:	8d e2       	ldi	r24, 0x2D	; 45
    1448:	b7 01       	movw	r22, r14
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1450:	a5 14       	cp	r10, r5
    1452:	38 f4       	brcc	.+14     	; 0x1462 <vfprintf+0x366>
    1454:	b7 01       	movw	r22, r14
    1456:	80 e3       	ldi	r24, 0x30	; 48
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    145e:	5a 94       	dec	r5
    1460:	f7 cf       	rjmp	.-18     	; 0x1450 <vfprintf+0x354>
    1462:	aa 94       	dec	r10
    1464:	f4 01       	movw	r30, r8
    1466:	ea 0d       	add	r30, r10
    1468:	f1 1d       	adc	r31, r1
    146a:	80 81       	ld	r24, Z
    146c:	b7 01       	movw	r22, r14
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1474:	a1 10       	cpse	r10, r1
    1476:	f5 cf       	rjmp	.-22     	; 0x1462 <vfprintf+0x366>
    1478:	33 20       	and	r3, r3
    147a:	09 f4       	brne	.+2      	; 0x147e <vfprintf+0x382>
    147c:	51 ce       	rjmp	.-862    	; 0x1120 <vfprintf+0x24>
    147e:	b7 01       	movw	r22, r14
    1480:	80 e2       	ldi	r24, 0x20	; 32
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1488:	3a 94       	dec	r3
    148a:	f6 cf       	rjmp	.-20     	; 0x1478 <vfprintf+0x37c>
    148c:	f7 01       	movw	r30, r14
    148e:	86 81       	ldd	r24, Z+6	; 0x06
    1490:	97 81       	ldd	r25, Z+7	; 0x07
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <vfprintf+0x39c>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	2c 96       	adiw	r28, 0x0c	; 12
    149a:	e2 e1       	ldi	r30, 0x12	; 18
    149c:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__>

000014a0 <__eerd_byte_m328p>:
    14a0:	f9 99       	sbic	0x1f, 1	; 31
    14a2:	fe cf       	rjmp	.-4      	; 0x14a0 <__eerd_byte_m328p>
    14a4:	92 bd       	out	0x22, r25	; 34
    14a6:	81 bd       	out	0x21, r24	; 33
    14a8:	f8 9a       	sbi	0x1f, 0	; 31
    14aa:	99 27       	eor	r25, r25
    14ac:	80 b5       	in	r24, 0x20	; 32
    14ae:	08 95       	ret

000014b0 <__eerd_dword_m328p>:
    14b0:	a6 e1       	ldi	r26, 0x16	; 22
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	44 e0       	ldi	r20, 0x04	; 4
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__eerd_blraw_m328p>

000014bc <__eeupd_byte_m328p>:
    14bc:	26 2f       	mov	r18, r22

000014be <__eeupd_r18_m328p>:
    14be:	f9 99       	sbic	0x1f, 1	; 31
    14c0:	fe cf       	rjmp	.-4      	; 0x14be <__eeupd_r18_m328p>
    14c2:	92 bd       	out	0x22, r25	; 34
    14c4:	81 bd       	out	0x21, r24	; 33
    14c6:	f8 9a       	sbi	0x1f, 0	; 31
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	00 b4       	in	r0, 0x20	; 32
    14cc:	02 16       	cp	r0, r18
    14ce:	39 f0       	breq	.+14     	; 0x14de <__eeupd_r18_m328p+0x20>
    14d0:	1f ba       	out	0x1f, r1	; 31
    14d2:	20 bd       	out	0x20, r18	; 32
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	fa 9a       	sbi	0x1f, 2	; 31
    14da:	f9 9a       	sbi	0x1f, 1	; 31
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	08 95       	ret

000014e0 <__eeupd_dword_m328p>:
    14e0:	03 96       	adiw	r24, 0x03	; 3
    14e2:	27 2f       	mov	r18, r23
    14e4:	0e 94 5f 0a 	call	0x14be	; 0x14be <__eeupd_r18_m328p>
    14e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__eeupd_byte_m328p>
    14ec:	25 2f       	mov	r18, r21
    14ee:	0e 94 5f 0a 	call	0x14be	; 0x14be <__eeupd_r18_m328p>
    14f2:	24 2f       	mov	r18, r20
    14f4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__eeupd_r18_m328p>

000014f8 <strnlen_P>:
    14f8:	fc 01       	movw	r30, r24
    14fa:	05 90       	lpm	r0, Z+
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	70 40       	sbci	r23, 0x00	; 0
    1500:	01 10       	cpse	r0, r1
    1502:	d8 f7       	brcc	.-10     	; 0x14fa <strnlen_P+0x2>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	8e 0f       	add	r24, r30
    150a:	9f 1f       	adc	r25, r31
    150c:	08 95       	ret

0000150e <strnlen>:
    150e:	fc 01       	movw	r30, r24
    1510:	61 50       	subi	r22, 0x01	; 1
    1512:	70 40       	sbci	r23, 0x00	; 0
    1514:	01 90       	ld	r0, Z+
    1516:	01 10       	cpse	r0, r1
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <strnlen+0x2>
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	8e 0f       	add	r24, r30
    1520:	9f 1f       	adc	r25, r31
    1522:	08 95       	ret

00001524 <fputc>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	18 2f       	mov	r17, r24
    152e:	09 2f       	mov	r16, r25
    1530:	eb 01       	movw	r28, r22
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 fd       	sbrc	r24, 1
    1536:	03 c0       	rjmp	.+6      	; 0x153e <fputc+0x1a>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	20 c0       	rjmp	.+64     	; 0x157e <fputc+0x5a>
    153e:	82 ff       	sbrs	r24, 2
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <fputc+0x3e>
    1542:	4e 81       	ldd	r20, Y+6	; 0x06
    1544:	5f 81       	ldd	r21, Y+7	; 0x07
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	42 17       	cp	r20, r18
    154c:	53 07       	cpc	r21, r19
    154e:	7c f4       	brge	.+30     	; 0x156e <fputc+0x4a>
    1550:	e8 81       	ld	r30, Y
    1552:	f9 81       	ldd	r31, Y+1	; 0x01
    1554:	9f 01       	movw	r18, r30
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	39 83       	std	Y+1, r19	; 0x01
    155c:	28 83       	st	Y, r18
    155e:	10 83       	st	Z, r17
    1560:	06 c0       	rjmp	.+12     	; 0x156e <fputc+0x4a>
    1562:	e8 85       	ldd	r30, Y+8	; 0x08
    1564:	f9 85       	ldd	r31, Y+9	; 0x09
    1566:	81 2f       	mov	r24, r17
    1568:	09 95       	icall
    156a:	89 2b       	or	r24, r25
    156c:	29 f7       	brne	.-54     	; 0x1538 <fputc+0x14>
    156e:	2e 81       	ldd	r18, Y+6	; 0x06
    1570:	3f 81       	ldd	r19, Y+7	; 0x07
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	3f 83       	std	Y+7, r19	; 0x07
    1578:	2e 83       	std	Y+6, r18	; 0x06
    157a:	81 2f       	mov	r24, r17
    157c:	90 2f       	mov	r25, r16
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <__ultoa_invert>:
    1588:	fa 01       	movw	r30, r20
    158a:	aa 27       	eor	r26, r26
    158c:	28 30       	cpi	r18, 0x08	; 8
    158e:	51 f1       	breq	.+84     	; 0x15e4 <__ultoa_invert+0x5c>
    1590:	20 31       	cpi	r18, 0x10	; 16
    1592:	81 f1       	breq	.+96     	; 0x15f4 <__ultoa_invert+0x6c>
    1594:	e8 94       	clt
    1596:	6f 93       	push	r22
    1598:	6e 7f       	andi	r22, 0xFE	; 254
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	8f 4f       	sbci	r24, 0xFF	; 255
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	af 4f       	sbci	r26, 0xFF	; 255
    15a4:	b1 e0       	ldi	r27, 0x01	; 1
    15a6:	3e d0       	rcall	.+124    	; 0x1624 <__ultoa_invert+0x9c>
    15a8:	b4 e0       	ldi	r27, 0x04	; 4
    15aa:	3c d0       	rcall	.+120    	; 0x1624 <__ultoa_invert+0x9c>
    15ac:	67 0f       	add	r22, r23
    15ae:	78 1f       	adc	r23, r24
    15b0:	89 1f       	adc	r24, r25
    15b2:	9a 1f       	adc	r25, r26
    15b4:	a1 1d       	adc	r26, r1
    15b6:	68 0f       	add	r22, r24
    15b8:	79 1f       	adc	r23, r25
    15ba:	8a 1f       	adc	r24, r26
    15bc:	91 1d       	adc	r25, r1
    15be:	a1 1d       	adc	r26, r1
    15c0:	6a 0f       	add	r22, r26
    15c2:	71 1d       	adc	r23, r1
    15c4:	81 1d       	adc	r24, r1
    15c6:	91 1d       	adc	r25, r1
    15c8:	a1 1d       	adc	r26, r1
    15ca:	20 d0       	rcall	.+64     	; 0x160c <__ultoa_invert+0x84>
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__ultoa_invert+0x48>
    15ce:	68 94       	set
    15d0:	3f 91       	pop	r19
    15d2:	2a e0       	ldi	r18, 0x0A	; 10
    15d4:	26 9f       	mul	r18, r22
    15d6:	11 24       	eor	r1, r1
    15d8:	30 19       	sub	r19, r0
    15da:	30 5d       	subi	r19, 0xD0	; 208
    15dc:	31 93       	st	Z+, r19
    15de:	de f6       	brtc	.-74     	; 0x1596 <__ultoa_invert+0xe>
    15e0:	cf 01       	movw	r24, r30
    15e2:	08 95       	ret
    15e4:	46 2f       	mov	r20, r22
    15e6:	47 70       	andi	r20, 0x07	; 7
    15e8:	40 5d       	subi	r20, 0xD0	; 208
    15ea:	41 93       	st	Z+, r20
    15ec:	b3 e0       	ldi	r27, 0x03	; 3
    15ee:	0f d0       	rcall	.+30     	; 0x160e <__ultoa_invert+0x86>
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__ultoa_invert+0x5c>
    15f2:	f6 cf       	rjmp	.-20     	; 0x15e0 <__ultoa_invert+0x58>
    15f4:	46 2f       	mov	r20, r22
    15f6:	4f 70       	andi	r20, 0x0F	; 15
    15f8:	40 5d       	subi	r20, 0xD0	; 208
    15fa:	4a 33       	cpi	r20, 0x3A	; 58
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <__ultoa_invert+0x7c>
    15fe:	49 5d       	subi	r20, 0xD9	; 217
    1600:	31 fd       	sbrc	r19, 1
    1602:	40 52       	subi	r20, 0x20	; 32
    1604:	41 93       	st	Z+, r20
    1606:	02 d0       	rcall	.+4      	; 0x160c <__ultoa_invert+0x84>
    1608:	a9 f7       	brne	.-22     	; 0x15f4 <__ultoa_invert+0x6c>
    160a:	ea cf       	rjmp	.-44     	; 0x15e0 <__ultoa_invert+0x58>
    160c:	b4 e0       	ldi	r27, 0x04	; 4
    160e:	a6 95       	lsr	r26
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	ba 95       	dec	r27
    161a:	c9 f7       	brne	.-14     	; 0x160e <__ultoa_invert+0x86>
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 05       	cpc	r22, r1
    1620:	71 05       	cpc	r23, r1
    1622:	08 95       	ret
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	0a 2e       	mov	r0, r26
    162a:	06 94       	lsr	r0
    162c:	57 95       	ror	r21
    162e:	47 95       	ror	r20
    1630:	37 95       	ror	r19
    1632:	27 95       	ror	r18
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__ultoa_invert+0xa2>
    1638:	62 0f       	add	r22, r18
    163a:	73 1f       	adc	r23, r19
    163c:	84 1f       	adc	r24, r20
    163e:	95 1f       	adc	r25, r21
    1640:	a0 1d       	adc	r26, r0
    1642:	08 95       	ret

00001644 <__eerd_block_m328p>:
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22

00001648 <__eerd_blraw_m328p>:
    1648:	fc 01       	movw	r30, r24
    164a:	f9 99       	sbic	0x1f, 1	; 31
    164c:	fe cf       	rjmp	.-4      	; 0x164a <__eerd_blraw_m328p+0x2>
    164e:	06 c0       	rjmp	.+12     	; 0x165c <__eerd_blraw_m328p+0x14>
    1650:	f2 bd       	out	0x22, r31	; 34
    1652:	e1 bd       	out	0x21, r30	; 33
    1654:	f8 9a       	sbi	0x1f, 0	; 31
    1656:	31 96       	adiw	r30, 0x01	; 1
    1658:	00 b4       	in	r0, 0x20	; 32
    165a:	0d 92       	st	X+, r0
    165c:	41 50       	subi	r20, 0x01	; 1
    165e:	50 40       	sbci	r21, 0x00	; 0
    1660:	b8 f7       	brcc	.-18     	; 0x1650 <__eerd_blraw_m328p+0x8>
    1662:	08 95       	ret

00001664 <__prologue_saves__>:
    1664:	2f 92       	push	r2
    1666:	3f 92       	push	r3
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	ca 1b       	sub	r28, r26
    168e:	db 0b       	sbc	r29, r27
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	09 94       	ijmp

0000169c <__epilogue_restores__>:
    169c:	2a 88       	ldd	r2, Y+18	; 0x12
    169e:	39 88       	ldd	r3, Y+17	; 0x11
    16a0:	48 88       	ldd	r4, Y+16	; 0x10
    16a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ae:	b9 84       	ldd	r11, Y+9	; 0x09
    16b0:	c8 84       	ldd	r12, Y+8	; 0x08
    16b2:	df 80       	ldd	r13, Y+7	; 0x07
    16b4:	ee 80       	ldd	r14, Y+6	; 0x06
    16b6:	fd 80       	ldd	r15, Y+5	; 0x05
    16b8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ba:	1b 81       	ldd	r17, Y+3	; 0x03
    16bc:	aa 81       	ldd	r26, Y+2	; 0x02
    16be:	b9 81       	ldd	r27, Y+1	; 0x01
    16c0:	ce 0f       	add	r28, r30
    16c2:	d1 1d       	adc	r29, r1
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	ed 01       	movw	r28, r26
    16d0:	08 95       	ret

000016d2 <_exit>:
    16d2:	f8 94       	cli

000016d4 <__stop_program>:
    16d4:	ff cf       	rjmp	.-2      	; 0x16d4 <__stop_program>
